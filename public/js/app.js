(function() {
	"use strict";

	var app = angular.module('app', [
		'app.controllers',
		'app.filters',
		'app.services',
		'app.directives',
		'app.routes',
		'app.config'
	]);


	angular.module('app.routes', ['ui.router', 'ui.router.state.events', 'ngStorage', 'satellizer']);
	angular.module('app.controllers', ['angular-carousel','ng-draggabilly','hljs', 'flow', 'FBAngular', 'dndLists', 'angular.filter', 'angularMoment', 'ngScrollbar', 'mdColorPicker', 'ngAnimate', 'ui.tree', 'toastr', 'ui.router', 'md.data.table', 'ngMaterial', 'ngStorage', 'restangular', 'ngMdIcons', 'angular-loading-bar', 'ngMessages', 'ngSanitize', "leaflet-directive", 'nvd3']);
	angular.module('app.filters', []);
	angular.module('app.services', ['angular-cache', 'ui.router', 'ngStorage', 'restangular', 'toastr']);
	angular.module('app.directives', ['ngMaterial', 'ngPapaParse']);
	angular.module('app.config', []);

})();

(function() {
	"use strict";

	angular.module('app.routes').config(["$stateProvider", "$urlRouterProvider", "$locationProvider", function($stateProvider, $urlRouterProvider, $locationProvider) {
		//$locationProvider.html5Mode(true);
		var getView = function(viewName) {
			return '/views/app/' + viewName + '/' + viewName + '.html';
		};

		$urlRouterProvider.otherwise('/');

		$stateProvider
			.state('app', {
				abstract: true,
				views: {
					header: {
						templateUrl: getView('header'),
						controller: 'HeaderCtrl',
						controllerAs: 'vm'
					},
					main: {},
					'map@': {
						templateUrl: getView('map'),
						controller: 'MapCtrl',
						controllerAs: 'vm'
					},
					'sidemenu@': {
						templateUrl: getView('sidemenu'),
						controller: 'SidemenuCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.home', {
				url: '/',
				views: {

					'sidebar@': {
						templateUrl: getView('home'),
						controller: 'HomeCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.user', {
				url: '/user',
				abstract: true

			})
			.state('app.user.login', {
				url: '/login',
				views: {
					'main@': {
						templateUrl: getView('login'),
						controller: 'LoginCtrl',
						controllerAs: 'vm'

					}
				}

			})
			.state('app.user.profile', {
				url: '/my-profile',
				auth: true,
				resolve: {
					profile: ["DataService", "$auth", function(DataService, $auth) {
						return DataService.getOne('me').$object;
					}]
				},
				views: {
					'main@': {
						templateUrl: getView('user'),
						controller: 'UserCtrl',
						controllerAs: 'vm'
					}
				}

			})
			.state('app.index', {
				abstract: true,
				url: '/index',
				resolve: {
					countries: ["CountriesService", function(CountriesService) {
						return CountriesService.getData();
					}]
				}
			})

		.state('app.index.mydata', {
				url: '/my-data',
				auth: true,
				views: {
					'sidebar@': {
						templateUrl: '/views/app/indexMyData/indexMyDataMenu.html',
						controller: 'IndexMyDataMenuCtrl',
						controllerAs: 'vm'
					},
					'main@': {
						templateUrl: getView('indexMyData'),
						controller: 'IndexMyDataCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.mydata.entry', {
				url: '/:name',
				auth: true,
				views: {
					'sidebar@': {
						templateUrl: '/views/app/indexMyData/indexMyDataMenu.html',
						controller: 'IndexMyDataMenuCtrl',
						controllerAs: 'vm'
					},
					'main@': {
						templateUrl: '/views/app/indexMyData/indexMyDataEntry.html',
						controller: 'IndexMyDataEntryCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.editor', {
				url: '/editor',
				auth: true,
				resolve: {
					indices: ["ContentService", function(ContentService) {
						return ContentService.getIndices();
					}],
					indicators: ["ContentService", function(ContentService) {
						return ContentService.fetchIndicators({
							page: 1,
							order: 'title',
							limit: 1000,
							dir: 'ASC'
						});
					}],
					styles: ["ContentService", function(ContentService) {
						return ContentService.getStyles();
					}],
					categories: ["ContentService", function(ContentService) {
						return ContentService.getCategories({
							indicators: true,
							tree: true
						});
					}]
				},
				views: {
					'sidebar@': {
						templateUrl: getView('indexeditor'),
						controller: 'IndexeditorCtrl',
						controllerAs: 'vm',
					}
				}
			})
			.state('app.index.editor.indicators', {
				url: '/indicators',
				auth: true,
			})
			.state('app.index.editor.indicators.indicator', {
				url: '/:id',
				auth: true,
				layout: 'row',
				resolve: {
					indicator: ["ContentService", "$stateParams", function(ContentService, $stateParams) {
						return ContentService.getIndicator($stateParams.id)
					}]
				},
				views: {
					'main@': {
						templateUrl: '/views/app/indexeditor/indexeditorindicator.html',
						controller: 'IndexeditorindicatorCtrl',
						controllerAs: 'vm'

					}
				}
				/*views:{
					'info':{

					},
					'menu':{
						templateUrl:getView('indexeditor'),
						controller: 'IndexeditorCtrl',
						controllerAs: 'vm'
					}
				}*/
			})
			.state('app.index.editor.indizes', {
				url: '/indizes',
				auth: true,
			})
			.state('app.index.editor.indizes.data', {
				url: '/:id/:name',
				auth: true,
				layout: 'row',
				resolve: {
					index: ["ContentService", "$stateParams", function(ContentService, $stateParams) {
						if ($stateParams.id == 0) return {};
						return ContentService.getItem($stateParams.id);
					}]
				},
				views: {
					'main@': {
						templateUrl: '/views/app/indexeditor/indexeditorindizes.html',
						controller: 'IndexeditorindizesCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.editor.indizes.data.add', {
				url: '/add',
				layout: 'row',
				resolve: {
					indicators: ["ContentService", "$stateParams", function(ContentService, $stateParams) {
						return ContentService.fetchIndicators({
							page: 1,
							order: 'title',
							limit: 1000,
							dir: 'ASC'
						});
					}]
				},
				views: {
					'additional@': {
						templateUrl: '/views/app/indexeditor/indicators.html',
						controller: 'IndexinidcatorsCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.editor.indicators.indicator.details', {
				url: '/:entry',
				auth: true,
				layout: 'row'
			})
			.state('app.index.editor.categories', {
				url: '/categories',
				auth: true,
			})
			.state('app.index.editor.categories.category', {
				url: '/:id',
				auth: true,
				layout: 'row',
				resolve: {
					category: ["ContentService", "$stateParams", function(ContentService, $stateParams) {
						if ($stateParams.id == 'new') {
							return {};
						}
						return ContentService.getCategory($stateParams.id);
					}]
				},
				views: {
					'main@': {
						templateUrl: '/views/app/indexeditor/indexeditorcategory.html',
						controller: 'IndexeditorcategoryCtrl',
						controllerAs: 'vm'
					}
				}
			})

		.state('app.index.create', {
				url: '/create',
				auth: true,
				views: {
					'sidebar@': {
						templateUrl: getView('indexcreator'),
						controller: 'IndexcreatorCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.create.basic', {
				url: '/basic',
				auth: true
			})
			.state('app.index.check', {
				url: '/checking',
				auth: true,
				views: {
					'main@': {
						templateUrl: getView('indexCheck'),
						controller: 'IndexCheckCtrl',
						controllerAs: 'vm'
					},
					'sidebar@': {
						templateUrl: '/views/app/indexCheck/indexCheckSidebar.html',
						controller: 'IndexCheckSidebarCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.meta', {
				url: '/adding-meta-data',
				auth: true,
				layout: 'row',
				views: {
					'main@': {
						templateUrl: getView('indexMeta'),
						controller: 'IndexMetaCtrl',
						controllerAs: 'vm'
					},
					'sidebar@': {
						templateUrl: '/views/app/indexMeta/indexMetaMenu.html',
						controller: 'IndexMetaMenuCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.final', {
				url: '/final',
				auth: true,
				layout: 'row',
				views: {
					'main@': {
						templateUrl: getView('indexFinal'),
						controller: 'IndexFinalCtrl',
						controllerAs: 'vm'
					},
					'sidebar@': {
						templateUrl: '/views/app/indexFinal/indexFinalMenu.html',
						controller: 'IndexFinalMenuCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.export', {
				abstract: true,
				url: '/export',
				resolve: {
					countries: ["DataService", function(DataService) {
						return DataService.getOne('countries/isos').then(function(countries) {
							return countries;
						});
					}]
				}
			})
			.state('app.export.detail', {
				url: '/:id/:name',
				data: {
					pageName: 'Export Data',
				},
				views: {
					'fullscreen@': {
						templateUrl: getView('exported'),
						controller: 'ExportedCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.export.detail.chapter', {
				url: '/chapter/:chapter',
				data: {
					pageName: 'Export Data',
				},
				layout: 'loose',
				fixLayout: true,
				avoidRoots: true,
				views: {
					'header@': {
						templateUrl: getView('chapter'),
						controller: 'ChapterCtrl',
						controllerAs: 'vm'
					},
					'sidebar@': {
						templateUrl: getView('chapterContent'),
						controller: 'ChapterContentCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.export.detail.chapter.indicator', {
				url: '/:indicator/:indiname',
				layout: 'loose',
				fixLayout: true,
				avoidRoots: true
			})
			.state('app.export.detail.chapter.indicator.country', {
				url: '/:iso',
				layout: 'loose',
				fixLayout: true,
				avoidRoots: true
			})
			.state('app.export.detail.chapter.indicator.country.compare', {
				url: '/compare/:countries',
				layout: 'loose',
				fixLayout: true,
				avoidRoots: true
			})
			.state('app.index.exports', {
				url: '/exports',
				auth: true,
				data: {
					pageName: 'Export Data'
				},
				views: {
					'sidebar@': {
						templateUrl: getView('export'),
						controller: 'ExportCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.exports.details', {
				url: '/:id/:name',
				auth: true,
				layout: 'row',
				data: {
					pageName: 'Export Data'
				},
				views: {
					'main@': {
						templateUrl: '/views/app/export/exportDetails.html',
						controller: 'ExportDetailsCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.exports.details.add', {
				url: '/add',
				layout: 'row',
				resolve: {
					indicators: ["ContentService", "$stateParams", function(ContentService, $stateParams) {
						return ContentService.fetchIndicators({
							page: 1,
							order: 'title',
							limit: 1000,
							dir: 'ASC'
						});
					}]
				},
				views: {
					'additional@': {
						templateUrl: '/views/app/indexeditor/indicators.html',
						controller: 'IndexinidcatorsCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.exports.details.style', {
				url: '/style/:styleId/:styleName',
				layout: 'row',
				additional: 'full',
				views: {
					'additional@': {
						templateUrl: getView('exportStyle'),
						controller: 'ExportStyleCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.exports.details.layout', {
				url: '/layout',
				layout: 'row',
				views: {
					'additional@': {
						templateUrl: getView('exportLayout'),
						controller: 'ExportLayoutCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.basemaps', {
				url: '/basemaps',
				auth: true,
				data: {
					pageName: 'Export Data'
				},
				views: {
					'sidebar@': {
						templateUrl: getView('basemaps'),
						controller: 'BasemapsCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.basemaps.details', {
				url: '/:id/:name',
				auth: true,
				layout: 'row',
				data: {
					pageName: 'Basemaps'
				},
				views: {
					'main@': {
						templateUrl: '/views/app/basemaps/basemapDetails.html',
						controller: 'BasemapDetailsCtrl',
						controllerAs: 'vm'
					}
				}
			})
			.state('app.index.list', {
				url: '/list',
				resolve: {
					indicators: ["ContentService", function(ContentService) {
						return ContentService.getIndicators({
							page: 1,
							order: 'title',
							limit: 1000,
							dir: 'ASC'
						})
					}],
					indices: ["ContentService", function(ContentService) {
						return ContentService.fetchIndices();
					}],
					categories: ["ContentService", function(ContentService) {
						return ContentService.getCategories({
							indicators: true,
							tree: true
						});
					}]
				},
				views: {
					'sidebar@': {
						templateUrl: getView('fullList'),
						controller: 'FullListCtrl',
						controllerAs: 'vm',

					}
				}
			})
			.state('app.index.list.filter', {
				url: '/:filter',
				layout: 'row',
				views: {
					'main@': {
						templateUrl: '/views/app/fullList/filter.html',
						controller: 'FullListFitlerCtrl',
						controllerAs: 'vm',
					}
				}
			})
			.state('app.index.indicator', {
				url: '/indicator/:id/:name/:year/:gender/:iso',
				resolve: {
					indicator: ["ContentService", "$stateParams", function(ContentService, $stateParams) {
						return ContentService.fetchIndicator($stateParams.id);
					}]
				},
				views: {
					'sidebar@': {
						templateUrl: getView('indicator'),
						controller: 'IndicatorShowCtrl',
						controllerAs: 'vm'
					}
				},
				params: {
					year: {
						squash: true,
						value: null,
						dynamic: true
					},
					gender: {
						squash: true,
						value: null,
						dynamic: true
					},
					iso: {
						squash: true,
						value: null,
						dynamic: true

					}
				}
			})
			.state('app.index.indicator.info', {
				url: '/details',
				layout: 'row',
				resolve: {
					data: ["ContentService", "$state", function(ContentService, $state) {

						return ContentService.getIndicatorData($state.params.id, $state.params.year, $state.params.gender);
					}]
				},
				views: {
					'main@': {
						templateUrl: '/views/app/indicator/indicatorYearTable.html',
						controller: 'IndicatorYearTableCtrl',
						controllerAs: 'vm',
					}
				}
			})
			.state('app.index.show', {
				url: '/:id/:name',
				resolve: {
					data: ["IndizesService", "$stateParams", function(IndizesService, $stateParams) {
						return IndizesService.fetchData($stateParams.id);
					}],
					countries: ["CountriesService", function(CountriesService) {
						return CountriesService.getData();
					}]
				},
				views: {
					'sidebar@': {
						templateUrl: '/views/app/index/info.html',
						controller: 'IndexCtrl',
						controllerAs: 'vm'
					},
					'selected': {
						templateUrl: '/views/app/index/selected.html',
					}
				}
			})
			.state('app.index.show.info', {
				url: '/info',
				views: {
					'main@': {
						controller: 'IndexinfoCtrl',
						controllerAs: 'vm',
						templateUrl: getView('indexinfo')
					}
				}
			})
			.state('app.index.show.selected', {
				url: '/:item',
				/*views:{
					'selected':{
						templateUrl: getView('selected'),
						controller: 'SelectedCtrl',
						controllerAs: 'vm',
						resolve:{
							getCountry: function(DataService, $stateParams){
								return DataService.getOne('nations', $stateParams.item).$object;
							}
						}
					}
				}*/
			})
			.state('app.index.show.selected.compare', {
				url: '/compare/:countries'
			})
			.state('app.conflict', {
				abstract: true,
				url: '/conflict',
			})
			.state('app.conflict.index', {
				url: '/index',
				resolve: {
					nations: ["Restangular", function(Restangular) {
						return Restangular.all('conflicts/nations');
					}],
					conflicts: ["Restangular", function(Restangular) {
						return Restangular.all('conflicts');
					}]
				},
				views: {
					'sidebar@': {
						controller: 'ConflictsCtrl',
						controllerAs: 'vm',
						templateUrl: getView('conflicts')
					},
					'logo@': {
						templateUrl: getView('logo')
					}
				}
			})
			.state('app.conflict.index.nation', {
				url: '/nation/:iso',
				resolve: {
					nation: ["Restangular", "$stateParams", function(Restangular, $stateParams) {
						return Restangular.one('/conflicts/nations/', $stateParams.iso).get();
					}]
				},
				views: {
					'sidebar@': {
						controller: 'ConflictnationCtrl',
						controllerAs: 'vm',
						templateUrl: getView('conflictnation')
					},
					'logo@': {
						templateUrl: getView('logo')
					}
				}
			})
			.state('app.conflict.index.details', {
				url: '/:id',
				resolve: {
					conflict: ["Restangular", "$stateParams", function(Restangular, $stateParams) {
						return Restangular.one('/conflicts/events/', $stateParams.id).get();
					}]
				},
				views: {
					'sidebar@': {
						controller: 'ConflictdetailsCtrl',
						controllerAs: 'vm',
						templateUrl: getView('conflictdetails')
					},
					'items-menu@': {},
					'logo@': {
						templateUrl: getView('logo')
					}
				}
			})
			.state('app.conflict.import', {
				url: '/import',
				auth: true,
				views: {
					'sidebar@': {
						controller: 'ConflictImportCtrl',
						controllerAs: 'vm',
						templateUrl: getView('conflictImport')
					}
				}
			})
			.state('app.importcsv', {
				url: '/importer',
				data: {
					pageName: 'Import CSV'
				},
				views: {
					'main@': {
						templateUrl: getView('importcsv')
					},
					'map': {}
				}
			});
	}]);
})();

(function() {
	"use strict";

	angular.module('app.routes').run(["$rootScope", "$mdSidenav", "$timeout", "$auth", "$state", "$localStorage", "$window", "leafletData", "toastr", "VectorlayerService", function($rootScope, $mdSidenav, $timeout, $auth, $state, $localStorage, $window, leafletData, toastr, VectorlayerService) {
		$rootScope.sidebarOpen = true;
		$rootScope.greyed = false;
		$rootScope.fixLayout = false;
		$rootScope.looseLayout = $localStorage.fullView || false;
		$rootScope.started = true;
		$rootScope.iframed = $window.self !== $window.top;

		$rootScope.goBack = function() {
			$window.history.back();
		}
		$rootScope.toggleMenu = function(menuId) {
			$mdSidenav(menuId).toggle();
		}

		$rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {

			if (toState.auth && !$auth.isAuthenticated()) {
				toastr.error('Your not allowed to go there buddy!', 'Access denied');
				event.preventDefault();
				return $state.go('app.home');
			}
			if (toState.data && toState.data.pageName) {
				$rootScope.current_page = toState.data.pageName;
			}
			if (toState.layout == "row") {
				$rootScope.rowed = true;
			} else {
				$rootScope.rowed = false;
			}
			if (toState.layout == "loose") {
				$rootScope.looseLayout = true;
			} else {
				$rootScope.looseLayout = false;
			}
			if (toState.additional == "full") {
				$rootScope.addFull = true;
			} else {
				$rootScope.addFull = false;
			}
			if (toState.fixLayout == true) {
				$rootScope.fixLayout = true;
			} else {
				$rootScope.fixLayout = false;
			}

			if (typeof toState.views != "undefined") {

				if (toState.views.hasOwnProperty('sidebar@') || toState.views.hasOwnProperty('main@')) {
					$rootScope.sidebar = true;
				} else {
					$rootScope.sidebar = false;
				}
				if (toState.views.hasOwnProperty('main@') || toState.views.hasOwnProperty('additional@')) {
					$rootScope.mainView = true;
				} else {
					$rootScope.mainView = false;
				}
				if (toState.views.hasOwnProperty('additional@')) {
					$rootScope.additional = true;
				} else {
					$rootScope.additional = false;
				}
				if (toState.views.hasOwnProperty('items-menu@')) {
					$rootScope.itemMenu = true;
				} else {
					$rootScope.itemMenu = false;
				}
				if (toState.views.hasOwnProperty('logo@')) {
					$rootScope.logoView = true;
				} else {
					$rootScope.logoView = false;
				}
				if (toState.views.hasOwnProperty('fullscreen@')) {
					$rootScope.fullscreenView = true;
				} else {
					$rootScope.fullscreenView = false;
				}
			} else {
				if (!toState.avoidRoots) {
					$rootScope.additional = false;
					$rootScope.itemMenu = false;
					$rootScope.logoView = false;
					$rootScope.mainView = false;
					$rootScope.sidebar = true;
				} else {
					$rootScope.sidebar = true;
				}

			}
			if ((toState.name.indexOf('conflict') > -1 && toState.name != "app.conflict.import")) {
				$rootScope.noHeader = true;
			} else {
				$rootScope.noHeader = false;
			}
			if (toState.name == 'app.conflict.index.nation') {
				$rootScope.showItems = true;
			} else {
				$rootScope.showItems = false;
			}
			$rootScope.previousPage = {
				state: fromState,
				params: fromParams
			};
			$rootScope.stateIsLoading = true;
			//$mdSidenav('left').close();


		});
		$rootScope.$on("$viewContentLoaded", function(event, toState) {

		});

		$rootScope.$on("$stateChangeSuccess", function(event, toState) {

			$rootScope.stateIsLoading = false;
			if ($auth.isAuthenticated()) {

				//$mdSidenav('leftMenu').close();
			}
			//resetMapSize();
		});

		// function resetMapSize() {
		// 	$timeout(function() {
		// 		VectorlayerService.getMap().invalidateSize();
		// 	}, 1000);
		// }
		/*window.addEventListener('scroll', function(ev) {
    // avoids scrolling when the focused element is e.g. an input
    if (
        !document.activeElement
        || document.activeElement === document.body
    ) {
        document.body.scrollIntoViewIfNeeded(true);
    }
});*/
	}]);
})();

(function () {
	"use strict";

	angular.module('app.config').config(["$authProvider", function ($authProvider) {
		// Satellizer configuration that specifies which API
		// route the JWT should be retrieved from
		$authProvider.loginUrl = '/api/authenticate/auth';
    $authProvider.signupUrl = '/api/authenticate/auth/signup';
    $authProvider.unlinkUrl = '/api/authenticate/auth/unlink/';
		$authProvider.facebook({
			url: '/api/authenticate/facebook',
			clientId: '771961832910072'
		});
		$authProvider.google({
			url: '/api/authenticate/google',
			clientId: '276634537440-cgtt14qj2e8inp0vq5oq9b46k74jjs3e.apps.googleusercontent.com'
		});
	}]);

})();

(function() {
	"use strict";

	angular.module('app.config').config(["flowFactoryProvider", function(flowFactoryProvider) {
		//
		flowFactoryProvider.defaults = {
			target: '/api/images/upload',
			permanentErrors: [404, 500, 501],
			maxChunkRetries: 1,
			testChunks: false,
			chunkRetryInterval: 5000,
			simultaneousUploads: 4,
			singleFile: true
		};
		flowFactoryProvider.on('catchAll', function(event) {
			//  console.log('catchAll', arguments);
		});
	}]);

})();

(function() {
	"use strict";

	angular.module('app.config').config(["hljsServiceProvider", function(hljsServiceProvider) {
		//
		hljsServiceProvider.setOptions({
			// replace tab with 4 spaces
			tabReplace: '    '
		});
	}]);

})();
(function(){
    "use strict";

    angular.module('app.config').config(["$logProvider", function($logProvider){
        $logProvider.debugEnabled(false);
    }]);

})();

(function (){
	"use strict";

	angular.module('app.config').config(["cfpLoadingBarProvider", function (cfpLoadingBarProvider){
		cfpLoadingBarProvider.includeSpinner = false;
	}]);

})();

(function() {
	"use strict";

	angular.module('app.config').config(["RestangularProvider", function(RestangularProvider) {
		RestangularProvider
			.setBaseUrl('/api/')
			.setDefaultHeaders({
				accept: "application/x.laravel.v1+json"
			})
			.setDefaultHttpFields({
				cache: false
			})
			.addResponseInterceptor(function(data, operation, what, url, response, deferred) {
				var extractedData;
				extractedData = data.data;
				if (data.meta) {
					extractedData._meta = data.meta;
				}
				if (data.included) {
					extractedData._included = data.included;
				}
				return extractedData;
			});
		/*	.setErrorInterceptor(function(response, deferred, responseHandler) {
			console.log('errro');
			if (response.status === 403) {

    		return false; // error handled
    	}

    	return true; // error not handled
		});*/
	}]);

})();

(function(){
	"use strict";

	angular.module('app.config').config(["$mdThemingProvider", "$mdGestureProvider", function($mdThemingProvider,$mdGestureProvider) {
		/* For more info, visit https://material.angularjs.org/#/Theming/01_introduction */
/*	var neonTealMap = $mdThemingProvider.extendPalette('teal', {
    '500': '00ccaa',
		'A200': '00ccaa'
  });
	var whiteMap = $mdThemingProvider.extendPalette('teal', {
    '500': '00ccaa',
		'A200': '#fff'
  });
	var blueMap = $mdThemingProvider.extendPalette('blue', {
    '500': '#006bb9',
		'A200': '#006bb9'
  });
	$mdThemingProvider.definePalette('neonTeal', neonTealMap);
	$mdThemingProvider.definePalette('whiteTeal', whiteMap);
	$mdThemingProvider.definePalette('bluer', blueMap);
		$mdThemingProvider.theme('default')
		.primaryPalette('light-blue')
		.accentPalette('bluer');*/
		var blueMap = $mdThemingProvider.extendPalette('indigo', {
			'500': '#006bb9',
			'A200': '#006bb9'
		});
			$mdThemingProvider.definePalette('bluer', blueMap);

		$mdThemingProvider.theme('default')
		.primaryPalette('bluer')
		.accentPalette('grey')
		.warnPalette('red');

		 $mdGestureProvider.skipClickHijack();
	}]);

})();

(function(){
    "use strict";

    angular.module('app.config').config(["toastrConfig", function(toastrConfig){
        //
        angular.extend(toastrConfig, {
          autoDismiss: true,
          containerId: 'toast-container',
          maxOpened: 2,
          newestOnTop: true,
          positionClass: 'toast-bottom-right',
          preventDuplicates: false,
          preventOpenDuplicates: false,
          target: 'body',
          closeButton: true,
          progressBar:true
        });
    }]);

})();

(function(){
    "use strict";

    angular.module('app.filters').filter( 'alphanum', function(){
        return function( input ){
            //
            if ( !input ){
              return null;
            }
            return input.replace(/([^0-9A-Z])/g,"");

        }
    });

})();

(function(){
	"use strict";

	angular.module('app.filters').filter( 'capitalize', function(){
		return function(input, all) {
			return (!!input) ? input.replace(/([^\W_]+[^\s-]*) */g,function(txt){
				return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
			}) : '';
		};
	});
})();

(function () {
	"use strict";

	angular.module('app.filters').filter('findbyname', function () {
		return function (input, name, field) {
			//
      var founds = [];
			var i = 0,
				len = input.length;

			for (; i < len; i++) {
				if (input[i][field].toLowerCase().indexOf(name.toLowerCase()) > -1) {
					 founds.push(input[i]);
				}
			}
			return founds;
		}
	});

})();

(function(){
	"use strict";

	angular.module('app.filters').filter( 'humanReadable', function(){
		return function humanize(str) {
			if ( !str ){
				return '';
			}
			var frags = str.split('_');
			for (var i=0; i<frags.length; i++) {
				frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);
			}
			return frags.join(' ');
		};
	});
})();
(function(){
    "use strict";

    angular.module('app.filters').filter( 'newline', function(){
        return function( text ){
            //
    
             return text.replace(/(\\r)?\\n/g, '<br /><br />');
        }
    });

})();

(function () {
	"use strict";

	angular.module('app.filters').filter('OrderObjectBy', function () {
		return function (input, attribute) {
			if (!angular.isObject(input)) return input;

			var array = [];
			for (var objectKey in input) {
				array.push(input[objectKey]);
			}

			array.sort(function (a, b) {
				a = parseInt(a[attribute]);
				b = parseInt(b[attribute]);
				return a - b;
			});
			return array;
		}
	}).filter('orderObjectByField', function() {
  return function(items, field, reverse) {
    var filtered = [];
    angular.forEach(items, function(item) {
      filtered.push(item);
    });
    filtered.sort(function (a, b) {
      return (a[field] > b[field] ? 1 : -1);
    });
    if(reverse) filtered.reverse();
    return filtered;
  };
});
;

})();

(function () {
	"use strict";

	angular.module('app.filters').filter('property', property);
	function property() {
		return function (array, year_field, value) {

      var items = [];
      for(var i = 0; i < array.length; i++){

        if(array[i].data[year_field] == value){
          items.push(array[i]);
        }
      }

			return items;
		}
	}
})();

(function(){
    'use strict';

    angular.module('app.filters').filter('truncateCharacters', function () {
        return function (input, chars, breakOnWord) {
            if (isNaN(chars)) {
                return input;
            }
            if (chars <= 0) {
                return '';
            }
            if (input && input.length > chars) {
                input = input.substring(0, chars);

                if (!breakOnWord) {
                    var lastspace = input.lastIndexOf(' ');
                    // Get last space
                    if (lastspace !== -1) {
                        input = input.substr(0, lastspace);
                    }
                } else {
                    while (input.charAt(input.length-1) === ' ') {
                        input = input.substr(0, input.length - 1);
                    }
                }
                return input + '...';
            }
            return input;
        };
    });
})();
(function(){
    'use strict';

    angular.module('app.filters').filter('truncateWords', function () {
        return function (input, words) {
            if (isNaN(words)) {
                return input;
            }
            if (words <= 0) {
                return '';
            }
            if (input) {
                var inputWords = input.split(/\s+/);
                if (inputWords.length > words) {
                    input = inputWords.slice(0, words).join(' ') + '...';
                }
            }
            return input;
        };
    });
})();
(function(){
	"use strict";

	angular.module('app.filters').filter( 'trustHtml', ["$sce", function( $sce ){
		return function( html ){
			return $sce.trustAsHtml(html);
		};
	}]);
})();
(function(){
	"use strict";

	angular.module('app.filters').filter('ucfirst', function() {
		return function( input ) {
			if ( !input ){
				return null;
			}
			return input.substring(0, 1).toUpperCase() + input.substring(1);
		};
	});

})();

(function(){
    "use strict";

    angular.module('app.services').factory('BasemapsService', ["DataService", "toastr", function(DataService, toastr){
        //
        return {
          basemaps:[],
          basemap:{},
          getBasemaps: function(success, error){
            var _that = this;
            DataService.getAll('basemaps').then(function(response){
              _that.basemaps = response;
              if(typeof success === 'function')
              success(_that.basemaps);
            }, error);
          },
          getBasemap: function(id, success, error){
            var _that = this;
            DataService.getOne('basemaps',id).then(function(response){
              _that.basemap = response;
              if(typeof success === 'function')
              success(_that.basemap);
            });
          },
          setBasemap: function(data){
            return this.basemap = data;
          },
          save: function(basemap, success, error){
            if(basemap.id == 0 || !basemap.id){
              DataService.post('basemaps', basemap).then(function(response){
                toastr.success('New Basemap successfully created');
                if(typeof success === 'function')
                success(response);
              },function(response){
                toastr.error('Saving error');
                if(typeof error === 'function')
                error(response);
              });
            }
            else{
              basemap.save().then(function(response){
                toastr.success('Save successful');
                if(typeof success === 'function')
                success(response);
              },function(response){
                toastr.error('Saving error');
                if(typeof error === 'function')
                error(response);
              });
            }
          },
          removeItem: function(id, success, error){
            DataService.remove('basemaps', id).then(function(response){
              toastr.success('Deletion successful');
              if(typeof success === 'function')
              success(response);
            }, function(response){
              if(typeof error === 'function')
              error(response);
            })
          }
        }
    }]);

})();

(function() {
		"use strict";

		angular.module('app.services').factory('ColorHandleService', function() {
				//
				var ColorHandle;
				return ColorHandle = (function() {
					/*
					      @param {String} color Color string in CSS rgba(0-255, 0-255, 0-255, 0-1) format.
					      @param {Number} stop  Value 0-1, the gradient color stop. 0 means the color appears at 0%, 0.5 means 50%, etc.
					*/

					function ColorHandle(color, stop) {
						this.color = color;
						this.stop = stop;
					}

					return ColorHandle;

				})();
		});

})();

(function() {
	"use strict";

	angular.module('app.services').factory('ContentService', ["DataService", "$filter", function(DataService, $filter) {
		//
		function searchForItem(list, id) {

			for (var i = 0; i < list.length; i++) {
				var item = list[i];
				if (item.id == id) {
					return item;
				}
				if (item.children) {
					var subresult = searchForItem(item.children, id);
					if (subresult) {
						return subresult;
					}

				}
			}
			return null;
		}
		return {
			content: {
				indicators: [],
				indicator: {},
				data: [],
				categories: [],
				category: {},
				styles: [],
				infographics: [],
				indices: []
			},
			backup: {},
			fetchIndices: function(filter) {
				return this.content.indices = DataService.getAll('index').$object;
			},
			fetchIndicators: function(filter) {
				return this.content.indicators = DataService.getAll('indicators', filter).$object
			},
			fetchCategories: function(filter, withoutSave) {
				if (withoutSave) {
					return DataService.getAll('categories', filter).$object;
				}
				return this.content.categories = DataService.getAll('categories', filter).$object;
			},
			fetchStyles: function(filter) {
				return this.content.styles = DataService.getAll('styles', filter).$object;
			},
			getIndices: function(filter) {
				return this.fetchIndices(filter);

				return this.content.indices;
			},
			getCategories: function(filter, withoutSave) {
				if (withoutSave) {
					return this.fetchCategories(filter, withoutSave);
				}
				if (this.content.categories.length == 0) {
					return this.fetchCategories(filter);
				}
				return this.content.categories;
			},
			getIndicators: function(filter) {
				if (this.content.indicators.length > 0) {
					return this.content.indicators;
				}
				return this.fetchIndicators(filter);

			},
			getStyles: function(filter) {
				if (this.content.styles.length == 0) {
					return this.fetchStyles(filter);
				}
				return this.content.styles;
			},
			getIndicator: function(id) {
				if (this.content.indicators.length > 0) {
					for (var i = 0; i < this.content.indicators.length; i++) {
						if (this.content.indicators[i].id == id) {
							return this.content.indicators[i];
						}
					}
				}
				return this.fetchIndicator(id);
			},
			fetchIndicator: function(id, success) {
				var that = this;
				return DataService.getOne('indicators/' + id).then(function(data) {
					if (typeof success == "function") {
						success(data);
					}
					return that.content.indicator = data;
				});
			},
			fetchIndicatorWithData: function(id, success, query) {
				DataService.getOne('indicators/', id, query).then(function(data) {
					if (typeof success == "function") {
						success(data);
					}
				});
			},
			fetchIndicatorPromise: function(id) {
				return DataService.getOne('indicators', id);
			},
			getIndicatorData: function(id, year, gender) {
				if (year && gender && gender != 'all') {
					return this.content.data = DataService.getAll('indicators/' + id + '/data/' + year + '/gender/' + gender);
				} else if (year) {
					return this.content.data = DataService.getAll('indicators/' + id + '/data/' + year);
				}
				return this.content.data = DataService.getAll('indicators/' + id + '/data');
			},
			getIndicatorHistory: function(id, iso, gender) {
				return DataService.getAll('indicators/' + id + '/history/' + iso, {
					gender: gender
				});
			},
			getItem: function(id) {
				/*	if(this.content.indices.length > 0){
						 this.content.data = searchForItem(this.content.indices, id);
					}
					else{*/
				return this.content.data = DataService.getOne('index/', id)
					//}
			},
			removeContent: function(id, list) {
				var that = this;
				angular.forEach(list, function(entry, key) {
					if (entry.id == id) {
						list.splice(key, 1);
						return true;
					}
					if (entry.children) {
						var subresult = that.removeContent(id, entry.children);
						if (subresult) {
							return subresult;
						}
					}
				});
				return false;
			},
			findContent: function(id, list) {
				var found = null;
				var that = this;
				angular.forEach(list, function(entry, key) {
					if (entry.id == id) {
						found = entry;
					}
					if (entry.children && entry.children.length && !found) {
						var subresult = that.findContent(id, entry.children);
						if (subresult) {
							found = subresult;
						}
					}
				});
				return found;
			},
			addItem: function(item) {
				this.content.indices.push(item)
			},
			removeItem: function(id) {
				this.removeContent(id, this.content.indices);
				return DataService.remove('index/', id);
			},
			updateItem: function(item) {
				var entry = this.findContent(item.id, this.content.indices);
				//console.log(entry, item);
				return entry = item;
			},
			getCategory: function(id) {
				if (this.content.categories.length) {
					return this.findContent(id, this.content.categories);
				} else {
					return this.content.category = DataService.getOne('categories/' + id).$object;
				}
			},
			removeCategory: function(id) {
				this.removeContent(id, this.content.categories);
				return DataService.remove('categories/', id);
			},
			filterList: function(type, filter, list) {
				if (list.length > 0) {
					if (!this.backup[type]) {
						this.backup[type] = angular.copy(this.content[type]);
					} else {
						this.content[type] = angular.copy(this.backup[type]);
					}
					return this.content[type] = $filter('filter')(this.content[type], filter)
				}
				this.content[type] = angular.copy(this.backup[type]);
				delete this.backup[type];
				return this.content[type];
			},
			resetFilter: function(type) {
				if (!this.backup[type]) return this.content[type];
				this.content[type] = angular.copy(this.backup[type]);
				delete this.backup[type];
				return this.content[type];
			}

		}
	}]);

})();

(function() {
	"use strict";

	angular.module('app.services').factory('CountriesService', ["DataService", function(DataService) {
		//
		return {
			countries: [],
			continents: [],
			indicator: null,
			fetchData: function() {
				return this.countries = DataService.getOne('countries/isos').$object;
			},
			getData: function() {
				if (!this.countries.length) {
					this.fetchData();
				}
				return this.countries;
			},
			getContinents: function(success, indicator) {
				var _that = this;
				if (this.continents.length && indicator == this.indicator) {
					success(this.continents);
				} else {
					this.indicator = indicator;
					return DataService.getAll('continents', {
						indicator: indicator
					}).then(function(continents) {
						_that.continents = continents;
						success(continents);
					});
				}

			}
		}
	}]);

})();

(function() {
	"use strict";

	angular.module('app.services').factory('DataService', DataService);
	DataService.$inject = ['Restangular', 'toastr'];

	function DataService(Restangular, toastr) {
		return {
			getAll: getAll,
			getOne: getOne,
			post: post,
			put: put,
			update: update,
			remove: remove
		};

		function getAll(route, filter) {
			var data = Restangular.all(route).getList(filter);
			data.then(function() {}, function(data) {
				toastr.error(data.statusText, 'Connection Error');
			});
			return data;
		}

		function getOne(route, id, query) {
			return Restangular.one(route, id).get(query);
		}

		function post(route, data) {
			var data = Restangular.all(route).post(data);
			data.then(function() {}, function(data) {
				toastr.error(data.data.error, 'Saving failed');
			});
			return data;
		}

		function put(route, data) {
			return Restangular.all(route).put(data);
		}

		function update(route, id, data) {
			return Restangular.one(route, id).put(data);
		}

		function remove(route, id) {
			return Restangular.one(route, id).remove();
		}
	}

})();

(function(){
	"use strict";

	angular.module("app.services").factory('DialogService', ["$mdDialog", function($mdDialog){

		return {
			fromTemplate: function(template, $scope){

				var options = {
					templateUrl: './views/dialogs/' + template + '/' + template + '.html'
				};

				if ($scope){
					options.scope = $scope.$new();
				}

				return $mdDialog.show(options);
			},

			hide: function(){
				return $mdDialog.hide();
			},

			alert: function(title, content){
				$mdDialog.show(
					$mdDialog.alert()
						.title(title)
						.content(content)
						.ok('Ok')
				);
			},

			confirm: function(title, content) {
				return $mdDialog.show(
					$mdDialog.confirm()
						.title(title)
						.content(content)
						.ok('Ok')
						.cancel('Cancel')
				);
			}
		};
	}]);
})();
(function(){
    "use strict";

    angular.module('app.services').factory('ErrorCheckerService', ["DataService", "DialogService", "IndexService", function(DataService, DialogService, IndexService){
        //
        var vm = this;

        function checkMyData(data) {
    			vm.extendingChoices = [];
    			if (vm.data.length) {
    				vm.myData.then(function(imports) {
    					angular.forEach(imports, function(entry) {
    						var found = 0;
    						angular.forEach(vm.data[0].meta.fields, function(field) {
    							var columns = JSON.parse(entry.meta_data);
    							angular.forEach(columns, function(column) {
    								if (column.column == field) {
    									found++;
    								}
    							})
    						});
    						if (found >= vm.data[0].meta.fields.length - 3) {
    							vm.extendingChoices.push(entry);
    						}
    					})
    					if (vm.extendingChoices.length) {
    						if(vm.meta.year_field){
    							vm.meta.year = vm.data[0].data[0][vm.meta.year_field];
    						}
    						DialogService.fromTemplate('extendData', $scope);
    					}
    				});
    			}
          return extendedChoices;
    		}

    		function clearErrors() {
    			angular.forEach(vm.data, function(row, key) {
    				angular.forEach(row.data[0], function(item, k) {
    					if (isNaN(item) || item < 0) {
    						if ( item.toString().toUpperCase() == "#NA" || item < 0 || item.toString().toUpperCase().indexOf('N/A') > -1) {
    							vm.data[key].data[0][k] = null;
    							row.errors.splice(0, 1);
    							vm.errors.splice(0, 1);
    						}
    					}
    				});
    				if (!row.data[0][vm.meta.iso_field]) {
    					var error = {
    						type: "2",
    						message: "Iso field is not valid!",
    						value: row.data[0][vm.meta.iso_field],
    						column: vm.meta.iso_field,
    						row: key
    					};
    					var errorFound = false;
    					angular.forEach(row.errors, function(error, key) {
    						if (error.type == 2) {
    							errorFound = true;
    						}
    					})
    					if (!errorFound) {
    						row.errors.push(error);
    						vm.iso_errors.push(error);
    					}
    				}
    			});
    		}

    		function fetchIso() {
    			if (!vm.meta.iso_field) {
    				toastr.error('Check your selection for the ISO field', 'Column not specified!');
    				return false;
    			}
    			if (!vm.meta.country_field) {
    				toastr.error('Check your selection for the COUNTRY field', 'Column not specified!');
    				return false;
    			}
    			if (vm.meta.country_field == vm.meta.iso_field) {
    				toastr.error('ISO field and COUNTRY field can not be the same', 'Selection error!');
    				return false;
    			}

    			vm.notFound = [];
    			var entries = [];
    			var isoCheck = 0;
    			var isoType = 'iso-3166-2';
    			angular.forEach(vm.data, function(item, key) {
    				if (item.data[0][vm.meta.iso_field]) {
    					isoCheck += item.data[0][vm.meta.iso_field].length == 3 ? 1 : 0;
    				}
    				switch (item.data[0][vm.meta.country_field]) {
    					case 'Cabo Verde':
    						item.data[0][vm.meta.country_field] = 'Cape Verde';
    						break;
    					case "Democratic Peoples Republic of Korea":
    						item.data[0][vm.meta.country_field] = "Democratic People's Republic of Korea";
    						break;
    					case "Cote d'Ivoire":
    						item.data[0][vm.meta.country_field] = "Ivory Coast";
    						break;
    					case "Lao Peoples Democratic Republic":
    						item.data[0][vm.meta.country_field] = "Lao People's Democratic Republic";
    						break;
    					default:
    						break;
    				}
    				entries.push({
    					iso: item.data[0][vm.meta.iso_field],
    					name: item.data[0][vm.meta.country_field]
    				});
    			});
    			var isoType = isoCheck >= (entries.length / 2) ? 'iso-3166-1' : 'iso-3166-2';
    			IndexService.resetToSelect();
    			DataService.post('countries/byIsoNames', {
    				data: entries,
    				iso: isoType
    			}).then(function(response) {
    				angular.forEach(response, function(country, key) {
    					angular.forEach(vm.data, function(item, k) {
    						if (country.name == item.data[0][vm.meta.country_field]) {
    							if (country.data.length > 1) {
    								var toSelect = {
    									entry: item,
    									options: country.data
    								};
    								IndexService.addToSelect(toSelect);
    							} else {
    								if (typeof country.data[0] != "undefined") {
    									vm.data[k].data[0][vm.meta.iso_field] = country.data[0].iso;
    									vm.data[k].data[0][vm.meta.country_field] = country.data[0].admin;
    									if (item.errors.length) {
    										angular.forEach(item.errors, function(error, e) {
    											if (error.type == 2 || error.type == 3) {
    												vm.iso_errors.splice(0, 1);
    												item.errors.splice(e, 1);
    											} else if (error.type == 1) {
    												if (error.column == vm.meta.iso_field) {
    													vm.errors.splice(0, 1);
    													item.errors.splice(e, 1);
    												}
    											}
    										});

    									}
    								} else {
    									//console.log(vm.data[k]);
    									var error = {
    										type: "3",
    										message: "Could not locate a valid iso name!",
    										column: vm.meta.country_field
    									};
    									var errorFound = false;
    									angular.forEach(vm.data[k].errors, function(error, i) {
    										if (error.type == 3) {
    											errorFound = true;
    										}
    									})
    									if (!errorFound) {
    										IndexService.addIsoError(error);
    										item.errors.push(error);
    									}
    								}
    							}
    						}
    					});
    				});
    				vm.iso_checked = true;
    				if (IndexService.getToSelect().length) {
    					DialogService.fromTemplate('selectisofetchers');
    				}
    			}, function(response) {
    				toastr.error('Please check your field selections', response.data.message);
    			});

    		}
        return {
          checkMyData: checkMyData
        }
    }]);

})();

(function() {
	"use strict";

	angular.module('app.services').service('ExportService', ["DataService", "toastr", function(DataService, toastr) {
		var vm = this;
		vm._promise, vm._promiseOne;
		vm._callbacks = new Array();
		vm._callbacksOne = new Array();
		vm.exports;
		vm.chapter;
		vm.indicator;
		vm.exporter = {};

		vm.getExports = function(success, error, force) {
			if (angular.isDefined(vm.exports) && !force) {
				if (typeof success === 'function')
					success(vm.exports);
			} else if (angular.isDefined(vm._promise) && !force) {
				if (typeof success === 'function')
					vm._callbacks.push(success);
			} else {
				vm._callbacks.push(success);
				vm._promise = DataService.getAll('exports').then(function(response) {
					vm.exports = response;
					angular.forEach(vm._callbacks, function(callback) {
						if (typeof callback != "undefined")
							callback(vm.exports);
					});
					vm._promise = null;
				}, error);
			}
		}

		vm.getExport = function(id, success, error, force) {
			if (angular.isDefined(vm.exporter) && vm.exporter.id == id && !force) {
				if (typeof success === 'function')
					success(vm.exporter);
			} else {
				vm._callbacksOne.push(success);
				vm._promiseOne = DataService.getOne('exports', id).then(function(response) {
					vm.exporter = response;
					if (!vm.exporter.items) {
						vm.exporter.items = new Array();
					}
					angular.forEach(vm._callbacksOne, function(callback) {
						if (typeof callback != "undefined")
							callback(vm.exporter);
					});
					vm._promiseOne = null;
				}, error);
			}

		}
		vm.setExport = function(data) {

			return vm.exporter = data;
		}
		vm.getChapter = function(id, chapter, success, ignoreFirst) {
			if (angular.isDefined(vm.exporter) && vm.exporter.id == id) {
				vm.chapter = vm.exporter.items[chapter - 1];

				if (!ignoreFirst) {
					if (vm.chapter.type == "indicator") {
						vm.indicator = vm.chapter;
					} else {
						vm.indicator = vm.getFirstIndicator(vm.chapter.children);
					}
				}

				if (typeof success === 'function')
					success(vm.chapter, vm.indicator);
			} else {
				vm.getExport(id, function(data) {
					vm.chapter = vm.exporter.items[chapter - 1];
					if (!ignoreFirst)
						vm.indicator = vm.getFirstIndicator(vm.chapter.children);
					if (typeof success === 'function')
						success(vm.chapter, vm.indicator);
				});
			}
		}
		vm.getIndicator = function(id, chapter, indicator, success) {
			var fetch = typeof indicator == 'undefined' ? true : false;

			vm.getExport(id, function(exporter) {
				vm.getChapter(id, chapter, function(ch, ind) {
					if (!fetch) vm.indicator = vm.findIndicator(indicator);
					success(vm.indicator, vm.chapter, vm.exporter);
				}, !fetch)
			});
			// vm.getChapter(id, chapter, function(c, i) {
			// 	angular.forEach(c.children, function(indi) {
			// 		if (indi.indicator_id == indicator) {
			// 			vm.indicator = indi;
			// 		}
			// 	})
			// 	success(vm.chapter, vm.indicator);
			// }, true);
		}
		vm.getFirstIndicator = function(list) {
			var found = null;
			angular.forEach(list, function(item) {
				if (item.type == 'indicator' && !found) {
					found = item;
				} else {
					if (!found) {
						found = vm.getFirstIndicator(item.children);
					}
				}
			});
			return found;
		}
		vm.findIndicator = function(indicator_id) {
			var item = null;
			angular.forEach(vm.exporter.items, function(chapter, key) {
				if (typeof chapter.indicator_id != "undefined") {
					if (chapter.indicator_id == indicator_id) {
						item = chapter;
					}
				}
				angular.forEach(chapter.children, function(indicator) {
					if (indicator.indicator_id == indicator_id) {
						item = indicator;
					}
				})
			});
			return item;
		}
		vm.save = function(success, error) {
			if (vm.exporter.id == 0 || !vm.exporter.id) {
				DataService.post('exports', vm.exporter).then(function(response) {
					vm.exporter = response;
					vm.exports.push(vm.exporter);
					toastr.success('Successfully created');
					if (typeof success === 'function')
						success(response);
				}, function(response) {
					toastr.error('Something went wrong!');
					if (typeof error === 'function')
						error(response);
				});
			} else {
				vm.exporter.save().then(function(response) {
					if (typeof success === 'function')
						toastr.success('Save successfully');
					success(response);
					vm.getExports(function() {}, function() {}, true);
				}, function(response) {
					toastr.error('Something went wrong!');
					if (typeof error === 'function')
						error(response);
				});
			}
		}
		vm.removeItem = function(id, success, error) {
			DataService.remove('exports', id).then(function(response) {
				if (typeof success === 'function')
					toastr.success('Successfully deleted');
				success(response);
			}, function(response) {
				if (typeof error === 'function')
					error(response);
			})
		}

	}]);

})();

(function(){
    "use strict";

    angular.module('app.services').factory('IconsService', function(){
        var unicodes = {
          'empty': "\ue600",
          'agrar': "\ue600",
          'anchor': "\ue601",
          'butterfly': "\ue602",
          'energy':"\ue603",
          'sink': "\ue604",
          'man': "\ue605",
          'fabric': "\ue606",
          'tree':"\ue607",
          'water':"\ue608"
        };

        return {
          getUnicode: function(icon){
            return unicodes[icon];
          },
          getList:function(){
            return unicodes;
          }
        }
    });

})();

(function() {
	"use strict";

	angular.module('app.services').factory('IndexService', ["CacheFactory", "DataService", "$state", function(CacheFactory, DataService, $state) {
		//
		var serviceData = {
				data: [],
				errors: [],
				iso_errors: [],
				meta: {
					iso_field: '',
					country_field: '',
					year_field: '',
					gender_field: '',
					table: []
				},
				indicators: {},
				toSelect: []
			},
			storage, importCache, indicator;

		if (!CacheFactory.get('importData')) {
			importCache = CacheFactory('importData', {
				cacheFlushInterval: 60 * 60 * 1000, // This cache will clear itself every hour.
				deleteOnExpire: 'aggressive', // Items will be deleted from this cache right when they expire.
				storageMode: 'localStorage' // This cache will use `localStorage`.
			});
			serviceData = importCache.get('dataToImport');
		} else {
			importCache = CacheFactory.get('importData');
			storage = importCache.get('dataToImport');
		}
		return {
			clear: function() {
				$state.go('app.index.create');
				if (CacheFactory.get('importData')) {
					importCache.remove('dataToImport');
				}
				return serviceData = {
					data: [],
					errors: [],
					iso_errors: [],
					meta: {
						iso_field: '',
						country_field: '',
						year_field: '',
						gender_field: ''
					},
					toSelect: [],
					indicators: {}
				};
			},
			addData: function(item) {
				return serviceData.data.push(item);
			},
			addIndicator: function(item) {
				return serviceData.indicators.push(item);
			},
			addToSelect: function(item) {
				return serviceData.toSelect.push(item);
			},
			addIsoError: function(error) {
				return serviceData.iso_errors.push(error);
			},
			removeToSelect: function(item) {
				var index = serviceData.toSelect.indexOf(item);
				return index > -1 ? serviceData.toSelect.splice(index, 1) : false;
			},
			setData: function(data) {
				return serviceData.data = data;
			},
			setIsoField: function(key) {
				return serviceData.meta.iso_field = key;
			},
			setCountryField: function(key) {
				return serviceData.meta.country_field = key;
			},
			setGenderField: function(key) {
				return serviceData.meta.gender_field = key;
			},
			setYearField: function(key) {
				return serviceData.meta.year_field = key;
			},
			setErrors: function(errors) {
				return serviceData.errors = errors;
			},
			setToLocalStorage: function() {
				//console.log(serviceData);
				importCache.put('dataToImport', serviceData);
			},
			setIndicator: function(key, item) {
				return serviceData.indicators[key] = item;
			},
			setActiveIndicatorData: function(item) {
				return indicator = serviceData.indicators[item.column_name] = item;
			},
			getFromLocalStorage: function() {
				return serviceData = importCache.get('dataToImport');
			},
			getFullData: function() {
				return serviceData;
			},
			getData: function() {
				if (typeof serviceData == "undefined") return false;
				return serviceData.data;
			},
			getMeta: function() {
				if (typeof serviceData == "undefined") return false;
				return serviceData.meta;
			},
			getToSelect: function() {
				return serviceData.toSelect;
			},
			getIsoField: function() {
				return serviceData.meta.iso_field;
			},
			getCountryField: function() {
				return serviceData.meta.country_field;
			},
			getErrors: function() {
				if (typeof serviceData == "undefined") return false;
				return serviceData.errors;
			},
			getIsoErrors: function() {
				if (typeof serviceData == "undefined") return false;
				return serviceData.iso_errors;
			},
			getFirstEntry: function() {
				return serviceData.data[0];
			},
			getDataSize: function() {
				return serviceData.data.length;
			},
			getIndicator: function(key) {
				return indicator = serviceData.indicators[key];
			},
			getIndicators: function() {
				if (typeof serviceData == "undefined") return false;
				return serviceData.indicators;
			},
			activeIndicator: function() {
				return indicator;
			},
			resetIndicator: function() {
				return indicator = null;
			},
			reduceIsoError: function() {
				return serviceData.iso_errors.splice(0, 1);
			},
			reduceError: function() {
				return serviceData.errors.splice(0, 1);
			},
			resetToSelect: function() {
				return serviceData.toSelect = [];
			},
			resetLocalStorage: function() {
				if (CacheFactory.get('importData')) {
					importCache.remove('dataToImport');
				}
				return serviceData = {
					data: [],
					errors: [],
					iso_errors: [],
					meta: {
						iso_field: '',
						country_field: '',
						year_field: ''
					},
					toSelect: [],
					indicators: {}
				};
			},
			fetchNationData: function(indicator, iso, success) {
				return DataService.getOne('indicators/' + indicator + "/history", iso).then(function(data) {
					success(data);
				});
			}
		}
	}]);

})();

(function() {
	"use strict";

	angular.module('app.services').factory('IndizesService', ["DataService", function(DataService) {
		//
		return {
			index: {
				data: {
					data: null,
					structure: null
				},
				promises: {
					data: null,
					structur: null
				}
			},
			fetchData: function(index) {
				this.index.promises.data = DataService.getAll('index/' + index + '/year/latest');
				this.index.promises.structure = DataService.getOne('index/' + index + '/structure');
				this.index.data.data = this.index.promises.data.$object;
				this.index.data.structure = this.index.promises.structure.$object;
				return this.index;
			},
			getData: function() {
				return this.index.data.data;
			},
			getStructure: function() {
				return this.index.data.structure;
			},
			getDataPromise: function() {
				return this.index.promises.data;
			},
			getStructurePromise: function() {
				return this.index.promises.structure;
			},
			fetchNationData: function(index, iso, success) {
				DataService.getOne('index/' + index, iso).then(function(data) {
					success(data);
				});
			}
		}
	}]);

})();

(function () {
		"use strict";

		angular.module('app.services').factory('RecursionHelper', ["$compile", function ($compile) {
				//
				return {
					/**
					 * Manually compiles the element, fixing the recursion loop.
					 * @param element
					 * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.
					 * @returns An object containing the linking functions.
					 */
					compile: function (element, link) {
						// Normalize the link parameter
						if (angular.isFunction(link)) {
							link = {
								post: link
							};
						}

						// Break the recursion loop by removing the contents
						var contents = element.contents().remove();
						var compiledContents;
						return {
							pre: (link && link.pre) ? link.pre : null,
							/**
							 * Compiles and re-adds the contents
							 */
							post: function (scope, element) {
								// Compile the contents
								if (!compiledContents) {
									compiledContents = $compile(contents);
								}
								// Re-add the compiled contents to the element
								compiledContents(scope, function (clone) {
									element.append(clone);
								});

								// Call the post-linking function, if any
								if (link && link.post) {
									link.post.apply(null, arguments);
								}
							}
						};
					}
				}
				}]);

		})();

(function(){
	"use strict";

	angular.module("app.services").factory('ToastService', ["$mdToast", function($mdToast){

		var delay = 6000,
			position = 'top right',
			action = 'OK';

		return {
			show: function(content){
				if (!content){
					return false;
				}

				return $mdToast.show(
					$mdToast.simple()
						.content(content)
						.position(position)
						.action(action)
						.hideDelay(delay)
				);
			},
			error: function(content){
				if (!content){
					return false;
				}

				return $mdToast.show(
					$mdToast.simple()
						.content(content)
						.position(position)
						.theme('warn')
						.action(action)
						.hideDelay(delay)
				);
			}
		};
	}]);
})();
(function(){
    "use strict";

    angular.module('app.services').factory('UserService', ["DataService", function(DataService){
        //

        return {
          user:{
            data: []
          },
          myData: function(){
            return this.user.data = DataService.getAll('me/data');
          },
          myProfile: function(){

          },
          myFriends: function(){

          }
        }
    }]);

})();

(function() {
	"use strict";

	angular.module('app.services').service('VectorlayerService', ["$timeout", "DataService", "leafletData", function($timeout, DataService, leafletData) {
		var that = this,
			_self = this;
		this.fallbackBasemap = {
			name: 'Outdoor',
			url: 'https://{s}.tiles.mapbox.com/v4/valderrama.d86114b6/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFnbm9sbyIsImEiOiJuSFdUYkg4In0.5HOykKk0pNP1N3isfPQGTQ',
			type: 'xyz',

			options: {
				noWrap: true,
				continuousWorld: false,
				detectRetina: true,

			}
		}
		this.basemap = this.fallbackBasemap;
		this.iso_field = 'iso_a2';
		this.canvas = false;
		this.palette = [];
		this.ctx = null;
		this.keys = {
			mazpen: 'vector-tiles-Q3_Os5w',
			mapbox: 'pk.eyJ1IjoibWFnbm9sbyIsImEiOiJuSFdUYkg4In0.5HOykKk0pNP1N3isfPQGTQ'
		};
		this.data = {
			layer: '',
			name: 'countries_big',
			baseColor: '#06a99c',
			iso3: 'adm0_a3',
			iso2: 'iso_a2',
			iso: 'iso_a2',
			fields: "id,admin,adm0_a3,wb_a3,su_a3,iso_a3,iso_a2,name,name_long",
			field: 'score'
		};
		this.map = {
			data: [],
			current: [],
			structure: [],
			style: [],
			attribution: ''
		};
		this.mapLayer = null;
		this.layers = {
			baselayers: {
				xyz: this.basemap,
			}
		};
		this.center = {
			lat: 48.209206,
			lng: 16.372778,
			zoom: 3
		};
		this.maxbounds = {
			southWest: {
				lat: 90,
				lng: 180
			},
			northEast: {
				lat: -90,
				lng: -180
			}
		};
		this.defaults = {
			minZoom: 2,
			maxZoom: 6,
			zoomControlPosition: 'bottomright'
		};
		this.legend = null;
		this.setMap = function(map) {
			return this.mapLayer = map;
		}
		this.getMap = function() {
			return this.mapLayer;
		}
		this.createMap = function() {
			this.mapLayer = new mapboxgl.Map({
				container: 'mapgl',
				minZoom: 2,
				style: 'mapbox://styles/mapbox/light-v9'
			});
			this.mapLayer.on('load', function() {
				that.mapLayer.addSource('countries_src', {
					'type': 'vector',
					//'tiles': ['https://www.23degree.org:3001/services/postgis/' + VectorlayerService.getName() + '/geom/vector-tiles/{z}/{x}/{y}.pbf?fields=' + VectorlayerService.fields()]
					'url': 'mapbox://magnolo.6zzfq94v'
				});
				that.mapLayer.addLayer({
					'id': that.getName(),
					'source': 'countries_src',
					'source-layer': "ne_10m_admin_0_countries-5pek43",
					'type': 'fill',
					'filter': ['!=', 'ISO_A2', ''],
					'paint': {
						'fill-color': "#000",
						'fill-opacity': 1,
					}
				}, 'water-label');
				that.mapLayer.addLayer({
					"id": "country-hover",
					"type": "fill",
					"source": "countries_src",
					"layout": {},
					'source-layer': "ne_10m_admin_0_countries-5pek43",
					"paint": {
						"fill-outline-color": '#333',
						"fill-color": 'rgba(0,0,0,0)'
					},
					"filter": ["==", "ISO_A2", ""]
				}, 'water-label');

				that.mapLayer.on("mousemove", function(e) {
					var features = that.mapLayer.queryRenderedFeatures(e.point, {
						layers: [that.getName()]
					});
					if (features.length) {
						that.mapLayer.setFilter("country-hover", ["==", "ISO_A2", features[0].properties.ISO_A2]);
					} else {
						that.mapLayer.setFilter("country-hover", ["==", "ISO_A2", ""]);
					}

				});
			})
		}
		this.setBaseLayer = function(basemap, dataprovider) {
			if (!basemap)
				this.basemap = basemap = this.fallbackBasemap;
			var attribution = (basemap.attribution || basemap.provider);
			if (dataprovider) {
				attribution += ' | Data by <a href="' + dataprovider.url + '" target="_blank">' + dataprovider.title + '</a>';
			}
			this.layers.baselayers['xyz'] = {
				name: basemap.name,
				url: basemap.url,
				type: 'xyz',
				// options: {
				// 	noWrap: true,
				// 	continuousWorld: false,
				// 	detectRetina: true,
				// 	attribution:attribution,
				// }

			}
			this.map.attribution = attribution;
			// 	//DIRTY HACK TO CORRECT LAYER ON TOP: SETTING OPTIONS UP HERE CAUSES THE PROBLEM
			//  $timeout(function(){
			// 	 angular.forEach(that.mapLayer._layers,function(layer){
			// 		 if(layer.options.url != "https://www.23degree.org:3001/services/postgis/countries_big/geom/vector-tiles/{z}/{x}/{y}.pbf?fields=id,admin,adm0_a3,wb_a3,su_a3,iso_a3,iso_a2,name,name_long" ){
			// 				layer.bringToBack();
			// 		 }
			//
			// 	 })
			//  })
		}
		this.setMapDefaults = function(style) {
			this.defaults = {
				zoomControl: style.zoom_controls,
				scrollWheelZoom: style.scroll_wheel_zoom
			}
			if (style.scroll_wheel_zoom) {
				this.mapLayer.scrollWheelZoom.enable()
			} else {
				this.mapLayer.scrollWheelZoom.disable()
			}
			if (style.legends) {
				if (style.color_range) {
					this.legend = {
						colors: [],
						labels: []
					}
					if (typeof style.color_range == "string") {
						style.color_range = JSON.parse(style.color_range);
					}
					angular.forEach(style.color_range, function(color) {
						if (color.hasLabel) {
							that.legend.colors.push(color.color);
							if (color.label) {
								that.legend.labels.push(color.label);
							} else {
								that.legend.labels.push(parseFloat(color.stop * 100).toFixed(0));
							}

						}

					});
					if (this.legend.colors.length == 0) {
						this.legend = null;
					}
				} else {
					this.legend = {
						colors: ['#fff', style.base_color, 'rgba(102,102,102,1)'],
						labels: ['high', 'Ø', 'low']
					}
				}

			} else {
				this.legend = null
			}

		}
		this.resetBaseLayer = function() {
			this.layers.baselayers['xyz'] = this.baselayer;
		}
		this.setLayer = function(l) {
			return this.data.layer = l;
		}
		this.getLayer = function() {
			return this.data.layer;
		}
		this.getName = function() {
			return this.data.name;
		}
		this.fields = function() {
			return this.data.fields;
		}
		this.iso = function() {
			return this.data.iso;
		}
		this.iso3 = function() {
			return this.data.iso3;
		}
		this.iso2 = function() {
			return this.data.iso2;
		}
		this.createCanvas = function(color) {
			this.canvas = document.createElement('canvas');
			this.canvas.width = 280;
			this.canvas.height = 10;
			this.ctx = this.canvas.getContext('2d');
			var gradient = this.ctx.createLinearGradient(0, 0, 280, 10);

			gradient.addColorStop(1, 'rgba(255,255,255,0.6)');
			gradient.addColorStop(0.53, color || 'rgba(128, 243, 198,0.6)');
			gradient.addColorStop(0, 'rgba(102,102,102,0.6)');

			this.ctx.fillStyle = gradient;
			this.ctx.fillRect(0, 0, 280, 10);
			this.palette = this.ctx.getImageData(0, 0, 257, 1).data;
			//document.getElementsByTagName('body')[0].appendChild(this.canvas);
		}
		this.updateCanvas = function(color) {


			var gradient = this.ctx.createLinearGradient(0, 0, 257, 10);
			gradient.addColorStop(1, 'rgba(255,255,255,0.6)');
			gradient.addColorStop(0.53, color || 'rgba(128, 243, 198,0.6)');
			gradient.addColorStop(0, 'rgba(102,102,102,.6)');

			this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
			this.ctx.fillStyle = gradient;
			this.ctx.fillRect(0, 0, 257, 10);

			this.palette = this.ctx.getImageData(0, 0, 257, 1).data;
		}
		this.createFixedCanvas = function(colorRange) {

			this.canvas = document.createElement('canvas');
			this.canvas.width = 257;
			this.canvas.height = 10;
			this.ctx = this.canvas.getContext('2d');
			var gradient = this.ctx.createLinearGradient(0, 0, 257, 10);

			for (var i = 0; i < colorRange.length; i++) {
				gradient.addColorStop(colorRange[i].stop, colorRange[i].color);
			}
			this.ctx.fillStyle = gradient;
			this.ctx.fillRect(0, 0, 257, 10);
			this.palette = this.ctx.getImageData(0, 0, 257, 1).data;
		}
		this.updateFixedCanvas = function(colorRange) {
			var gradient = this.ctx.createLinearGradient(0, 0, 257, 10);
			for (var i = 0; i < colorRange.length; i++) {
				gradient.addColorStop(colorRange[i].stop, colorRange[i].color);
			}
			this.ctx.clearRect(0, 0, 257, 10);
			this.ctx.fillStyle = gradient;
			this.ctx.fillRect(0, 0, 257, 10);
			this.palette = this.ctx.getImageData(0, 0, 257, 1).data;
			//document.getElementsByTagName('body')[0].appendChild(this.canvas);
		}
		this.setBaseColor = function(color) {
				return this.data.baseColor = color;
			}
			/*	setStyle: function(style) {
					this.data.layer.setStyle(style)
				},*/
		this.countryClick = function(clickFunction) {
			var that = this;
			$timeout(function() {
				that.mapLayer.on('click', clickFunction);
			});

		}
		this.getColor = function(value) {
			return this.palette[value];
		}
		this.setStyle = function(style) {
			return this.map.style = style;
		}
		this.invertStyle = function() {
			this.data.layer.setStyle(that.invertedStyle);
			that.data.layer.options.mutexToggle = false;
			that.data.layer.redraw();
		}
		this.localStyle = function() {
			this.data.layer.setStyle(that.countriesStyle);
			that.data.layer.options.mutexToggle = true;
			that.data.layer.redraw();
		}
		this.setData = function(data, structure, color, drawIt) {
			this.map.data = data;
			this.map.structure = structure;
			if (typeof color != "undefined") {
				this.data.baseColor = color;
			}

			if (!this.canvas) {

				this.createFixedCanvas(this.data.baseColor);

			} else {


				this.updateFixedCanvas(this.data.baseColor);

			}
			if (drawIt) {
				this.paintCountries();
			}
		}
		this.getNationByIso = function(iso, list) {
			if (typeof list !== "undefined") {
				if (list.length == 0) return false;
				var nation = {};
				angular.forEach(list, function(nat) {
					if (nat.iso == iso) {
						nation = nat;
					}
				});
			} else {
				if (this.map.data.length == 0) return false;
				var nation = {};
				angular.forEach(this.map.data, function(nat) {
					if (nat.iso == iso) {
						nation = nat;
					}
				});
			}
			return nation;
		}
		this.getNationByName = function(name) {
			if (this.map.data.length == 0) return false;
		}
		this.getDataColors = function() {
			var colors = {
				'property': 'ISO_A2',
				'type': 'categorical',
				'stops': []
			};
			angular.forEach(that.map.data, function(country) {
				var field = 'score';
				var linearScale = d3.scale.linear().domain([that.map.structure.min, that.map.structure.max]).range([0, 256]);
				var colorPos = parseInt(linearScale(parseFloat(country[field]))) * 4; //;
				var color = 'rgba(' + that.palette[colorPos] + ', ' + that.palette[colorPos + 1] + ', ' + that.palette[colorPos + 2] + ', ' + parseFloat(that.palette[colorPos + 3] / 255).toFixed(2) + ')';
				var paint = [country.iso, color];
				colors.stops.push(paint);
			})
			return colors;
		}
		this.paintCountries = function(style, click, mutex) {
			$timeout(function() {
				that.mapLayer.setPaintProperty('countries_big', 'fill-color', that.getDataColors())
			});
		}
		this.resetSelected = function(iso) {
			if (typeof this.data.layer.layers != "undefined") {
				angular.forEach(this.data.layer.layers[this.data.name + '_geom'].features, function(feature, key) {
					if (iso) {
						if (key != iso)
							feature.selected = false;
					} else {
						feature.selected = false;
					}

				});
				this.redraw();
			}

		}
		this.setSelectedFeature = function(iso, selected, deselectedAll) {

			// if (typeof this.data.layer.layers[this.data.name + '_geom'].features[iso] == 'undefined') {
			// 	console.log(iso);
			// 	//debugger;
			// } else {
			// 	if (deselectedAll) {
			// 		angular.forEach(this.data.layer.layers[this.data.name + '_geom'].features, function(feature, key) {
			// 			feature.selected = false;
			//
			// 		});
			// 	}
			//
			// 	this.data.layer.layers[this.data.name + '_geom'].features[iso].selected = selected;
			// 	this.redraw();
			// }

		}
		this.redraw = function() {
			this.data.layer.redraw();
		}
		this.paint = function(color) {
			if (typeof color == "string") {
				this.setBaseColor(color);
				if (this.ctx) {
					this.updateCanvas(color);
				} else {
					this.createCanvas(color)
				}
			} else {
				if (this.ctx) {
					this.updateFixedCanvas(color);
				} else {
					this.createFixedCanvas(color)
				}
			}

			this.paintCountries();
		}
		this.gotoCountry = function(iso) {
			DataService.getOne('countries/bbox', [iso]).then(function(data) {
				var bounds = [
					[data.coordinates[0][0][0], data.coordinates[0][0][1]],
					[data.coordinates[0][2][0], data.coordinates[0][2][1]]
				];
				console.log(bounds);
				var pad = [
					[0, 0],
					[100, 100]
				];
				// if (vm.compare.active) {
				// 	pad = [
				// 		[0, 0],
				// 		[0, 0]
				// 	];
				// }
				that.mapLayer.fitBounds(bounds ,{padding:100,maxZoom: 4});
			});
		}
		this.gotoCountries = function(main, isos) {
			//	isos.push(main);
			DataService.getOne('countries/bbox', isos).then(function(data) {

				var bounds = new mapboxgl.LngLatBounds(
					new mapboxgl.LngLat(data.coordinates[0][0][0], data.coordinates[0][0][1]),
					new mapboxgl.LngLat(data.coordinates[0][2][0], data.coordinates[0][2][1])
				);

				// if (vm.compare.active) {
				// 	pad = [
				// 		[0, 0],
				// 		[0, 0]
				// 	];
				// }
				that.mapLayer.fitBounds(bounds, {
					padding: 100,
					maxZoom: 4
				});
			});
		}

		this.invertedStyle = function(feature) {
			var style = {};
			var iso = feature.properties[that.iso_field];
			var nation = that.getNationByIso(iso);
			// var field = that.map.structure.name || 'score';
			var field = 'score';

			var linearScale = d3.scale.linear().domain([that.map.structure.min, that.map.structure.max]).range([0, 256]);
			var colorPos = parseInt(linearScale(parseFloat(nation[field]))) * 4; //;
			var color = 'rgba(' + that.palette[colorPos] + ', ' + that.palette[colorPos + 1] + ', ' + that.palette[colorPos + 2] + ',' + that.palette[colorPos + 3] + ')';

			style.color = 'rgba(0,0,0,0)';
			if (typeof nation[field] != "undefined" && nation[field] != null) {
				style.color = 'rgba(' + that.palette[colorPos] + ', ' + that.palette[colorPos + 1] + ', ' + that.palette[colorPos + 2] + ',0.1)';
			}

			style.outline = {
				color: 'rgba(0,0,0,0)',
				size: 0
			};
			style.selected = {
				color: color,
				outline: {
					color: 'rgba(0,0,0,0.3)',
					size: 2
				}
			};
			return style;
		}


	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('BasemapDetailsCtrl', ["$state", "BasemapsService", "VectorlayerService", function($state, BasemapsService, VectorlayerService){
        //
        var vm = this;
        vm.basemap = {}
        vm.selected = [];
        vm.options = {
          save: function(){
            BasemapsService.save(vm.basemap, function(response){
              VectorlayerService.setBaseLayer(vm.basemap);
              $state.go('app.index.basemaps.details',{id: response.id, name: response.name});
            });
          },
          withSave: true,
        };

        activate();

        function activate(){
          if($state.params.id != 0){
            BasemapsService.getBasemap($state.params.id, function(response){
              vm.basemap = response;
              VectorlayerService.setBaseLayer(vm.basemap);
            });
          }
          else {
            console.log(vm.basemap);
          }
        }
        function removeItem(item, list){
    			angular.forEach(list, function(entry, key){
    				if(entry.id == item.id){
    					list.splice(key, 1);
    					return true;
    				}
    				if(entry.children){
    					var subresult = removeItem(item, entry.children);
    					if(subresult){
    						return subresult;
    					}
    				}
    			});
    			return false;
    		}
    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('BasemapsCtrl', ["$state", "BasemapsService", function($state, BasemapsService){
        //
        var vm = this;
        vm.basemaps = [];
        vm.selection = [];
    		vm.options = {
    			drag: false,
    			type: 'basemaps',
    			allowMove: false,
    			allowDrop: false,
    			allowAdd: true,
    			allowDelete: true,
    			itemClick: function(id, name) {
    				$state.go('app.index.basemaps.details', {
    					id: id,
    					name: name
    				})
    			},
    			addClick: function() {
    				$state.go('app.index.basemaps.details', {
    					id: 0,
    					name: 'new'
    				})
    			},
    			deleteClick: function() {
    				angular.forEach(vm.selection, function(item, key) {
    					BasemapsService.removeItem(item.id, function(data) {
    						if ($state.params.id == item.id) {
    							$state.go('app.index.basemaps');
    						}
                var idx = vm.basemaps.indexOf(item);
                vm.basemaps.splice(idx,1);
                vm.selection = [];
    					});
    				});

    			}
    		};

        activate();

        function activate(){
          BasemapsService.getBasemaps(function(response){
            vm.basemaps = response;
          });
        }
    }]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ChapterCtrl', ["$rootScope", "$scope", "$state", "DialogService", "ExportService", function($rootScope, $scope, $state, DialogService, ExportService) {
		var vm = this;
		vm.gotoChapter = gotoChapter;
		vm.ExportService = ExportService;
		vm.showData = showData;
		vm.ExportService.getChapter($state.params.id, $state.params.chapter || 1);

		function gotoChapter(chapter) {
			vm.ExportService.getChapter($state.params.id, chapter, function(c, i) {

				if ($state.params.iso) {
					$state.go('app.export.detail.chapter.indicator.country', {
						chapter: chapter,
						indicator: i.indicator_id,
						indiname: i.name,
						iso: $state.params.iso
					});
				} else {
					$state.go('app.export.detail.chapter.indicator', {
						chapter: chapter,
						indicator: i.indicator_id,
						indiname: i.name
					})
				}

			});
		}

		function showData() {
			DialogService.fromTemplate('exportdata', $scope);
		}

	
	}]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ChapterContentCtrl', ["$scope", "$rootScope", "$timeout", "$state", "DataService", "ContentService", "countries", "ExportService", "IndizesService", "IndexService", "DialogService", "VectorlayerService", function($scope, $rootScope, $timeout, $state, DataService, ContentService, countries, ExportService, IndizesService, IndexService, DialogService, VectorlayerService) {
		//
		var vm = this;
		$rootScope.sidebarOpen = false;
		vm.compare = false;
		vm.activeTab = 0, vm.selectedIndicator;
		vm.selectedCountry = {}, vm.current = {}, vm.circleOptions = {};
		vm.countriesList = [], vm.compareList = [];
		vm.chapterId = $state.params.chapter;
		vm.ExportService = ExportService;
		vm.setCompare = setCompare;
		vm.selectCountry = selectCountry;
		vm.showInfo = showInfo;
		vm.gotoIndicator = gotoIndicator;
		//vm.countries = countries.plain();
		vm.compareOptions = {};
		activate();

		VectorlayerService.countryClick(function(e) {
			var feature = VectorlayerService.mapLayer.queryRenderedFeatures(e.point, {
				layers: [VectorlayerService.getName()]
			});
			if(feature.length){
				var iso = feature[0].properties.ISO_A2;
				if (!countryExistsInData(iso)) return false;
				if (vm.compare) {
					addCompareCountry(iso, true)
					showComparison();
				} else {
					$state.go('app.export.detail.chapter.indicator.country', {
						indicator: vm.ExportService.indicator.indicator_id,
						indiname: vm.ExportService.indicator.name,
						iso: iso
					});
					//$rootScope.sidebarOpen = false;
					getCountryByIso(iso);
					fetchNationData(iso);
				}
			}


		});

		function addCompareCountry(iso, withRemove) {
			if (iso == vm.selectedCountry.iso)
				return false;
			var cl = null;
			var idx = vm.compareList.indexOf(iso);
			angular.forEach(vm.data, function(nat) {
				if (nat.iso == iso) {
					cl = nat;
				}
			})
			if (idx == -1) {
				if (cl) {
					vm.countriesList.push(cl);
					vm.compareList.push(cl.iso);
					VectorlayerService.setSelectedFeature(cl.iso, true);
				}
			} else if (withRemove) {
				vm.compareList.splice(idx, 1);
				vm.countriesList.splice(vm.countriesList.indexOf(cl), 1);
				VectorlayerService.setSelectedFeature(iso, false);
			}

		}

		function showComparison() {
			$state.go('app.export.detail.chapter.indicator.country.compare', {
				countries: vm.compareList.join('-vs-')
			});
			VectorlayerService.gotoCountries($state.params.iso, vm.compareList);
		}

		function setCompare(activate) {
			if (activate) {
				vm.compare = true;
				vm.countriesList[0] = vm.selectedCountry;
				VectorlayerService.invertStyle();
				$state.go('app.export.detail.chapter.indicator.country.compare', {
					countries: vm.compareList.join('-vs-')
				});
			} else {
				vm.compare = false;
				VectorlayerService.localStyle();
				$state.go('app.export.detail.chapter.indicator.country');
				VectorlayerService.setSelectedFeature($state.params.iso, true);

				//muss nicht sein
				vm.compareList = [];
				vm.countriesList = [];
			}

		}

		function getIndicator(finished) {
			vm.ExportService.getIndicator($state.params.id, $state.params.chapter, $state.params.indicator, function(indicator, chapter, exporter) {
				vm.selectedIndicator = indicator;
				renderIndicator(indicator, finished);
			});
		}

		// DRY in you face. REDUCE THIS MULTIPLE KOT
		function gotoIndicator() {
			if (vm.ExportService.chapter.type == "indicator") {
				var idx = 0;
				angular.forEach(vm.ExportService.exporter.items, function(item, key) {
					if (item.id == vm.selectedIndicator.id) {
						idx = key;
					}
				})
				if(typeof vm.selectedCountry.iso != "undefined"){
					$state.go('app.export.detail.chapter.indicator.country', {
						chapter: idx + 1,
						indicator: vm.selectedIndicator.indicator_id,
						indiname: vm.selectedIndicator.name,
						iso:vm.selectedCountry.iso
					});
				}
				else{
					$state.go('app.export.detail.chapter.indicator', {
						chapter: idx + 1,
						indicator: vm.selectedIndicator.indicator_id,
						indiname: vm.selectedIndicator.name
					});
				}
			} else {
				if (vm.ExportService.chapter.id != vm.selectedIndicator.parent.id) {
					var idx = 0;
					angular.forEach(vm.ExportService.exporter.items, function(item, key) {
						if (item.id == vm.selectedIndicator.parent.id) {
							idx = key;
						}
					})
					if(typeof vm.selectedCountry.iso != "undefined"){
						$state.go('app.export.detail.chapter.indicator.country', {
							chapter: idx + 1,
							indicator: vm.selectedIndicator.indicator_id,
							indiname: vm.selectedIndicator.name,
							iso:vm.selectedCountry.iso
						});
					}
					else{
						$state.go('app.export.detail.chapter.indicator', {
							chapter: idx + 1,
							indicator: vm.selectedIndicator.indicator_id,
							indiname: vm.selectedIndicator.name
						});
					}
				} else {
					if(typeof vm.selectedCountry.iso != "undefined"){
						$state.go('app.export.detail.chapter.indicator.country', {
							indicator: vm.selectedIndicator.indicator_id,
							indiname: vm.selectedIndicator.name,
							iso:vm.selectedCountry.iso
						});
					}
					else{
						$state.go('app.export.detail.chapter.indicator', {
							indicator: vm.selectedIndicator.indicator_id,
							indiname: vm.selectedIndicator.name
						});
					}
					loadStateData();
				}
			}
		}

		function selectCountry(nation) {
			$state.go('app.export.detail.chapter.indicator.country', {
				iso: nation.iso
			});
			//VectorlayerService.setSelectedFeature(nation.iso, true, true);
			getCountryByIso(nation.iso);
			fetchNationData(nation.iso);
		}

		function getCountryByName(name) {
			var iso = null;
			angular.forEach(vm.countries, function(nat, key) {
				if (nat == name) {
					iso = key;
				}
			});
			getCountryByIso(iso);
			return iso;
		}

		function countryExistsInData(iso) {
			var found = false;
			angular.forEach(vm.data, function(item) {
				if (item.iso == iso) {
					found = true;
				}
			});
			return found;
		}

		function getCountryByIso(iso) {
			angular.forEach(vm.data, function(item) {
				if (item.iso == iso) {
					vm.selectedCountry = item;
				}
			})
			return iso;
		}

		function fetchNationData(iso) {
			if (!$state.params.countries) {
				VectorlayerService.gotoCountry(iso);
			}


			IndexService.fetchNationData(vm.ExportService.indicator.indicator_id, iso, function(data) {
				vm.current = data;
				VectorlayerService.setSelectedFeature(iso, true, true);
				$rootScope.sidebarOpen = true;

			});
		}

		function renderIndicator(item, done) {
			ContentService.fetchIndicatorWithData(item.indicator_id, function(indicator) {
				vm.data = indicator.data;
				vm.structure = indicator;
				vm.ExportService.data = indicator;
				vm.circleOptions = {
					color: vm.ExportService.indicator.style.base_color || '#00ccaa',
					field: 'rank',
					size: vm.structure.count,
					hideNumbering: true,
					width: 60,
					height: 60,
					fontSize:12
				};
				vm.compareOptions = {field: 'score', height: 25, margin:5, color:vm.ExportService.indicator.style.base_color, duration:500, min:vm.structure.min, max:vm.structure.max}

				if (typeof item.style.color_range == "string") {
					item.style.color_range = JSON.parse(item.style.color_range);
				}

				// VectorlayerService.setBaseLayer(item.style.basemap, item.indicator.dataprovider);
				// VectorlayerService.setMapDefaults(item.style);

				 VectorlayerService.setData(indicator.data, indicator, item.style.color_range || item.style.base_color, true);

				if (typeof done == "function") {
					done();
				}
			}, {
				data: true
			});

		}

		function showInfo() {
			DialogService.fromTemplate('export', $scope);
		}

		function loadStateData(){
			$timeout(function() {
				//RESET COUNTRY FOR CORRECT VIEW, IF NOT: View would stay active
				vm.selectedCountry = {};
				getIndicator(function() {
					if ($state.params.iso) {
						getCountryByIso($state.params.iso);
						fetchNationData($state.params.iso);

						if ($state.params.countries) {
							var countries = $state.params.countries.split('-vs-');
							angular.forEach(countries, function(country) {
								addCompareCountry(country);
							});
							vm.activeTab = 2;
							VectorlayerService.gotoCountries($state.params.iso, vm.compareList);
						}
					}
					else{
						vm.selectedCountry = {};
					}
					if (typeof vm.ExportService.chapter != "undefined") {
						if(vm.ExportService.chapter.description){
								showInfo()
						}
					}
				});


			});
		}

		function activate() {
			loadStateData();
		}

		$scope.$watch('vm.selectedIndicator', function(n, o){
			if(n === o || typeof n.id == "undefined") return false;
			if(typeof o != "undefined"){
				if(n.id == o.id) return false;
			}
			vm.gotoIndicator();
		})
	}]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ConflictImportCtrl', ["Restangular", "toastr", "$state", function(Restangular, toastr, $state) {
		//
		var vm = this;
		vm.nations = [];
		vm.events = [];
		vm.sum = 0;

		vm.saveToDb = saveToDb;

		function saveToDb() {
			var data = {
				nations: vm.nations,
				events: vm.events
			};
			Restangular.all('/conflicts/import').post(data).then(function(data) {
				$state.go('app.conflict.index')
			});
		}

	}]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ConflictdetailsCtrl', ["$timeout", "$state", "$scope", "$rootScope", "VectorlayerService", "conflict", "conflicts", "nations", "DialogService", function($timeout, $state, $scope, $rootScope, VectorlayerService, conflict, conflicts, nations, DialogService) {
		//
		var vm = this;
		vm.conflict = conflict;
		vm.conflicts = nations;
		vm.conflictItems = [
			'territory',
			'secession',
			'autonomy',
			'system',
			'national_power',
			'international_power',
			'subnational_predominance',
			'resources',
			'other'
		];
		vm.showMethod = showMethod;
		vm.showCountries = false;
		vm.getTendency = getTendency;
		vm.linearScale = d3.scale.linear().domain([0, 5]).range([0, 256]);
		vm.colors = ['#d4ebf7', '#87cceb', '#36a8c6', '#268399', '#0e6377'];
		vm.relations = [];
		vm.countries = [];
		vm.showText = showText;
		vm.showCountriesButton = showCountriesButton;
		vm.circleOptions = {
			color: '#4fb0e5',
			field: 'int2015',
			size: 5,
			hideNumbering: true,
			width:65,
			height:65
		};

		activate();

		function activate() {
			//;
			$rootScope.greyed = true;
			nations.getList().then(function(response) {

				vm.conflicts = response;
				VectorlayerService.resetSelected();
				VectorlayerService.setData(vm.conflicts, vm.colors, true);
				VectorlayerService.setStyle(invertedStyle);
				VectorlayerService.countryClick(countryClick);
				VectorlayerService.resetSelected();

				//VectorlayerService.setSelectedFeature(vm.nation.iso, true);
				angular.forEach(vm.conflict.nations, function(nation) {
					var i = vm.relations.indexOf(nation.iso);
					if (i == -1) {
						vm.relations.push(nation.iso)
						vm.countries.push(nation);
						VectorlayerService.setSelectedFeature(nation.iso, true);
					}
				});


				VectorlayerService.paintCountries(invertedStyle);
				/*DataService.getOne('countries/bbox', vm.relations).then(function (data) {
					var southWest = L.latLng(data.coordinates[0][0][1], data.coordinates[0][0][0]),
						northEast = L.latLng(data.coordinates[0][2][1], data.coordinates[0][2][0]),
						bounds = L.latLngBounds(southWest, northEast);

					var pad = [
						[0, 0],
						[50, 50]
					];

					VectorlayerService.mapLayer.fitBounds(bounds, {
						padding: pad[1],
						maxZoom: 4
					});
				});*/
			});

		}

		function countryClick(evt, t) {

			var country = VectorlayerService.getNationByIso(evt.feature.properties['iso_a2']);
			if (typeof country['intensity'] != "undefined") {
				$state.go('app.conflict.index.nation', {
					iso: country.iso
				});
			}
		}

		function showText() {
			DialogService.fromTemplate('conflicttext', $scope);
		}

		function showMethod() {
			DialogService.fromTemplate('conflictmethode');
		}

		function invertedStyle(feature) {
			var style = {};
			var iso = feature.properties[VectorlayerService.data.iso2];
			var nation = VectorlayerService.getNationByIso(iso);
			var field = 'intensity';
			var colorPos = parseInt(vm.linearScale(parseFloat(nation[field]))) * 4; // parseInt(256 / vm.range.max * parseInt(nation[field])) * 4;

			var color = 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',0.6)';
			style.color = 'rgba(0,0,0,0)';
			style.outline = {
				color: 'rgba(0,0,0,0)',
				size: 0
			};
			style.selected = {
				color: color,
				outline: {
					color: color,
					size: 1
				}
			};
			return style;
		}

		function getTendency() {
			if (vm.conflict == null) return "remove";
			if (vm.conflict.int2015 == vm.conflict.int2014)
				return "remove";
			if (vm.conflict.int2015 < vm.conflict.int2014)
				return "trending_down";

			return "trending_up";
		}

		function showCountriesButton() {
			if (vm.showCountries) return "arrow_drop_up";
			return "arrow_drop_down";
		}
	}]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ConflictitemsCtrl', ["$rootScope", function($rootScope) {
		//
		var vm = this;
		vm.showList = false;
		$rootScope.conflictItems = [
			'territory',
			'secession',
			'autonomy',
			'system',
			'national_power',
			'international_power',
			'subnational_predominace',
			'resources',
			'other'
		];
		vm.toggleItem = toggleItem;

		function toggleItem(item) {
			console.log(item, $rootScope.conflictItems);
			var i = $rootScope.conflictItems.indexOf(item);
			if (i > -1) {
				$rootScope.conflictItems.splice(i, 1);
			} else {
				$rootScope.conflictItems.push(item);
			}

			if ($rootScope.conflictItems.length == 0) {
				$rootScope.conflictItems = [
					'territory',
					'secession',
					'autonomy',
					'system',
					'national_power',
					'international_power',
					'subnational_predominace',
					'resources',
					'other'
				];
			}
		};
	}]);

})();
(function() {
	"use strict";

	angular.module('app.controllers').controller('ConflictnationCtrl', ["$timeout", "$state", "$rootScope", "nations", "nation", "VectorlayerService", "DataService", "DialogService", function($timeout, $state, $rootScope, nations, nation, VectorlayerService, DataService, DialogService) {
		//
		var vm = this;
		vm.nation = nation;
		vm.showMethod = showMethod;
		vm.linearScale = d3.scale.linear().domain([0, 5]).range([0, 256]);
		vm.colors = ['#d4ebf7', '#87cceb', '#36a8c6', '#268399', '#0e6377'];
		vm.relations = [];
		vm.featured = [];
		vm.conflict = null;
		vm.getTendency = getTendency;
		vm.circleOptions = {
			color: '#4fb0e5',
			field: 'intensity',
			size: 5,
			hideNumbering: true,
			width:65,
			height:65
		};
		activate();

		function activate() {

			$rootScope.greyed = true;
			$rootScope.featureItems = [];

			nations.getList().then(function(response) {
				vm.conflicts = response;
				vm.relations.push(vm.nation.iso);
				vm.featured = [];
				VectorlayerService.resetSelected(vm.nation.iso);
				VectorlayerService.setData(vm.conflicts, vm.colors, true);
				VectorlayerService.setStyle(invertedStyle);
				VectorlayerService.countryClick(countryClick);
				VectorlayerService.setSelectedFeature(vm.nation.iso, true);
				$rootScope.featureItems = [];
				angular.forEach(vm.nation.conflicts, function(conflict) {
					if (!vm.conflict) vm.conflict = conflict;
					if (conflict.int2015 > vm.conflict.int2015) {
						vm.conflict = conflict;
					}
					angular.forEach(conflict, function(item, key){
						if(item == 1 ){
							if(vm.featured.indexOf(key) == -1){
								vm.featured.push(key);
								$rootScope.featureItems = vm.featured;
							}
						}

					})
					angular.forEach(conflict.nations, function(nation) {
						var i = vm.relations.indexOf(nation.iso);
						if (i == -1 && nation.iso != vm.nation.iso) {
							vm.relations.push(nation.iso)
							VectorlayerService.setSelectedFeature(nation.iso, true);
						}
					});
				});

				VectorlayerService.paintCountries(invertedStyle);
				/*DataService.getOne('countries/bbox', vm.relations).then(function (data) {
					var southWest = L.latLng(data.coordinates[0][0][1], data.coordinates[0][0][0]),
						northEast = L.latLng(data.coordinates[0][2][1], data.coordinates[0][2][0]),
						bounds = L.latLngBounds(southWest, northEast);

					var pad = [
						[0, 0],
						[50, 50]
					];

					VectorlayerService.mapLayer.fitBounds(bounds, {
						padding: pad[1],
						maxZoom: 4
					});
				});*/
			})



		}


		function showMethod() {
			DialogService.fromTemplate('conflictmethode');
		}

		function getTendency() {
			if (vm.conflict == null) return "remove";
			if (vm.conflict.int2015 == vm.conflict.int2014)
				return "remove";
			if (vm.conflict.int2015 < vm.conflict.int2014)
				return "trending_down";

			return "trending_up";
		}

		function countryClick(evt, t) {

			var country = VectorlayerService.getNationByIso(evt.feature.properties['iso_a2']);
			if (typeof country['intensity'] != "undefined") {

				$state.go('app.conflict.index.nation', {
					iso: country.iso
				});
			}
		}

		function invertedStyle(feature) {
			var style = {};
			var iso = feature.properties[VectorlayerService.data.iso2];
			var nation = VectorlayerService.getNationByIso(iso);
			var field = 'intensity';
			var colorPos = parseInt(vm.linearScale(parseFloat(nation[field]))) * 4; // parseInt(256 / vm.range.max * parseInt(nation[field])) * 4;

			var color = 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',0.6)';
			var colorFull = 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',' + VectorlayerService.palette[colorPos + 3] + ')';
			style.color = 'rgba(0,0,0,0)';
			style.outline = {
				color: 'rgba(0,0,0,0)',
				size: 0
			};
			var outline = {
				color: color,
				size: 1
			};
			if (iso == vm.nation.iso) {
				outline = {
					color: 'rgba(54,56,59,0.8)',
					size: 2
				};
				color = color;
			}
			style.selected = {
				color: color,
				outline: outline
			};
			return style;
		}
	}]);

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('ConflictsCtrl', ["$timeout", "$state", "$rootScope", "$scope", "conflicts", "nations", "VectorlayerService", "Restangular", "DialogService", "Fullscreen", function ($timeout, $state, $rootScope, $scope, conflicts, nations, VectorlayerService, Restangular, DialogService, Fullscreen) {
		//

		var vm = this;
		vm.ready = false;
		vm.relations = [];
		vm.showMethod = showMethod;
		vm.goFullscreen = goFullscreen;
		vm.linearScale = d3.scale.linear().domain([0, 5]).range([0, 256]);
		vm.colors = ['#add9f0', '#87cceb', '#36a8c6', '#268399', '#005573'];
		vm.typesColors = {
			interstate: '#69d4c3',
			intrastate: '#b7b7b7',
			substate: '#ff9d27'
		};
		vm.active = {
			conflict: [],
			type: [1, 2, 3]
		};
		vm.toggleConflictFilter = toggleConflictFilter;
		vm.conflictFilter = null;


		activate();

		function activate() {
			$rootScope.greyed = true;
			VectorlayerService.setStyle(countriesStyle);
			VectorlayerService.countryClick(countryClick);
			nations.getList().then(function (response) {
				vm.nations = response;
				VectorlayerService.setData(vm.nations, vm.colors, true);
			});
			conflicts.getList().then(function (response) {
				vm.conflicts = response;
				calcIntensities();
			});

			//	$timeout(function() {

			//});
		}

		function goFullscreen() {

		 if (Fullscreen.isEnabled())
				Fullscreen.cancel();
		 else
				Fullscreen.all();

		 // Set Fullscreen to a specific element (bad practice)
		 // Fullscreen.enable( document.getElementById('img') )

	}
		function setValues() {
			vm.relations = [];
			vm.conflictFilterCount = 0;
			vm.conflictIntensities = {
				veryLow: 0,
				low: 0,
				mid: 0,
				high: 0,
				veryHigh: 0
			};
			vm.chartData = [{
				label: 1,
				value: 0,
				color: vm.colors[0]
			}, {
				label: 2,
				value: 0,
				color: vm.colors[1]
			}, {
				label: 3,
				value: 0,
				color: vm.colors[2]
			}, {
				label: 4,
				value: 0,
				color: vm.colors[3]
			}, {
				label: 5,
				value: 0,
				color: vm.colors[4]
			}];

			vm.conflictTypes = [{
				type: 'interstate',
				type_id: 1,
				color: '#69d4c3',
				count: 0
			}, {
				type: 'intrastate',
				count: 0,
				type_id: 2,
				color: '#b7b7b7'
			}, {
				type: 'substate',
				count: 0,
				type_id: 3,
				color: '#ff9d27'
			}];

		}

		function showMethod() {
			DialogService.fromTemplate('conflictmethode');
		}

		function toggleConflictFilter(type) {

			var i = vm.active.type.indexOf(type);
			if (i > -1) {
				vm.active.type.splice(i, 1);
			} else {
				vm.active.type.push(type);
			}
			if (vm.active.type.length == 0) {
				vm.active.type = [1, 2, 3];
			}
			calcIntensities();
		}

		function calcConflict(conflict) {
			vm.conflictFilterCount++;
			switch (conflict.type_id) {
			case 1:
				vm.conflictTypes[0].count++;
				break;
			case 2:
				vm.conflictTypes[1].count++;
				break;
			case 3:
				vm.conflictTypes[2].count++;
				break;
			default:

			}
			switch (conflict.int2015) {
			case 1:
				vm.conflictIntensities.veryLow++;
				vm.chartData[0].value++;
				break;
			case 2:
				vm.conflictIntensities.low++;
				vm.chartData[1].value++;
				break;
			case 3:
				vm.conflictIntensities.mid++;
				vm.chartData[2].value++;
				break;
			case 4:
				vm.conflictIntensities.high++;
				vm.chartData[3].value++;
				break;
			case 5:
				vm.conflictIntensities.veryHigh++;
				vm.chartData[4].value++;
				break;
			default:
			}
			addCountries(conflict.nations);
		}
		function addCountries(nations){
			angular.forEach(nations, function(nat){
				if(vm.relations.indexOf(nat.iso) == -1){
					vm.relations.push(nat.iso);
				}
			});
		}
		function calcIntensities() {
			setValues();
			angular.forEach(vm.conflicts, function (conflict) {
				if (vm.active.type.length) {
					if (vm.active.type.indexOf(conflict.type_id) > -1) {
						calcConflict(conflict);
					}
				} else {
					calcConflict(conflict);
				}
			});
			vm.ready = true;
			//VectorlayerService.redraw();
			VectorlayerService.paintCountries();
		}

		function countryClick(evt, t) {
			var country = VectorlayerService.getNationByIso(evt.feature.properties['iso_a2']);
			if (typeof country['intensity'] != "undefined") {
				$state.go('app.conflict.index.nation', {
					iso: country.iso
				});
			}
		}

		function countriesStyle(feature) {
			var style = {};
			var iso = feature.properties[VectorlayerService.data.iso2];
			var nation = VectorlayerService.getNationByIso(iso);

			var field = 'intensity';
			var type = feature.type;
			feature.selected = false;
			if(vm.relations.indexOf(iso) == -1){
				style.color = 'rgba(255,255,255,0)';
				style.outline = {
					color: 'rgba(255,255,255,0)',
					size: 1
				};
			}
			else{
				switch (type) {
				case 3: //'Polygon'
					if (typeof nation[field] != "undefined" && nation[field] != null && iso) {
						var colorPos = parseInt(vm.linearScale(parseFloat(nation[field]))) * 4; // parseInt(256 / vm.range.max * parseInt(nation[field])) * 4;
						var color = 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',' + VectorlayerService.palette[colorPos + 3] + ')';
						style.color = 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',0.6)'; //color;
						style.outline = {
							color: color,
							size: 1
						};
						style.selected = {
							color: 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',' + VectorlayerService.palette[colorPos + 3] + ')',
							outline: {
								color: 'rgba(66,66,66,0.9)',
								size: 2
							}
						};

					} else {
						style.color = 'rgba(255,255,255,0)';
						style.outline = {
							color: 'rgba(255,255,255,0)',
							size: 1
						};

					}
					break;
				}
			}


			return style;
		};
	}]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ExportCtrl', ["$state", "ExportService", function($state, ExportService) {
		//
		var vm = this;
		vm.exports = [];
		vm.ExportService = ExportService;
		vm.selection = [];
		vm.options = {
			drag: false,
			type: 'exports',
			allowMove: false,
			allowDrop: false,
			allowAdd: true,
			allowDelete: true,
			itemClick: function(id, name) {
				$state.go('app.index.exports.details', {
					id: id,
					name: name
				})
			},
			addClick: function() {
				$state.go('app.index.exports.details', {
					id: 0,
					name: 'new'
				})
			},
			deleteClick: function() {
				angular.forEach(vm.selection, function(item, key) {
					vm.ExportService.removeItem(item.id, function(data) {
						if ($state.params.id == item.id) {
							$state.go('app.index.exports');
						}
						var idx = vm.exports.indexOf(item);
						vm.ExportService.exports.splice(idx, 1);
						vm.selection = [];
					});
				});
				//$state.go('app.index.editor.indizes');
			}
		};




		vm.ExportService.getExports(function(data) {});

	}]);

})();
(function() {
	"use strict";

	angular.module('app.controllers').controller('ExportDetailsCtrl', ["$scope", "$state", "ExportService", function($scope, $state, ExportService) {
		//
		var vm = this;
		vm.ExportService = ExportService;
		vm.selected = [];
		vm.options = {
			exports: {
				onDrop: function(event, index, item, external) {
					item.indicator_id = item.id;
					item.type = 'indicator';
				},
				inserted: function(event, index, item, external) {

				},
				addClick: function() {
					$state.go('app.index.exports.details.add');
				},
				addContainerClick: function() {
					var item = {
						id: Date.now(),
						title: 'I am a group... name me',
						type: 'group'
					};
					vm.ExportService.exporter.items.push(item);

				},
				deleteClick: function() {
					angular.forEach(vm.selected, function(item, key) {
						removeItem(item, vm.ExportService.exporter.items);
						//ExportService.removeItem(vm,item.id);
						vm.selected = [];
					});
				},
				deleteDrop: function(event, item, external, type) {
					removeItem(item, vm.export.items);
					vm.selection = [];
				},
				save: function() {
					vm.ExportService.save(function(response) {

						$state.go('app.index.exports.details', {
							id: response.id,
							name: response.name
						});

					});
					// if(vm.export.id == 0 || ! vm.export.id){
					//   DataService.post('exports', vm.export).then(function(){
					//
					//   });
					// }
					// else{
					//   vm.item.save().then(function(response){
					//
					//   });
					// }
				}
			},
			style: {
				click: function(item) {
					$state.go('app.index.exports.details.style', {
						styleId: item.id,
						styleName: item.name
					})
				}
			},
			withSave: true,
			styleable: true,
			expandJustGroups: true
		};

		if ($state.params.id != 0) {
			vm.ExportService.getExport($state.params.id);
		} else {
			vm.ExportService.setExport({
				items: []
			});
		}


		function removeItem(item, list) {
			angular.forEach(list, function(entry, key) {
				if (entry.id == item.id) {
					list.splice(key, 1);
					return true;
				}
				if (entry.children) {
					var subresult = removeItem(item, entry.children);
					if (subresult) {
						return subresult;
					}
				}
			});
			return false;
		}
	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('ExportLayoutCtrl', ["ExportService", "$state", "$timeout", function(ExportService,$state, $timeout){
        //
        var vm = this;
        vm.exporter = ExportService.exporter;
        activate();

        function activate(){
          $timeout(function(){
              vm.exporter = ExportService.exporter;
          });
            // ExportService.getExport($state.params.id, function(exporter){
            //   vm.exporter = exporter;
            // });
        }


    }]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ExportStyleCtrl', ["$scope", "$timeout", "$state", "ContentService", "ExportService", "IndizesService", "leafletData", "leafletMapEvents", "VectorlayerService", "CountriesService", "ColorHandleService", "DialogService", function($scope, $timeout, $state, ContentService, ExportService, IndizesService, leafletData, leafletMapEvents, VectorlayerService, CountriesService, ColorHandleService, DialogService) {
		var vm = this;
		vm.ColorHandle = ColorHandleService;
		vm.addColorRange = addColorRange;
		vm.removeColorRange = removeColorRange;
		vm.exporter = {};
		vm.item = {};
		vm.colorHandles = [];
		vm.continentOptions = {
			onlyWithChildren: true
		};


		activate();

		function activate() {

			$timeout(function() {
				vm.exporter = ExportService.exporter;
				// if(!vm.exporter.items.length) $state.go('app.index.exports.details',{
				//   id: $state.params.id,
				//   name: $state.params.name
				// })
				vm.item = getActiveItem(vm.exporter.items, $state.params.styleId);
				if (typeof vm.item == "undefined") $state.go('app.index.exports.details', {
					id: $state.params.id,
					name: $state.params.name
				});
				if (!vm.item.style) {
					vm.item.style = {
						basemap_id: 0,
						fixed_title: false,
						fixed_description: false,
						search_box: true,
						share_options: true,
						zoom_controls: true,
						scroll_wheel_zoom: false,
						layer_selection: false,
						legends: true,
						full_screen: false,
						countries: [],
						color_range: [new vm.ColorHandle('rgba(0, 0, 0, 0.60)', 0.00), new vm.ColorHandle('rgba(255, 0, 0, 0.60)', 1.00)]
					};
				} else {
					if (typeof vm.item.style.color_range == "string") {
						vm.item.style.color_range = JSON.parse(vm.item.style.color_range);
					}
				}

				ContentService.fetchIndicatorWithData(vm.item.indicator_id, function(indicator) {
					vm.data = indicator.data;
					vm.structure = indicator;

					VectorlayerService.setData(indicator.data, indicator, vm.item.style.color_range || vm.item.style.base_color, true);
					CountriesService.getContinents(function(continents) {
						vm.continents = continents
					}, vm.item.indicator_id);

				}, {
					data: true
				});
			});
		}

		function getActiveItem(list, id) {
			var found;
			angular.forEach(list, function(item) {
				if (item.id == id) {
					found = item;
				} else {
					if (item.children && !found)
						found = getActiveItem(item.children, id);
				}
			});
			return found;
		};

		function addColorRange() {
			vm.item.style.color_range = [
				new vm.ColorHandle('rgba(102,102,102,0.6)', 0.00),
				new vm.ColorHandle(vm.item.style.base_color, 0.53),
				new vm.ColorHandle('rgba(255,255,255,0.6)', 1.00)
			];
			VectorlayerService.paint(vm.item.style.color_range);
		}

		function removeColorRange() {
			vm.item.style.color_range = undefined;
			VectorlayerService.paint(vm.item.style.base_color);
		}

		var timeoutPromise;
		var delayInMs = 500;
		$scope.$watch('vm.item.style', function(n, o) {
			$timeout.cancel(timeoutPromise);
			timeoutPromise = $timeout(function() {
				if (n === o || !n.basemap) return;
				VectorlayerService.setBaseLayer(n.basemap);
				//Choose between color and range
				VectorlayerService.paint(n.color_range || n.base_color);
			}, delayInMs);
		}, true);


		//Stuff for the Gradient Designer
		//should move to its own Controller/Component
		vm.addColorHandle = addColorHandle;
		vm.deleteColorHandle = deleteColorHandle;
		vm.setLabels = setLabels;

		function addColorHandle(stop) {
			vm.item.style.color_range.push(new vm.ColorHandle('rgba(255,255,255,0.6)', stop));
			sortColorHandlesByStop();
		}

		function deleteColorHandle(colorHandle) {
			vm.item.style.color_range.splice(vm.item.style.color_range.indexOf(colorHandle), 1);
				sortColorHandlesByStop();
		}
		function setLabels(){
			sortColorHandlesByStop();
			DialogService.fromTemplate('gradientLabels', $scope);
		}
		function sortColorHandlesByStop() {
      return vm.item.style.color_range.sort(function(LeftHandle, RightHandle) {
        return LeftHandle.stop - RightHandle.stop;
      });
    };
	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('ExportedCtrl', ["$rootScope", "$state", "ExportService", "VectorlayerService", "IndizesService", function($rootScope, $state, ExportService, VectorlayerService, IndizesService){
        //
        var vm = this;
        vm.ExportService = ExportService;
        activate();

        function activate(){
          vm.ExportService.getExport($state.params.id, function(exporter){});
        }
        $rootScope.sidebarOpen = false;
    }]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('FullListFitlerCtrl', ["categories", "ContentService", function(categories, ContentService) {
    var vm = this;
    vm.categories = categories;

    vm.filter = [];
    vm.options = {
      categories:{
        selectionChanged: function(){
          vm.filter =[];
          angular.forEach(vm.selection, function(item){
            listCategories(item);
          });
          ContentService.filterList('indicators',catFilter,vm.selection);
          ContentService.filterList('indices',catFilter,vm.selection);
        }
      }
    };
    function addToFilter(id){
      var idx = vm.filter.indexOf(id);
      if(idx == -1){
        vm.filter.push(id);
      }
    }
    function listCategories(cat){
      addToFilter(cat.id);
      if(cat.children){
        angular.forEach(cat.children, function(child){
          addToFilter(child.id);
          listCategories(child);
        });
      }
    };
    function catFilter(item){
				if(item.categories.length > 0 && vm.filter.length > 0){
					var found = false;
					angular.forEach(item.categories, function(cat){
						if(vm.filter.indexOf(cat.id) > -1){
							found = true;
						}
					});
					return found;
				}
				return true;
		}
  }]);
})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('FullListCtrl', ["$scope", "$state", "ContentService", "categories", "indicators", "indices", function($scope,$state, ContentService, categories, indicators, indices) {
		//
		var vm = this;
		vm.categories = categories;
		vm.indicators = indicators;
		vm.indices = indices;
		vm.filter = {
			sort: 'title',
			toggle: function(){
				if($state.current.name == 'app.index.list'){
					$state.go('app.index.list.filter',{filter:'categories'})
				}
				else{
					ContentService.resetFilter('indicators');
					ContentService.resetFilter('indices');
					$state.go('app.index.list')
				}
			}
		};
		
		$scope.$watch(function(){return ContentService.content.indicators}, function(n, o){
			if(n === o )return;
			vm.indicators = n;
		});
		$scope.$watch(function(){return ContentService.content.indices}, function(n, o){
			if(n === o )return;
			vm.indices = n;
		});
	}]);
})();

(function(){
	"use strict";

	angular.module('app.controllers').controller('HeaderCtrl', ["$scope", "$mdMedia", "leafletData", "$state", "$localStorage", "$rootScope", "$auth", "toastr", "$timeout", function($scope,$mdMedia, leafletData, $state,$localStorage, $rootScope, $auth, toastr, $timeout){

		var vm = this;
		$rootScope.isAuthenticated = isAuthenticated;
		vm.doLogin = doLogin;
		vm.doLogout = doLogout;
		vm.openMenu = openMenu;
		vm.toggleView = toggleView;

		vm.authenticate = function(provider){
			$auth.authenticate(provider);
		};

		function isAuthenticated(){
			 return $auth.isAuthenticated();
		}
		function doLogin(){
			$auth.login(vm.user).then(function(response){
				toastr.success('You have successfully signed in');
				//$state.go($rootScope.previousPage.state.name || 'app.home', $rootScope.previousPage.params);
			}).catch(function(response){
				toastr.error('Please check your email and password', 'Something went wrong');
			})
		}
		function doLogout(){
			if($auth.isAuthenticated()){
				$auth.logout().then(function(data){
					if($state.current.auth){
						$state.go('app.home');
					}
					toastr.success('You have successfully logged out');
				}).catch(function(response){

				});
			}
		}

    function openMenu($mdOpenMenu, ev) {
      $mdOpenMenu(ev);
    };
		function toggleView(){
			$rootScope.looseLayout = !$rootScope.looseLayout;
			$localStorage.fullView = $rootScope.looseLayout;
			resetMapSize();
		}
		function resetMapSize(){
			$timeout(function(){
				leafletData.getMap('map').then(function (map) {
					map.invalidateSize();
				})
			}, 300);
		}
		$rootScope.sidebarOpen = true;
		$scope.$watch(function(){
			return $rootScope.current_page;
		}, function(newPage){
			$scope.current_page = newPage || 'Page Name';
		});
		$scope.$watch('$root.sidebarOpen', function(n,o){
			if(n == o) return false;
			resetMapSize();
		});
		$scope.$watch(function() { return $mdMedia('sm') }, function(small) {
	    vm.smallScreen = small;
	  });

	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('HomeCtrl', ["DataService", function(DataService){
        var vm = this;
      
        DataService.getAll('index', {is_official: true}).then(function(response){
          vm.indizes = response;
        });

    }]);

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('ImportcsvCtrl', ["$mdDialog", function ($mdDialog) {
		this.settings = {
			printLayout: true,
			showRuler: true,
			showSpellingSuggestions: true,
			presentationMode: 'edit'
		};

		this.sampleAction = function (name, ev) {
			$mdDialog.show($mdDialog.alert()
				.title(name)
				.content('You triggered the "' + name + '" action')
				.ok('Great')
				.targetEvent(ev)
			);
		};

    this.openCsvUpload = function() {
			$mdDialog.show({
					//controller: DialogController,
					templateUrl: '/views/app/importcsv/csvUploadDialog.html',
	        bindToController: true,
				})
				.then(function (answer) {

				}, function () {

				});
		};
	}])


})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('IndexCtrl', ["$scope", "$window", "$mdSidenav", "$rootScope", "$filter", "$state", "$timeout", "toastr", "VectorlayerService", "data", "countries", "leafletData", "DataService", function($scope, $window,$mdSidenav, $rootScope, $filter, $state, $timeout, toastr, VectorlayerService, data, countries, leafletData, DataService) {
		// Variable definitions
		var vm = this;
		vm.map = null;

		vm.dataServer = data.promises.data;
		vm.structureServer = data.promises.structure;
		vm.countryList = countries;

		vm.structure = "";
		vm.mvtScource = VectorlayerService.getLayer();
		vm.mvtCountryLayer = VectorlayerService.getName();
		vm.mvtCountryLayerGeom = vm.mvtCountryLayer + "_geom";
		vm.iso_field = VectorlayerService.data.iso2;
		vm.nodeParent = {};
		vm.selectedTab = 0;
		vm.current = "";
		vm.tabContent = "";
		vm.toggleButton = 'arrow_drop_down';
		vm.menueOpen = true;
		vm.info = false;
		vm.closeIcon = 'close';
		vm.compare = {
			active: false,
			countries: []
		};
		vm.display = {
			selectedCat: ''
		};

		//Function definitons
		vm.showTabContent = showTabContent;
		vm.setTab = setTab;
		vm.setState = setState;
		vm.setCurrent = setCurrent;
		vm.setSelectedFeature = setSelectedFeature;
		vm.getRank = getRank;
		vm.getOffset = getOffset;
		vm.getTendency = getTendency;

		vm.checkComparison = checkComparison;
		vm.toggleOpen = toggleOpen;
		vm.toggleInfo = toggleInfo;
		vm.toggleDetails = toggleDetails;
		vm.toggleComparison = toggleComparison;
		vm.toggleCountrieList = toggleCountrieList;
		vm.mapGotoCountry = mapGotoCountry;
		vm.goBack = goBack;
		vm.goToIndex = goToIndex;

		vm.calcTree = calcTree;

		vm.isPrelast = isPrelast;

		activate();

		function activate() {

			vm.structureServer.then(function(structure) {
				vm.dataServer.then(function(data) {
					vm.data = data;
					vm.structure = structure;
					if (!vm.structure.style) {
						vm.structure.style = {
							'name': 'default',
							'title': 'Default',
							'base_color': 'rgba(128, 243, 198,1)'
						};
					}
					createCanvas(vm.structure.style.base_color);
					drawCountries();
					if ($state.params.item) {
						vm.setState($state.params.item);
						calcRank();
					}
					if ($state.params.countries) {
						vm.setTab(2);
						vm.compare.countries.push(vm.current);
						vm.compare.active = true;
						$rootScope.greyed = true;
						var countries = $state.params.countries.split('-vs-');
						angular.forEach(countries, function(iso) {
							vm.compare.countries.push(getNationByIso(iso));
						});
						//onsole.log(vm.compare.countries);
						countries.push(vm.current.iso);
						DataService.getOne('countries/bbox', countries).then(function(data) {
							vm.bbox = data;
						});
					}
				})
			});

		}
		// TODO: MOVE TO GLOBAL
		function goBack() {
			$window.history.back();
		}
		function goToIndex(item){

			$state.go('app.index.show.selected',{
				id:item.id,
				name:item.name,
				item:$state.params['item']
			});
		}
		function isPrelast(){
			var levelsFound = false;
			angular.forEach(vm.structure.children, function(child){
				if(child.children.length > 0){
					levelsFound = true;
				}
			});
			return levelsFound;
		}
		function showTabContent(content) {
			if (content == '' && vm.tabContent == '') {
				vm.tabContent = 'rank';
			} else {
				vm.tabContent = content;
			}
			vm.toggleButton = vm.tabContent ? 'arrow_drop_up' : 'arrow_drop_down';
		};

		function setState(item) {
			vm.setCurrent(getNationByIso(item));
			fetchNationData(item);
		};

		function toggleOpen() {
			vm.menueOpen = !vm.menueOpen;
			vm.closeIcon = vm.menueOpen == true ? 'chevron_left' : 'chevron_right';
		}

		function setCurrent(nat) {
			vm.current = nat;

			vm.setSelectedFeature();

			$mdSidenav('left').open();
		};

		function setSelectedFeature(iso) {
			if (vm.mvtSource) {
				$timeout(function() {
					vm.mvtSource.layers[vm.mvtCountryLayerGeom].features[vm.current.iso].selected = true;
				})
			}
		};

		//TODO: MOVE TO SERVICE
		function calcRank() {
			if (!vm.current) {
				return;
			}
			var rank = 0;
			var kack = [];
			angular.forEach(vm.data, function(item) {
				item[vm.structure.name] = parseFloat(item[vm.structure.name]);
				item['score'] = parseFloat(item[vm.structure.name]);
			});
			//vm.data = $filter('orderBy')(vm.data, 'score', 'iso', true);
			rank = vm.data.indexOf(vm.current) + 1;
			vm.current[vm.structure.name + '_rank'] = rank;
			vm.circleOptions = {
				color: vm.structure.style.base_color || '#00ccaa',
				field: vm.structure.name + '_rank',
				size: vm.data.length
			};

			return rank;
		}

		function getRank(country) {

			var rank = vm.data.indexOf(country) + 1;
			return rank;
		}

		//TODO: REMOVE, NOW GOT OWN URL
		function toggleInfo() {
			vm.info = !vm.info;
		};

		//TODO: PUT IN VIEW
		function toggleDetails() {
			return vm.details = !vm.details;
		};

		//TODO: MOVE TO SERVICE
		function fetchNationData(iso) {
			DataService.getOne('index/' + $state.params.id, iso).then(function(data) {
				vm.current.data = data;
				mapGotoCountry(iso);
			});
		}

		//TODO: MOVE TO MAP SERVICE
		function mapGotoCountry(iso) {
			if (!$state.params.countries) {
				DataService.getOne('countries/bbox', [iso]).then(function(data) {
					vm.bbox = data;
				});
			}

		}

		function checkComparison(want) {
			if (want && !vm.compare.active || !want && vm.compare.active) {
				vm.toggleComparison();
			}
		}

		function toggleComparison() {
			vm.compare.countries = [vm.current];
			vm.compare.active = !vm.compare.active;
			if (vm.compare.active) {
				vm.setTab(2);
				$rootScope.greyed = true;
				vm.mvtSource.options.mutexToggle = false;
				vm.mvtSource.setStyle(invertedStyle);

			} else {
				$rootScope.greyed = false;
				angular.forEach(vm.mvtSource.layers[vm.mvtCountryLayerGeom].features, function(feature) {
					feature.selected = false;
				});
				vm.mvtSource.layers[vm.mvtCountryLayerGeom].features[vm.current.iso].selected = true;
				vm.mvtSource.options.mutexToggle = true;
				vm.mvtSource.setStyle(countriesStyle);
				DataService.getOne('countries/bbox', [vm.current.iso]).then(function(data) {
					vm.bbox = data;
				});
				$state.go('app.index.show.selected', {
					id: $state.params.id,
					name: $state.params.name,
					item: $state.params.item
				})
			}
			//vm.mvtSource.redraw();
		};

		function toggleCountrieList(country) {
			var found = false;
			angular.forEach(vm.compare.countries, function(nat, key) {
				if (country == nat && nat != vm.current) {
					vm.compare.countries.splice(key, 1);
					found = true;
				}
			});
			if (!found) {
				vm.compare.countries.push(country);
			};
			var isos = [];
			var compare = [];
			angular.forEach(vm.compare.countries, function(item, key) {
				isos.push(item.iso);
				if (item[vm.structure.iso] != vm.current.iso) {
					compare.push(item.iso);
				}
			});
			if (isos.length > 1) {
				DataService.getOne('countries/bbox', isos).then(function(data) {
					vm.bbox = data;
				});
				$state.go('app.index.show.selected.compare', {
					index: $state.params.index,
					item: $state.params.item,
					countries: compare.join('-vs-')
				});
			}

			return !found;
		};

		//TODO: MOVE TO OWN DIRECTIVE
		function getOffset() {
			if (!vm.current) {
				return 0;
			}
			//console.log(vm.getRank(vm.current));
			return (vm.getRank(vm.current) - 2) * 17;
		};

		//TODO: MOVE TO OWN DIRECTIVE
		function getTendency() {
			if (!vm.current) {
				return 'arrow_drop_down'
			}
			return vm.current.percent_change > 0 ? 'arrow_drop_up' : 'arrow_drop_down';
		};

		//TODO: MOVE TO VIEW
		function setTab(i) {
			//vm.activeTab = i;
		}

		function getParent(data) {
			var items = [];
			angular.forEach(data.children, function(item) {
				if (item.column_name == vm.display.selectedCat.type) {
					vm.nodeParent = data;
				}
				getParent(item);
			});
			return items;
		}

		function calcTree() {
			getParent(vm.structure);
		};

		//TODO: MOVE TO SERVICE COUNTRY
		function getNationByName(name) {
			var nation = {};
			angular.forEach(vm.data, function(nat) {
				if (nat.country == name) {
					nation = nat;
				}
			});
			return nation;
		};

		//TODO: MOVE TO SERVICE COUNTRY
		function getNationByIso(iso) {
			var nation = {};
			angular.forEach(vm.data, function(nat) {
				if (nat.iso == iso) {
					nation = nat;
				}
			});

			return nation;
		};

		//TODO: MOVE TO SERVICE MAP
		function createCanvas(color) {

			vm.canvas = document.createElement('canvas');
			vm.canvas.width = 280;
			vm.canvas.height = 10;
			vm.ctx = vm.canvas.getContext('2d');
			var gradient = vm.ctx.createLinearGradient(0, 0, 280, 10);
			gradient.addColorStop(1, 'rgba(255,255,255,0)');
			gradient.addColorStop(0.53, color || 'rgba(128, 243, 198,1)');
			gradient.addColorStop(0, 'rgba(102,102,102,1)');
			vm.ctx.fillStyle = gradient;
			vm.ctx.fillRect(0, 0, 280, 10);
			vm.palette = vm.ctx.getImageData(0, 0, 257, 1).data;
			//document.getElementsByTagName('body')[0].appendChild(vm.canvas);
		}

		//TODO: MOVE TO SERVICE MAP
		function updateCanvas(color) {
			var gradient = vm.ctx.createLinearGradient(0, 0, 280, 10);
			gradient.addColorStop(1, 'rgba(255,255,255,0)');
			gradient.addColorStop(0.53, color || 'rgba(128, 243, 198,1)');
			gradient.addColorStop(0, 'rgba(102,102,102,1)');
			vm.ctx.fillStyle = gradient;
			vm.ctx.fillRect(0, 0, 280, 10);
			vm.palette = vm.ctx.getImageData(0, 0, 257, 1).data;
			//document.getElementsByTagName('body')[0].appendChild(vm.canvas);
		};

		//TODO: MOVE TO SERVICE MAP
		function invertedStyle(feature) {
			var style = {};
			var iso = feature.properties[vm.iso_field];
			var nation = getNationByIso(iso);
			var field = vm.structure.name || 'score';

			//TODO: MAX VALUE INSTEAD OF 100
			var colorPos = parseInt(256 / 100 * nation[field]) * 4;

			var color = 'rgba(' + vm.palette[colorPos] + ', ' + vm.palette[colorPos + 1] + ', ' + vm.palette[colorPos + 2] + ',' + vm.palette[colorPos + 3] + ')';
			style.color = 'rgba(0,0,0,0)';
			style.outline = {
				color: 'rgba(0,0,0,0)',
				size: 0
			};
			style.selected = {
				color: color,
				outline: {
					color: 'rgba(0,0,0,0.3)',
					size: 2
				}
			};
			return style;
		};

		//TODO: MOVE TO SERVICE
		function countriesStyle(feature) {

			var style = {};
			var iso = feature.properties[vm.iso_field];

			var nation = getNationByIso(iso);
			var field = vm.structure.name || 'score';
			var type = feature.type;
			if (iso != vm.current.iso) {
				feature.selected = false;
			}

			switch (type) {
				case 3: //'Polygon'
					if (typeof nation[field] != "undefined") {

						//TODO: MAX VALUE INSTEAD OF 100
						var colorPos = parseInt(256 / 100 * parseInt(nation[field])) * 4;

						var color = 'rgba(' + vm.palette[colorPos] + ', ' + vm.palette[colorPos + 1] + ', ' + vm.palette[colorPos + 2] + ',' + vm.palette[colorPos + 3] + ')';
						style.color = 'rgba(' + vm.palette[colorPos] + ', ' + vm.palette[colorPos + 1] + ', ' + vm.palette[colorPos + 2] + ',0.6)'; //color;
						style.outline = {
							color: color,
							size: 1
						};
						style.selected = {
							color: 'rgba(' + vm.palette[colorPos] + ', ' + vm.palette[colorPos + 1] + ', ' + vm.palette[colorPos + 2] + ',0.3)',
							outline: {
								color: 'rgba(66,66,66,0.9)',
								size: 2
							}
						};
						break;
					} else {

						style.color = 'rgba(255,255,255,0)';
						style.outline = {
							color: 'rgba(255,255,255,0)',
							size: 1
						};
					}
			}
			//console.log(feature.properties.name)
			if (feature.layer.name === VectorlayerService.getName() + '_geom') {
				style.staticLabel = function() {
					var style = {
						html: feature.properties.name,
						iconSize: [125, 30],
						cssClass: 'label-icon-text'
					};
					return style;
				};
			}
			return style;
		};

		$scope.$watch('vm.current', function(n, o) {
			if (n === o) {
				return;
			}

			if (n.iso) {
				if (o.iso) {
					vm.mvtSource.layers[vm.mvtCountryLayerGeom].features[o.iso].selected = false;
				}
				calcRank();
				fetchNationData(n.iso);
				vm.mvtSource.layers[vm.mvtCountryLayerGeom].features[n.iso].selected = true;
				if ($state.current.name == 'app.index.show.selected' || $state.current.name == 'app.index.show') {
					$state.go('app.index.show.selected', {
						id: $state.params.id,
						name: $state.params.name,
						item: n.iso
					});
				}
			} else {
				$state.go('app.index.show', {
					id: $state.params.id,
					name: $state.params.id
				});
			}
		});
		$scope.$watch('vm.display.selectedCat', function(n, o) {
			if (n === o) {
				return
			}
			console.log(n);
			if (n.color)
				updateCanvas(n.color);
			else {
				updateCanvas('rgba(128, 243, 198,1)');
			};
			vm.calcTree();
			/*if (vm.compare.active) {
				$timeout(function () {
					//vm.mvtSource.setStyle(invertedStyle);
					//vm.mvtSource.redraw();
				});
			} else {
				$timeout(function () {
					//vm.mvtSource.setStyle(countriesStyle);
					//vm.mvtSource.redraw();
				});
			}*/

			if (vm.current.iso) {
				if ($state.params.countries) {
					$state.go('app.index.show.selected.compare', {
						id: n.id,
						name: n.name,
						item: vm.current.iso,
						countries: $state.params.countries
					})
				} else {
					$state.go('app.index.show.selected', {
						id: n.id,
						name: n.name,
						item: vm.current.iso
					})
				}
			} else {
				$state.go('app.index.show', {
					id: n.id,
					name: n.name
				})
			}

		});

		//TODO: MOVE TO SERVICE MAP
		$scope.$watch('vm.bbox', function(n, o) {
			if (n === o) {
				return;
			}
			/*var lat = [n.coordinates[0][0][1],
					[n.coordinates[0][0][0]]
				],
				lng = [n.coordinates[0][2][1],
					[n.coordinates[0][2][0]]
				]*/
			var southWest = L.latLng(n.coordinates[0][0][1], n.coordinates[0][0][0]),
				northEast = L.latLng(n.coordinates[0][2][1], n.coordinates[0][2][0]),
				bounds = L.latLngBounds(southWest, northEast);

			var pad = [
				[0, 0],
				[100, 100]
			];
			if (vm.compare.active) {
				pad = [
					[0, 0],
					[0, 0]
				];
			}
			vm.map.fitBounds(bounds, {
				padding: pad[1],
				maxZoom: 6
			});
		});

		$scope.$on("$stateChangeSuccess", function(event, toState, toParams, fromState, fromParams) {

			/*console.log($)
			if (toState.name == "app.index.show") {
					vm.current = "";
			} else if (toState.name == "app.index.show.selected") {

				if(toParams.index != fromParams.index){
					console.log('anders')
				}
				console.log(toParams.item);
				vm.setState(toParams.item);
				calcRank();
				//vm.mvtSource.options.mutexToggle = true;
				DataService.getOne('nations', vm.current.iso).then(function (data) {
					vm.current.data = data;
					DataService.getOne('nations/bbox', [vm.current.iso]).then(function (data) {
						vm.bbox = data;
					});
				});
			} else if (toState.name == "app.index.show.selected.compare") {
				vm.setState(toParams.item);
				//$scope.activeTab = 2;
				/*DataService.getOne('nations', toParams.item).then(function (data) {
					vm.country = data;
					DataService.getOne('nations/bbox', [vm.country.iso]).then(function (data) {
						vm.bbox = data;
					});
				});
			} else {
				vm.current = "";
			}*/
		});

		//TODO: MOVE TO SERVICE MAP
		function drawCountries() {
			var map = VectorlayerService.getMap();
				vm.map = map;
				vm.mvtSource = VectorlayerService.getLayer();
				$timeout(function() {
					if ($state.params.countries) {
						vm.mvtSource.options.mutexToggle = false;
						vm.mvtSource.setStyle(invertedStyle);
						vm.mvtSource.layers[vm.mvtCountryLayerGeom].features[vm.current.iso].selected = true;
						var countries = $state.params.countries.split('-vs-');
						angular.forEach(countries, function(iso) {
							vm.mvtSource.layers[vm.mvtCountryLayerGeom].features[iso].selected = true;
						});

					} else {
						vm.mvtSource.setStyle(countriesStyle);
						if ($state.params.item) {
							vm.mvtSource.layers[vm.mvtCountryLayerGeom].features[$state.params.item].selected = true;
						}
					}
					//vm.mvtSource.redraw();
				});
				vm.mvtSource.options.onClick = function(evt, t) {

					if (!vm.compare.active) {
						var c = getNationByIso(evt.feature.properties[vm.iso_field]);
						if (typeof c[vm.structure.name] != "undefined") {
							$mdSidenav('left').open();
							vm.current = getNationByIso(evt.feature.properties[vm.iso_field]);
						} else {
							toastr.error('No info about this location!', evt.feature.properties.admin);
						}
					} else {
						var c = getNationByIso(evt.feature.properties[vm.iso_field]);
						if (typeof c[vm.structure.name] != "undefined") {
							vm.toggleCountrieList(c);
						} else {
							toastr.error('No info about this location!', evt.feature.properties.admin);
						}
					}
				}

		}
	}]);
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexbaseCtrl', ["$scope", "$state", function ($scope,$state) {
		//
    $scope.$state = $state;
	}]);
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexCheckCtrl', ["$scope", "$state", "$filter", "$timeout", "toastr", "DialogService", "IndexService", function ($scope, $state, $filter, $timeout, toastr, DialogService, IndexService) {


		var vm = this;
		vm.data = IndexService.getData();
		vm.meta = IndexService.getMeta();
		vm.errors = IndexService.getErrors();
		vm.iso_errors = IndexService.getIsoErrors();
		vm.selected = [];
    vm.yearfilter = '';
		vm.deleteData = deleteData;
		vm.deleteSelected = deleteSelected;
		vm.deleteColumn = deleteColumn;
		vm.onOrderChange = onOrderChange;
		vm.onPaginationChange = onPaginationChange;
		vm.checkForErrors = checkForErrors;
		vm.selectErrors = selectErrors;
    vm.searchForErrors = searchForErrors;
		vm.showUploadContainer = false;
		//vm.editColumnData = editColumnData;
		vm.editRow = editRow;
    vm.years = [];
		vm.query = {
			filter: '',
			order: '-errors',
			limit: 15,
			page: 1
		};

		activate();

		function activate() {
			checkData();
    	getYears();
		}

		function checkData() {
			if (!vm.data) {
				$state.go('app.index.create');
			}
		}
    function getYears(){
			$timeout(function(){
				var dat = ($filter('groupBy')(vm.data, 'data.'+vm.meta.country_field ));
	      vm.years = [];
				var length = 0;
				var index = null;
			  angular.forEach(dat,function(entry, i){
					if(entry.length > length){
						index = i
					}
				});
	      angular.forEach(dat[index],function(entry){
	        vm.years.push(entry.data[vm.meta.year_field])
	      });
				vm.yearfilter = vm.years[0];
			});


    }
		function search(predicate) {
			vm.filter = predicate;
		};

		function onOrderChange(order) {
			return vm.data = $filter('orderBy')(vm.data, [order], true)
		};

		function onPaginationChange(page, limit) {
			//console.log(page, limit);
			//return $nutrition.desserts.get($scope.query, success).$promise;
		};

		function checkForErrors(item) {
			return item.errors.length > 0 ? 'md-warn' : '';
		}

		/*function editColumnData(e, key){
		  vm.toEdit = key;
		  DialogService.fromTemplate('editcolumn', $scope);
		}*/
		function deleteColumn(e, key) {
			angular.forEach(vm.data, function (item, k) {
				angular.forEach(item.data, function (field, l) {
					if (l == key) {
						angular.forEach(vm.data[k].errors, function(error, i){
							if(error.column == key){
								if (error.type == 2 || error.type == 3) {
									IndexService.reduceIsoError();
								}
								IndexService.reduceError();
								vm.data[k].errors.splice(i, 1);
							}
						})
						delete vm.data[k].data[key];
					}
				})
			});
			IndexService.setToLocalStorage();
			return false;
		}

		function deleteSelected() {
			angular.forEach(vm.selected, function (item, key) {
				angular.forEach(item.errors, function (error, k) {
					if (error.type == 2 || error.type == 3) {
						vm.iso_errors--;
						IndexService.reduceIsoError();
					}
					vm.errors--;
					IndexService.reduceError();
				})
				vm.data.splice(vm.data.indexOf(item), 1);
			});
			vm.selected = [];
			IndexService.setToLocalStorage();
			if (vm.data.length == 0) {
				vm.deleteData();
				$state.go('app.index.create');
			}
		}

		function selectErrors() {
			vm.selected = [];
			angular.forEach(vm.data, function (item, key) {
				if (item.errors.length) {
					vm.selected.push(item);
				}
			})
		}

		function editRow() {
			vm.row = vm.selected[0];
			DialogService.fromTemplate('editrow', $scope);
		}

		function deleteData() {
			vm.data = [];
		}

		function searchForErrors() {
			angular.forEach(vm.data, function (row, k) {
				angular.forEach(row.data, function (item, key) {
					if (isNaN(item) || item < 0) {
						if (item.toString().toUpperCase() == "#NA" || item < 0 || item.toString().toUpperCase().indexOf('N/A') > -1) {
							var error = {
								type: "1",
								message: "Field in row is not valid for database use!",
								column: key,
								value: item
							};
							row.errors.push(error)
							vm.errors.push(error);
						}
					}
				});
			});
		}

	}]);


})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('IndexCheckSidebarCtrl', ["$rootScope", "$scope", "$state", "IndexService", "DataService", "DialogService", "toastr", function($rootScope, $scope, $state, IndexService, DataService, DialogService, toastr) {
		var vm = this;
		vm.data = IndexService.getData();
		vm.meta = IndexService.getMeta();
		vm.errors = IndexService.getErrors();
		vm.iso_errors = IndexService.getIsoErrors();
		vm.clearErrors = clearErrors;
		vm.fetchIso = fetchIso;

		activate();

		function activate() {

			//vm.myData = DataService.getAll('me/data');
			//checkMyData();
		}

		/*function checkMyData() {
			vm.extendingChoices = [];
			if (vm.data.length) {
				vm.myData.then(function(imports) {
					angular.forEach(imports, function(entry) {
						var found = 0;
						angular.forEach(vm.data[0].meta.fields, function(field) {
							var columns = JSON.parse(entry.meta_data);
							angular.forEach(columns, function(column) {
								if (column.column == field) {
									found++;
								}
							})
						});
						if (found >= vm.data[0].meta.fields.length - 3) {
							vm.extendingChoices.push(entry);
						}
					})
					if (vm.extendingChoices.length) {
						if(vm.meta.year_field){
							vm.meta.year = vm.data[0].data[0][vm.meta.year_field];
						}
						DialogService.fromTemplate('extendData', $scope);
					}
				});
			}
		}*/

		function clearErrors() {
			angular.forEach(vm.data, function(row, key) {
				angular.forEach(row.data, function(item, k) {
					if (isNaN(item) || item < 0) {
						if ( item.toString().toUpperCase() == "#NA"/* || item < 0*/ || item.toString().toUpperCase().indexOf('N/A') > -1) {
							vm.data[key].data[k] = null;
							row.errors.splice(0, 1);
							vm.errors.splice(0, 1);
						}
					}
				});
				if (!row.data[vm.meta.iso_field]) {
					var error = {
						type: "2",
						message: "Iso field is not valid!",
						value: row.data[vm.meta.iso_field],
						column: vm.meta.iso_field,
						row: key
					};
					var errorFound = false;
					angular.forEach(row.errors, function(error, key) {
						if (error.type == 2) {
							errorFound = true;
						}
					})
					if (!errorFound) {
						row.errors.push(error);
						vm.iso_errors.push(error);
					}
				}
			});
			IndexService.setToLocalStorage();
		}

		function fetchIso() {

			if (!vm.meta.iso_field) {
				toastr.error('Check your selection for the ISO field', 'Column not specified!');
				return false;
			}
			if (!vm.meta.country_field) {
				toastr.error('Check your selection for the COUNTRY field', 'Column not specified!');
				return false;
			}
			if (vm.meta.country_field == vm.meta.iso_field) {
				toastr.error('ISO field and COUNTRY field can not be the same', 'Selection error!');
				return false;
			}
			$rootScope.stateIsLoading = true;
			vm.notFound = [];
			var entries = [];
			var isoCheck = 0;
			var isoType = 'iso-3166-2';
			angular.forEach(vm.data, function(item, key) {
				if (item.data[vm.meta.iso_field]) {
					isoCheck += item.data[vm.meta.iso_field].length == 3 ? 1 : 0;
				}
				switch (item.data[vm.meta.country_field]) {
					case 'Cabo Verde':
						item.data[vm.meta.country_field] = 'Cape Verde';
						break;
					case "Democratic Peoples Republic of Korea":
						item.data[vm.meta.country_field] = "Democratic People's Republic of Korea";
						break;
					case "Cote d'Ivoire":
						item.data[vm.meta.country_field] = "Ivory Coast";
						break;
					case "Lao Peoples Democratic Republic":
						item.data[vm.meta.country_field] = "Lao People's Democratic Republic";
						break;
					default:
						break;
				}
				entries.push({
					iso: item.data[vm.meta.iso_field],
					name: item.data[vm.meta.country_field]
				});
			});
			var isoType = isoCheck >= (entries.length / 2) ? 'iso-3166-1' : 'iso-3166-2';
			IndexService.resetToSelect();
			DataService.post('countries/byIsoNames', {
				data: entries,
				iso: isoType
			}).then(function(response) {
				$rootScope.stateIsLoading = false;
				angular.forEach(response, function(country, key) {
					angular.forEach(vm.data, function(item, k) {
						if (country.name == item.data[vm.meta.country_field]) {
							if (country.data.length > 1) {
								var toSelect = {
									entry: item,
									options: country.data
								};
								IndexService.addToSelect(toSelect);
							} else if(country.data.length == 1){
								if (typeof country.data != "undefined") {
									vm.data[k].data[vm.meta.iso_field] = country.data[0].iso;
									vm.data[k].data[vm.meta.country_field] = country.data[0].admin;
									if (item.errors.length) {
										angular.forEach(item.errors, function(error, e) {
											if (error.type == 2 || error.type == 3) {
												vm.iso_errors.splice(0, 1);
												item.errors.splice(e, 1);
											} else if (error.type == 1) {
												if (error.column == vm.meta.iso_field) {
													vm.errors.splice(0, 1);
													item.errors.splice(e, 1);
												}
											}
										});

									}
								} else {
									//console.log(vm.data[k]);
									var error = {
										type: "3",
										message: "Could not locate a valid iso name!",
										column: vm.meta.country_field
									};
									var errorFound = false;
									angular.forEach(vm.data[k].errors, function(error, i) {
										console.log(error);
										if (error.type == 3) {
											errorFound = true;
										}
									})
									if (!errorFound) {
										IndexService.addIsoError(error);
										item.errors.push(error);
									}
								}
							}
						}
					});
				});
				vm.iso_checked = true;
				IndexService.setToLocalStorage();
				if (IndexService.getToSelect().length) {
					DialogService.fromTemplate('selectisofetchers');
				}
			}, function(response) {
				$rootScope.stateIsLoading = false;
				toastr.error('Please check your field selections', response.data.message);
			});

		}
		vm.extendData = extendData;

		function extendData() {
			var insertData = {
				data: []
			};
			var meta = [],
				fields = [];
			angular.forEach(vm.data, function(item, key) {
				if (item.errors.length == 0) {
					item.data[0].year = vm.meta.year;
					if(vm.meta.year_field && vm.meta.year_field != "year") {
						delete item.data[vm.meta.year_field];
					}
					insertData.data.push(item.data);
				} else {
					toastr.error('There are some errors left!', 'Huch!');
					return;
				}
			});
			console.log(insertData);
			DataService.post('data/tables/' + vm.addDataTo.table_name + '/insert', insertData).then(function(res) {
				if (res == true) {
					toastr.success(insertData.data.length + ' items importet to ' + vm.meta.name, 'Success');
					vm.data = IndexService.clear();
					$state.go('app.index.mydata');
				}
			});
		}

	}]);
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexFinalCtrl', ["$state", "IndexService", "DataService", "toastr", function ($state, IndexService, DataService, toastr) {
		//
		var vm = this;
		vm.data = IndexService.getData();
		vm.meta = IndexService.getMeta();
		vm.errors = IndexService.getErrors();
		vm.indicators = IndexService.getIndicators();
		vm.saveData = saveData;


		activate();

		function activate() {
			/*if (vm.meta.year_field) {
				vm.meta.year = vm.data[0].data[vm.meta.year_field];
			}*/
			checkData();
		}

		function checkData() {
			if (!vm.data) {
				$state.go('app.index.create');
			}
		}

		function saveData(valid) {
			if (valid) {
				var insertData = {
					data: []
				};
				var noYears = [];
				var insertMeta = [],
					fields = [];
				vm.loading = true;
				angular.forEach(vm.data, function (item, key) {
					if (item.errors.length == 0) {
						if(item.data[vm.meta.year_field]){
							item.data.year = item.data[vm.meta.year_field];

							if(vm.meta.year_field && vm.meta.year_field != "year") {
								delete item.data[vm.meta.year_field];
							}

							vm.meta.iso_type = item.data[vm.meta.iso_field].length == 3 ? 'iso-3166-1' : 'iso-3166-2';
							insertData.data.push(item.data);
						}
						else{
							noYears.push(item);
						}


					} else {
						toastr.error('There are some errors left!', 'Huch!');
						return;
					}
				});
				angular.forEach(vm.indicators, function (item, key) {
					if (key != vm.meta.iso_field && key != vm.meta.country_field) {
						var style_id = 0;
						if (typeof vm.indicators[key].style != "undefined") {
							style_id = vm.indicators[key].style.id;
						}
						var field = {
							'column': key,
							'title': vm.indicators[key].title,
							'description': vm.indicators[key].description,
							'measure_type_id': vm.indicators[key].type.id || 0,
							'is_public': vm.indicators[key].is_public || 0,
							'style_id': style_id,
							'dataprovider_id': vm.indicators[key].dataprovider.id || 0
						};
						var categories = [];
						angular.forEach(vm.indicators[key].categories, function (cat) {
							categories.push(cat.id);
						});
						field.categories = categories;
						fields.push(field);
					}
				});
				vm.meta.fields = fields;
				if(noYears.length > 0){
					toastr.error("for "+noYears.length + " entries", 'No year value found!');
				}

				DataService.post('data/tables', vm.meta).then(function (response) {
					DataService.post('data/tables/' + response.table_name + '/insert', insertData).then(function (res) {
						if (res == true) {
							toastr.success(insertData.data.length + ' items importet to ' + vm.meta.name, 'Success');
							IndexService.clear();
							$state.go('app.index.mydata');
							vm.data = [];
							vm.step = 0;
						}
						vm.loading = false;
					});
				}, function (response) {
					if (response.message) {
						toastr.error(response.message, 'Ouch!');

					}
					vm.loading = false;
				})
			}
		}
	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('IndexFinalMenuCtrl', ["IndexService", function(IndexService){
      var vm = this;
      vm.data = IndexService.getData();
      vm.meta = IndexService.getMeta();
      vm.indicators = IndexService.getIndicators();
      vm.indicatorsLength = Object.keys(vm.indicators).length;

    }]);
})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('IndexMetaCtrl', ["$scope", "$state", "VectorlayerService", "$timeout", "IndexService", "leafletData", "toastr", function($scope, $state, VectorlayerService,$timeout,IndexService,leafletData, toastr){
        //

        var vm = this;
        vm.min = 10000000;
        vm.max = 0;
        vm.indicators = [];
        vm.scale = "";
        vm.data = IndexService.getData();
        vm.meta = IndexService.getMeta();
        vm.errors = IndexService.getErrors();
        vm.indicator = IndexService.activeIndicator();
        vm.countriesStyle = countriesStyle;
        VectorlayerService.createCanvas('#ff0000');

        activate();

        function activate(){
          checkData();
        }

        function checkData(){
          if(!vm.data){
            $state.go('app.index.create');
          }
        }

        $scope.$watch(function(){ return IndexService.activeIndicator()}, function(n,o){
          if(n === o)return;
          vm.indicator = n;
          vm.min = 10000000;
          vm.max = 0;
          if(vm.indicator.style){
            VectorlayerService.updateCanvas(vm.indicator.style.base_color);
          }
          drawCountries();
            IndexService.setToLocalStorage();
        });

        $scope.$watch('vm.indicator', function(n,o){
          if(n === o) return;
          if(typeof n.style_id != "undefined" ){
            if(n.style_id != o.style_id){
              if(n.style){
                VectorlayerService.updateCanvas(n.style.base_color);
              }
              else{
                  VectorlayerService.updateCanvas('#ff0000');
              }
              drawCountries();
            }
          }
          else{
            if(typeof n.categories != "undefined"){
              if(n.categories.length){
                VectorlayerService.updateCanvas(n.categories[0].style.base_color);
              }
              else{
                VectorlayerService.updateCanvas('#ff0000');
              }
            }
            drawCountries();
          }
          IndexService.setActiveIndicatorData(n);
          IndexService.setToLocalStorage();
        },true);


        function minMax(){
          vm.min = 10000000;
          vm.max = 0;
          angular.forEach(vm.data, function(item, key){
              vm.min = Math.min(item.data[vm.indicator.column_name], vm.min);
              vm.max = Math.max(item.data[vm.indicator.column_name], vm.max);
          });
          vm.scale = d3.scale.linear().domain([vm.min,vm.max]).range([0,100]);
        }
        function getValueByIso(iso){
          var value = 0;
          angular.forEach(vm.data, function(item, key){
             if(item.data[vm.meta.iso_field] == iso){
               value = item.data[vm.indicator.column_name];
             }
          });
          return value;
        }
        function countriesStyle(feature) {
    			var style = {};
    			var iso = feature.properties.iso_a2;
    			var value = getValueByIso(iso) || vm.min;
    			var field = vm.indicator.column_name;
    			var type = feature.type;

    			switch (type) {
    			case 3: //'Polygon'

    					var colorPos = parseInt(256 / 100 * parseInt(vm.scale(value))) * 4;
    					var color = 'rgba(' + VectorlayerService.getColor(colorPos) + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',' + VectorlayerService.getColor(colorPos + 3) + ')';
              style.color = 'rgba(' + VectorlayerService.getColor(colorPos)  + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',0.6)'; //color;
    					style.outline = {
    						color: color,
    						size: 1
    					};
    					style.selected = {
    						color: 'rgba(' + VectorlayerService.getColor(colorPos) + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',0.3)',
    						outline: {
    							color: 'rgba(66,66,66,0.9)',
    							size: 2
    						}
    					};
    					break;

    			}

    			if (feature.layer.name === VectorlayerService.getName()+'_geom') {
    				style.staticLabel = function () {
    					var style = {
    						html: feature.properties.name,
    						iconSize: [125, 30],
    						cssClass: 'label-icon-text'
    					};
    					return style;
    				};
    			}
    			return style;
    		}
        function setCountries(){
          vm.mvtSource.setStyle(countriesStyle);
          vm.mvtSource.redraw();
        }
        function drawCountries() {
          minMax();
    			leafletData.getMap('map').then(function (map) {
    				vm.map = map;
    				vm.mvtSource = VectorlayerService.getLayer();
    				$timeout(function () {
    						setCountries();
    				});
    			});
    		}
    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('IndexMetaMenuCtrl', ["$scope", "$state", "toastr", "DataService", "DialogService", "IndexService", function($scope,$state, toastr, DataService,DialogService, IndexService){
      var vm = this;
      vm.data = IndexService.getData();
      vm.meta = IndexService.getMeta();
      IndexService.resetIndicator();
      vm.indicators = IndexService.getIndicators();
      vm.selectForEditing = selectForEditing;
      vm.checkFull = checkFull;
      vm.checkBase = checkBase;
      vm.checkAll = checkAll;
      vm.saveData = saveData;


      function selectForEditing(key){
        if(typeof IndexService.getIndicator(key) == "undefined"){
          IndexService.setIndicator(key,{
            column_name:key,
            title:key
          });
        }
        vm.editingItem = key;
        vm.indicator = IndexService.getIndicator(key);
        IndexService.setToLocalStorage();
      }
      function checkBase(item){
        if(typeof item == "undefined") return false;
  			if (item.title && item.type && item.dataprovider && item.title.length >= 3) {
  				return true;
  			}
  			return false;
  		}
  		function checkFull(item){
        if(typeof item == "undefined" || typeof item.categories == "undefined") return false;
  			return checkBase(item) && item.categories.length ? true : false;
  		}
      function checkAll(){
        var done = 0;
        angular.forEach(vm.indicators, function(indicator){
          if(checkBase(indicator)){
            done ++;
          }
        });
        //console.log(done, Object.keys(vm.indicators).length);
        if(done == Object.keys(vm.indicators).length){
          return true;
        }
        return false;
      }
      function saveData() {

          if(!vm.meta.year_field && !vm.meta.year){
            DialogService.fromTemplate('addYear', $scope);
            return false;
          }
  				var insertData = {
  					data: []
  				};
  				var noYears = [];
  				var insertMeta = [],
  					fields = [];
  				vm.loading = true;
  				angular.forEach(vm.data, function (item, key) {
  					if (item.errors.length == 0) {
  						if(item.data[vm.meta.year_field]){
  							item.data.year = item.data[vm.meta.year_field];

  							if(vm.meta.year_field && vm.meta.year_field != "year") {
  								delete item.data[vm.meta.year_field];
  							}

  							vm.meta.iso_type = item.data[vm.meta.iso_field].length == 3 ? 'iso-3166-1' : 'iso-3166-2';
  							insertData.data.push(item.data);
  						}
  						else{
                if(vm.meta.year){
                  item.data.year = vm.meta.year;
                  vm.meta.iso_type = item.data[vm.meta.iso_field].length == 3 ? 'iso-3166-1' : 'iso-3166-2';
    							insertData.data.push(item.data);
                }
                else{
                  	noYears.push(item);
                }


  						}


  					} else {
  						toastr.error('There are some errors left!', 'Huch!');
  						return;
  					}
  				});
  				angular.forEach(vm.indicators, function (item, key) {
  					if (key != vm.meta.iso_field && key != vm.meta.country_field) {
  						var style_id = 0;
  						if (typeof vm.indicators[key].style != "undefined") {
  							style_id = vm.indicators[key].style.id;
  						}
  						var field = {
  							'column': key,
  							'title': vm.indicators[key].title,
  							'description': vm.indicators[key].description,
  							'measure_type_id': vm.indicators[key].type.id || 0,
  							'is_public': vm.indicators[key].is_public || 0,
  							'style_id': style_id,
  							'dataprovider_id': vm.indicators[key].dataprovider.id || 0
  						};
  						var categories = [];
  						angular.forEach(vm.indicators[key].categories, function (cat) {
  							categories.push(cat.id);
  						});
  						field.categories = categories;
  						fields.push(field);
  					}
  				});
  				vm.meta.fields = fields;
  				if(noYears.length > 0){
  					toastr.error("for "+noYears.length + " entries", 'No year value found!');
            return false;
  				}

  				DataService.post('data/tables', vm.meta).then(function (response) {
  					DataService.post('data/tables/' + response.table_name + '/insert', insertData).then(function (res) {
  						if (res == true) {
  							toastr.success(insertData.data.length + ' items importet to ' + vm.meta.name, 'Success');
  							IndexService.clear();
  							$state.go('app.index.mydata');
  							vm.data = [];
  							vm.step = 0;
  						}
  						vm.loading = false;
  					});
  				}, function (response) {
  					if (response.message) {
  						toastr.error(response.message, 'Ouch!');

  					}
  					vm.loading = false;
  				})

  		}
      function copyToOthers(){
      /*  vm.preProvider = vm.indicators[o.column_name].dataprovider;
        vm.preMeasure = vm.indicators[o.column_name].measure_type_id;
        vm.preType = vm.indicators[o.column_name].type;
        vm.preCategories = vm.indicators[o.column_name].categories;
        vm.prePublic = vm.indicators[o.column_name].is_public;
        vm.preStyle = vm.indicators[o.column_name].style;

        DialogService.fromTemplate('copyprovider', $scope);*/
      }
     $scope.$watch(function(){ return IndexService.activeIndicator()}, function(n,o){
        if(n === o)return;
        vm.indicators[n.column_name] = n;
      },true);
      $scope.$watch(function(){ return IndexService.activeIndicator()}, function(n,o){
        if (n === o || typeof o == "undefined" || o == null) return;
        if(!vm.askedToReplicate) {
          vm.preProvider = vm.indicators[o.column_name].dataprovider;
          vm.preMeasure = vm.indicators[o.column_name].measure_type_id;
          vm.preType = vm.indicators[o.column_name].type;
          vm.preCategories = vm.indicators[o.column_name].categories;
          vm.prePublic = vm.indicators[o.column_name].is_public;
          vm.preStyle = vm.indicators[o.column_name].style;

          DialogService.fromTemplate('copyprovider', $scope);
        } else {
          //n.dataprovider = vm.doProviders ? vm.preProvider : [];
          //n.measure_type_id = vm.doMeasures ? vm.preMeasure : 0;
          //n.categories = vm.doCategories ? vm.preCategories: [];
          //n.is_public = vm.doPublic ? vm.prePublic: false;
        }

      });
    }]);
})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('IndexMyDataCtrl', function(){
        //
    });

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('IndexMyDataEntryCtrl', ["UserService", function(UserService){
      var vm = this;
      vm.data = UserService.myData();
    }]);
})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('IndexMyDataMenuCtrl', ["UserService", function(UserService){
      var vm = this;

      vm.data = [];

      activate();

      function activate(){
        UserService.myData().then(function(data){
          vm.data = data;
            convertInfo();
        })

      }
      function convertInfo(){
        console.log(vm.data);
        angular.forEach(vm.data, function(item){
            item.meta = JSON.parse(item.meta_data);
        })

      }
    }]);
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexeditorcategoryCtrl', ["$state", "category", "categories", "DataService", "ContentService", function ($state, category, categories, DataService,ContentService) {
    var vm = this;
    vm.category = category;
		vm.categories = categories;
		vm.options = {
			globalSave:true,
			postDone:function(data){
				$state.go('app.index.editor.categories.category', {id:data.id})
			},
		}
  }]);
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexeditorCtrl', ["$scope", "$filter", "$timeout", "$state", "indicators", "indices", "styles", "categories", "DataService", "ContentService", "toastr", function ($scope, $filter, $timeout,$state, indicators, indices, styles, categories, DataService,ContentService, toastr) {
		//
		var vm = this;

		vm.categories = categories;
		vm.composits = indices;
		vm.styles = styles;
		vm.indicators = indicators;
		vm.checkTabContent = checkTabContent;

		vm.active = 0;
		vm.selectedTab = 0;
		vm.selection = {
			indices:[],
			indicators:[],
			styles:[],
			categories:[]
		};


		vm.options = {
			composits:{
				drag:false,
				type:'composits',
				allowMove:false,
				allowDrop:false,
				allowAdd:true,
				allowDelete:true,
				itemClick: function(id, name){
					$state.go('app.index.editor.indizes.data', {id:id, name:name})
				},
				addClick:function(){
					$state.go('app.index.editor.indizes.data', {id:0, name: 'new'})
				},
				deleteClick:function(){
					angular.forEach(vm.selection.indices,function(item, key){
						ContentService.removeItem(item.id).then(function(data){
							if($state.params.id == item.id){
								$state.go('app.index.editor.indizes');
							}
							vm.selection.indices = [];
						});
					});
					//$state.go('app.index.editor.indizes');
				}
			},
			categories:{
				drag:false,
				type:'categories',
				allowAdd:true,
				allowDelete:true,
				addClick:function(){
					$state.go('app.index.editor.categories.category', {id:'new'})
				},
				itemClick: function(id, name){

					$state.go('app.index.editor.categories.category', {id:id})
				},
				deleteClick:function(){
					angular.forEach(vm.selection.categories,function(item, key){
						ContentService.removeCategory(item.id).then(function(data){
							if($state.params.id == item.id){
								$state.go('app.index.editor.categories');
							}
							vm.selection.categories = [];
						});
					});
					//$state.go('app.index.editor.categories');
				}

			},
			styles:{
				drag:false,
				type:'styles',
				withColor:true
			}
		};


		function checkTabContent(index){
			switch (index) {
				case 1:
						$state.go('app.index.editor.indicators');
					break;
				case 2:
						$state.go('app.index.editor.categories');
					break;
				case 0:
						if(typeof $state.params.id != "undefined"){
								$state.go('app.index.editor.indizes.data',{
									id:$state.params.id
								});
						}
						else{
								$state.go('app.index.editor.indizes');
						}
					break;
				case 3:

					break;
				default:

			}
		}

		$scope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams){
		  if(typeof toParams.id == "undefined"){
				vm.active = 0;
			}
			else{
				vm.active = toParams.id;
			}
			if(toState.name.indexOf('app.index.editor.indicators') != -1){
				vm.selectedTab = 1;
				//activate(toParams);
			}
			else if(toState.name.indexOf('app.index.editor.categories') != -1){
				vm.selectedTab = 2;
			}
			else if(toState.name.indexOf('app.index.editor.indizes') != -1){
				vm.selectedTab = 0;
			}
		});
	}]);

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexeditorindicatorCtrl', ["$scope", "$state", "$timeout", "VectorlayerService", "leafletData", "ContentService", "indicator", function ($scope, $state,$timeout, VectorlayerService, leafletData, ContentService, indicator) {
		//
		var vm = this;
    vm.indicator = indicator;
		vm.scale = "";
		vm.min = 10000000;
		vm.max = 0;
		vm.selected = 0;
		setActive();

		ContentService.getIndicatorData($state.params.id).then(function(data){
			var base_color = '#ff0000';
			if(typeof vm.indicator.style == "undefined"){
				angular.forEach(vm.indicator.categories, function(cat){
					if(typeof cat.style != "undefined"){
						base_color = cat.style.base_color;
					}
				});
			}
			else if(vm.indicator.style){
				base_color = vm.indicator.style.base_color;
			}
			VectorlayerService.createCanvas(base_color );
			vm.data = data;
			minMax();
			drawCountries();
		});
		function setActive(){
			if($state.current.name == 'app.index.editor.indicator.details'){
				if($state.params.entry == "infographic"){
					vm.selected = 1;
				}
				else if($state.params.entry == "indizes"){
					vm.selected = 2;
				}
				else if($state.params.entry == "style"){
					vm.selected = 3;
				}
				else if($state.params.entry == "categories"){
					vm.selected = 4;
				}
				else{
					vm.selected = 0;
				}
			}
		}
		function minMax(){
			vm.min = 10000000;
			vm.max = 0;
			angular.forEach(vm.data, function(item, key){
					vm.min = Math.min(item.score, vm.min);
					vm.max = Math.max(item.score, vm.max);
			});
			vm.scale = d3.scale.linear().domain([vm.min,vm.max]).range([0,100]);
		}
		function getValueByIso(iso){
			var value = 0;
			angular.forEach(vm.data, function(item, key){
				 if(item.iso == iso){
					 value = item.score;
				 }
			});
			return value;
		}
		function countriesStyle(feature) {
			var style = {};
			var iso = feature.properties.iso_a2;
			var value = getValueByIso(iso) || vm.min;
			var type = feature.type;

			switch (type) {
				case 3: //'Polygon'
					var colorPos = parseInt(256 / 100 * parseInt(vm.scale(value))) * 4;
					var color = 'rgba(' + VectorlayerService.getColor(colorPos) + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',' + VectorlayerService.getColor(colorPos + 3) + ')';
					style.color = 'rgba(' + VectorlayerService.getColor(colorPos)  + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',0.6)'; //color;
					style.outline = {
						color: color,
						size: 1
					};
					style.selected = {
						color: 'rgba(' + VectorlayerService.getColor(colorPos) + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',0.3)',
						outline: {
							color: 'rgba(66,66,66,0.9)',
							size: 2
						}
					};
					break;

			}
			return style;
		}
		function drawCountries() {
			minMax();
			leafletData.getMap('map').then(function (map) {
				vm.map = map;
				vm.mvtSource = VectorlayerService.getLayer();
				$timeout(function () {
						vm.mvtSource.setStyle(countriesStyle);
					//vm.mvtSource.redraw();
				});
			});
		}

		$scope.$on('$stateChangeSuccess', function(){
			setActive();
		});

	}]);

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexinidcatorsCtrl', ["indicators", "DataService", "ContentService", function (indicators, DataService,ContentService) {
		//
    var vm = this;
    vm.indicators = indicators;


  }])
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndexeditorindizesCtrl', ["$scope", "$state", "$timeout", "VectorlayerService", "leafletData", "ContentService", "index", function ($scope, $state,$timeout, VectorlayerService, leafletData, ContentService, index) {
		//
		var vm = this;
    //vm.indicator = indicator;
    vm.index = index;
		vm.scale = "";
		vm.min = 10000000;
		vm.max = 0;
		vm.selected = [];
		setActive();
    vm.options = {
      indizes:{
        addClick: function(){
          $state.go('app.index.editor.indizes.data.add');
        },
				addContainerClick:function(){
					var item = {
						title: 'I am a group... name me'
					};
					vm.index.children.push(item);
				},
				deleteClick:function(){
					console.log(vm);
					angular.forEach(vm.selected,function(item, key){
						ContentService.removeItem(item.id).then(function(data){
							removeItem(item,vm.index.children);
							vm.selected = [];
						});
					});
				},
				deleteDrop: function(event,item,external,type){
					ContentService.removeItem(item.id).then(function(data){
						removeItem(item,vm.index.children);
						vm.selection = [];
					});
				}
      },
      withSave: true
    }

		active();


		function active(){

		}
		function removeItem(item, list){
			angular.forEach(list, function(entry, key){
				if(entry.id == item.id){
					list.splice(key, 1);
					return true;
				}
				if(entry.children){
					var subresult = removeItem(item, entry.children);
					if(subresult){
						return subresult;
					}
				}
			});
			return false;
		}
		/*ContentService.getIndicatorData($state.params.id).then(function(data){
			var base_color = '#ff0000';
			if(typeof vm.indicator.style == "undefined"){
				angular.forEach(vm.indicator.categories, function(cat){
					if(typeof cat.style != "undefined"){
						base_color = cat.style.base_color;
					}
				});
			}
			else if(vm.indicator.style){
				base_color = vm.indicator.style.base_color;
			}
			VectorlayerService.createCanvas(base_color );
			vm.data = data;
			minMax();
			drawCountries();
		});*/

		function setActive(){
		/*	if($state.current.name == 'app.index.editor.indicator.details'){
				if($state.params.entry == "infographic"){
					vm.selected = 1;
				}
				else if($state.params.entry == "indizes"){
					vm.selected = 2;
				}
				else if($state.params.entry == "style"){
					vm.selected = 3;
				}
				else if($state.params.entry == "categories"){
					vm.selected = 4;
				}
				else{
					vm.selected = 0;
				}
			}*/
		}
		function minMax(){
			vm.min = 10000000;
			vm.max = 0;
			angular.forEach(vm.data, function(item, key){
					vm.min = Math.min(item.score, vm.min);
					vm.max = Math.max(item.score, vm.max);
			});
			vm.scale = d3.scale.linear().domain([vm.min,vm.max]).range([0,100]);
		}
		function getValueByIso(iso){
			var value = 0;
			angular.forEach(vm.data, function(item, key){
				 if(item.iso == iso){
					 value = item.score;
				 }
			});
			return value;
		}
		function countriesStyle(feature) {
			var style = {};
			var iso = feature.properties.iso_a2;
			var value = getValueByIso(iso) || vm.min;
			var type = feature.type;

			switch (type) {
				case 3: //'Polygon'
					var colorPos = parseInt(256 / 100 * parseInt(vm.scale(value))) * 4;
					var color = 'rgba(' + VectorlayerService.getColor(colorPos) + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',' + VectorlayerService.getColor(colorPos + 3) + ')';
					style.color = 'rgba(' + VectorlayerService.getColor(colorPos)  + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',0.6)'; //color;
					style.outline = {
						color: color,
						size: 1
					};
					style.selected = {
						color: 'rgba(' + VectorlayerService.getColor(colorPos) + ', ' + VectorlayerService.getColor(colorPos + 1) + ', ' + VectorlayerService.getColor(colorPos + 2) + ',0.3)',
						outline: {
							color: 'rgba(66,66,66,0.9)',
							size: 2
						}
					};
					break;

			}
			return style;
		}
		function drawCountries() {
			minMax();
			leafletData.getMap('map').then(function (map) {
				vm.map = map;
				vm.mvtSource = VectorlayerService.getLayer();
				$timeout(function () {
						vm.mvtSource.setStyle(countriesStyle);
					//vm.mvtSource.redraw();
				});
			});
		}

		$scope.$on('$stateChangeSuccess', function(){
			setActive();
		});

	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('IndexcreatorCtrl', ["$scope", "DialogService", "DataService", "$timeout", "$state", "$filter", "leafletData", "toastr", "IconsService", "IndexService", "VectorlayerService", function($scope, DialogService,DataService, $timeout,$state, $filter, leafletData, toastr, IconsService,IndexService, VectorlayerService){

        //TODO: Check if there is data in storage to finish
      /*  console.log($state);
        if($state.current.name == 'app.index.create'){
          if(IndexService.getData().length){
            if(confirm('Existing Data. Go On?')){
              $state.go('app.index.check');
            }
            else{
              IndexService.clear();
            }
          }
        }*/

        var vm = this;
        vm.map = null;
        vm.data = [];
        vm.toSelect = [];
        vm.selected = [];
        vm.selectedRows = [];
        vm.selectedResources =[];
        vm.sortedResources = [];

        vm.groups = [];
        vm.myData = [];
        vm.addDataTo = {};
        vm.selectedForGroup = [];
        vm.iso_errors = 0;
        vm.iso_checked = false;
        vm.saveDisabled = false;
        vm.selectedIndex = 0;
        vm.step = 0;
        vm.openClose = openClose;
        //vm.search = search;

        vm.listResources = listResources;
        vm.toggleListResources = toggleListResources;
        vm.selectedResource = selectedResource;
        vm.toggleResource = toggleResource;
        vm.increasePercentage = increasePercentage;
        vm.decreasePercentage = decreasePercentage;
        vm.toggleGroupSelection = toggleGroupSelection;
        vm.existsInGroupSelection = existsInGroupSelection;
        vm.addGroup = addGroup;
        vm.cloneSelection = cloneSelection;
        vm.editEntry = editEntry;
        vm.removeEntry = removeEntry;
        vm.saveIndex = saveIndex;

        vm.icons = IconsService.getList();

        vm.meta = {
          iso_field: '',
          country_field:'',
          table:[]
        };
        vm.query = {
          filter: '',
          order: '-errors',
          limit: 15,
          page: 1
        };

        /*vm.treeOptions = {
          beforeDrop:function(event){
            if(event.dest.nodesScope != event.source.nodesScope){
              var idx = event.dest.nodesScope.$modelValue.indexOf(event.source.nodeScope.$modelValue);
              if(idx > -1){
                 event.source.nodeScope.$$apply = false;
                 toastr.error('Only one element of a kind per group possible!', 'Not allowed!')
              }
            }
          },
          dropped:function(event){
            calcPercentage(vm.groups);
          }
        };*/

        //Run Startup-Funcitons
        activate();

        function activate(){
          //clearMap();
          IndexService.resetLocalStorage();
        }
        function openClose(active){
          return active ? 'remove' : 'add';
        }
        function clearLayerStyle(feature){
      			var style = {
              color:'rgba(255,255,255,0)',
              outline: {
    						color: 'rgba(255,255,255,0)',
    						size: 1
    					}
            };
      			return style;
        }
        function clearMap(){
          	leafletData.getMap('map').then(function (map) {
              vm.mvtSource = VectorlayerService.getLayer();
              $timeout(function(){
                vm.mvtSource.setStyle(clearLayerStyle);
              })
            });
        }


        function toggleListResources(){
          vm.showResources = !vm.showResources;
          if(vm.showResources){
            vm.listResources();
          }
        }
        function listResources(){
          if(!vm.resources){
            DataService.getAll('data/tables').then(function(response){
              vm.resources = response;
              vm.selectedResources = [], vm.sortedResources = [];
            })
          }

        }
        function selectedResource(resource){
          return vm.selectedResources.indexOf(resource) > -1 ? true : false;
        }
        function deleteFromGroup(resource, list){
          angular.forEach(list, function(item, key){
              //if(typeof item.isGroup == "undefined"){
                if(item == resource){
                  list.splice(key, 1);
                  vm.selectedForGroup.splice(vm.selectedForGroup.indexOf(item), 1);
                  vm.selectedResources.splice(vm.selectedResources.indexOf(item),1);
                }
              //}
              deleteFromGroup(resource, item.nodes);
          });
        }
        function toggleResource(resource){
          var idx = vm.selectedResources.indexOf(resource);
          if( idx > -1){
            vm.selectedResources.splice(idx, 1);
            deleteFromGroup(resource, vm.groups);
          }
          else{
            vm.selectedResources.push(resource);
            if(vm.selectedForGroup.length == 1 && typeof vm.selectedForGroup[0].isGroup != "undefined"){
              vm.selectedForGroup[0].nodes.push(resource);
            }
            else{
                vm.groups.push(resource);
            }
          }

          //calcPercentage(vm.sortedResources);
        }
        function calcPercentage(nodes){
          angular.forEach(nodes, function(node, key){
            nodes[key].weight = parseInt(100 / nodes.length);
            calcPercentage(nodes.node);
          });
        }
        function increasePercentage(item){
          console.log(item);
        }
        function decreasePercentage(item){
          console.log(item)
        }
        function toggleGroupSelection(item){
          var idx = vm.selectedForGroup.indexOf(item);
          if( idx > -1){
            vm.selectedForGroup.splice(idx, 1);
          }
          else{
            vm.selectedForGroup.push(item);
          }
        }
        function existsInGroupSelection(item){
          return vm.selectedForGroup.indexOf(item) > -1;
        }
        function addGroup(){
          var newGroup = {
            title:'Group',
            isGroup:true,
            nodes:[]
          };

          if(vm.selectedForGroup.length == 1 && typeof vm.selectedForGroup[0].isGroup != "undefined"){
            vm.selectedForGroup[0].nodes.push(newGroup);
          }
          else if(vm.selectedForGroup.length > 0 ){
              angular.forEach(vm.selectedForGroup, function(item, key){
                  newGroup.nodes.push(item);
                  deleteFromGroup(item, vm.selectedForGroup);
              });
              vm.groups.push(newGroup);
              vm.selectedForGroup = [];
          }
          else{
            vm.groups.push(newGroup);
          }
        }
        function cloneSelection(){
          var newGroup = {
            title:'Cloned Elements',
            isGroup:true,
            nodes:[]
          };
          angular.forEach(vm.selectedForGroup, function(item, key){
            newGroup.nodes.push(item);
          });
          vm.groups.push(newGroup);
          vm.selectedForGroup = [];
        }
        function editEntry(item){
          vm.editItem = item;
        }
        function removeEntry(item, list){
            deleteFromGroup(item, list);
        }
        function saveIndex(){
          if(vm.saveDisabled){
            return;
          }
          vm.saveDisabled = true;
          if(typeof vm.newIndex == 'undefined'){
            toastr.error('You need to enter a title!','Info missing');
            vm.saveDisabled = false;
            return;
          }
          if(!vm.newIndex.title){
            toastr.error('You need to enter a title!','Info missing');
            vm.saveDisabled = false;
            return;
          }
          vm.newIndex.data = vm.groups;
          DataService.post('index', vm.newIndex).then(function(response){
            vm.saveDisabled = false;
            toastr.success('Your Index has been created', 'Success'),
            $state.go('app.index.show', {index:response.name});
          },function(response){
            vm.saveDisabled = false;
            toastr.error(response.message,'Upps!!');
          });
        }
        /*$scope.$on("$stateChangeSuccess", function (event, toState, toParams, fromState, fromParams) {
          if(!vm.data.length){
            $state.go('app.index.create');
          }
          else{
            switch (toState.name) {
              case 'app.index.create':
                  vm.step = 0;
                break;
              case 'app.index.create.basic':
                  console.log(vm.data);
                    vm.step = 1;
                    checkMyData();
                  break;
              case 'app.index.create.check':
                  vm.step = 2;
                  vm.showUploadContainer = false;
                break;
              case 'app.index.create.meta':
                  vm.step = 3;
                    vm.showUploadContainer = false;
                  break;
              case 'app.index.create.final':
                  vm.step = 4;
                    vm.showUploadContainer = false;
                  break;
              default:
                break;
            }
          }
        });*/
    }]);

})();

(function(){
    "use strict";
    angular.module('app.controllers').controller('IndexinfoCtrl', ["IndizesService", function(IndizesService){
        var vm = this;
        vm.structure = IndizesService.getStructure();
    }]);
})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('IndicatorShowCtrl', ["$state", "$filter", "$timeout", "indicator", "countries", "ContentService", "VectorlayerService", "toastr", function($state, $filter, $timeout, indicator, countries, ContentService, VectorlayerService, toastr) {
		//
		var vm = this;
		vm.current = null;
		vm.active = null, vm.activeGender = null;
		vm.countryList = countries;
		vm.indicator = indicator;
		vm.data = [];
		vm.year = null, vm.gender = 'all';
		vm.range = {
			max: -100000000,
			min: 100000000
		};
		vm.getData = getData;
		vm.getOffset = getOffset;
		vm.getRank = getRank;
		vm.goInfoState = goInfoState;
		vm.historyData = null;

		vm.setCurrent = setCurrent;
		vm.setYear = setYear;
		vm.setGender = setGender;

		activate();

		function activate() {
			resetRange();
			VectorlayerService.setStyle(countriesStyle);
			VectorlayerService.countryClick(countryClick);
			$timeout(function() {
				//	vm.year = $state.params.year;
				//	vm.gender = $state.params.gender;
				//getData($state.params.year, $state.params.gender);
				if ($state.params.year) {
					vm.year = $state.params.year;
					for (var i = 0; i < vm.indicator.years.length; i++) {
						if (vm.indicator.years[i].year == $state.params.year) {
							vm.active = i;
						}
					}
				} else if (!vm.active) {
					vm.active = 0;
				}

				if (vm.indicator.gender) {
					if ($state.params.gender != "all") {
						vm.gender = $state.params.gender;
						for (var i = 0; i < vm.indicator.gender.length; i++) {
							if (vm.indicator.gender[i].gender == $state.params.gender) {
								vm.activeGender = i;
							}
						}
					} else if (!vm.activeGender) {
						vm.activeGender = 0;
					}
				} else if (!vm.activeGender) {
					vm.activeGender = 0;
				}
				getData(vm.year, vm.gender);
			});
		}

		function resetRange() {
			vm.range = {
				max: -100000000,
				min: 100000000
			};
		}

		function goInfoState() {

			if ($state.current.name == 'app.index.indicator') {
				$state.go('app.index.indicator.info');
			} else {
				$state.go('app.index.indicator');
			}

		}

		function getRank(country) {
			var rank = vm.data.indexOf(country) + 1;
			return rank;
		}

		function getOffset() {
			if (!vm.current) {
				return 0;
			}
			//console.log(vm.getRank(vm.current));
			return (vm.getRank(vm.current) - 2) * 17;
		};

		function setCurrent(nat) {
			vm.current = nat;
			setSelectedFeature();
		};

		function setSelectedFeature() {
			$state.go('app.index.indicator', {
				iso: vm.current.iso,
			});
			$timeout(function(){
					getHistory();
			});

		};

		function countryClick(evt, t) {
			var c = VectorlayerService.getNationByIso(evt.feature.properties[VectorlayerService.data.iso2]);
			if (typeof c.score != "undefined") {
				vm.current = c;
				setSelectedFeature();
			} else {
				toastr.error('No info about this location!');
			}
		}

		function getHistory() {
			ContentService.getIndicatorHistory(vm.indicator.id, vm.current.iso, vm.gender).then(function(data) {
				vm.historyData = data;
			})
		}

		function setYear(year) {
			vm.year = year;
			$timeout(function() {
				$state.go('app.index.indicator', {
					year: year,
				});
			}, 250);

		}

		function setGender(gender) {
			vm.gender = gender || 'all';
			$timeout(function() {
				$state.go('app.index.indicator', {
					gender: vm.gender
				});
			}, 250);
		}

		function getData(year, gender) {
			ContentService.getIndicatorData(vm.indicator.id, vm.year, vm.gender).then(function(dat) {
				resetRange();
				vm.data = dat;
				var iso = null;
				if ($state.params.iso) {
					for (var i = 0; i < vm.data.length; i++) {
						if (vm.data[i].iso == $state.params.iso) {
							vm.current = vm.data[i];
							iso = vm.current.iso;
							//setSelectedFeature();
						}
					}
				}
				angular.forEach(vm.data, function(item) {
					item.rank = vm.data.indexOf(item) + 1;
					if (vm.current) {
						if (item.iso == vm.current.iso) {
							setCurrent(item);
						}
					}
					vm.range.max = d3.max([vm.range.max, parseFloat(item.score)]);
					vm.range.min = d3.min([vm.range.min, parseFloat(item.score)]);
				});

				vm.circleOptions = {
					color: vm.indicator.styled.base_color || '#00ccaa',
					field: 'rank',
					size: vm.data.length
				};

				getOffset();
				vm.linearScale = d3.scale.linear().domain([vm.range.min, vm.range.max]).range([0, 256]);
				VectorlayerService.setData(vm.data, vm.indicator.styled.base_color, true);
				//VectorlayerService.paintCountries(countriesStyle, countryClick);
			});


		}

		function countriesStyle(feature) {
			var style = {};
			var iso = feature.properties[VectorlayerService.data.iso2];
			var nation = VectorlayerService.getNationByIso(iso);

			var field = 'score';
			var type = feature.type;
			feature.selected = false;
			if (vm.current) {
				if (vm.current.iso == iso) {
					feature.selected = true;
				}
			}



			switch (type) {
				case 3: //'Polygon'
					if (typeof nation[field] != "undefined" && nation[field] != null) {

						var colorPos = parseInt(vm.linearScale(parseFloat(nation[field]))) * 4; // parseInt(256 / vm.range.max * parseInt(nation[field])) * 4;
						var color = 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',' + VectorlayerService.palette[colorPos + 3] + ')';
						style.color = 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',0.6)'; //color;
						style.outline = {
							color: color,
							size: 1
						};
						style.selected = {
							color: 'rgba(' + VectorlayerService.palette[colorPos] + ', ' + VectorlayerService.palette[colorPos + 1] + ', ' + VectorlayerService.palette[colorPos + 2] + ',0.3)',
							outline: {
								color: 'rgba(66,66,66,0.9)',
								size: 2
							}
						};

					} else {
						style.color = 'rgba(255,255,255,0)';
						style.outline = {
							color: 'rgba(255,255,255,0)',
							size: 1
						};

					}
					break;
			}
			return style;
		};


		vm.uiOnParamsChanged = function(changedParams, $transition$) {
			//console.log(changedParams);
			getData(vm.year, vm.gender);
		}

	}]);
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndicatorYearTableCtrl', ["$filter", "data", function ($filter, data) {
		//
		var vm = this;
    vm.data = data;
    vm.onOrderChange = onOrderChange;
		vm.onPaginationChange = onPaginationChange;

    function onOrderChange(order) {
			return vm.data = $filter('orderBy')(vm.data, [order], true)
		};

		function onPaginationChange(page, limit) {
			//console.log(page, limit);
			//return $nutrition.desserts.get($scope.query, success).$promise;
		};


  }]);
})();

(function(){
    "use strict";
// remove app/login view
    angular.module('app.controllers').controller('LoginCtrl', ["$rootScope", "$state", "$auth", "toastr", function($rootScope, $state, $auth, toastr){
        var vm = this;
        vm.prevState = null;
        vm.doLogin = doLogin;
        vm.checkLoggedIn = checkLoggedIn;

        vm.user = {
          email:'',
          password:''
        };

        activate();

        function activate(){
          vm.checkLoggedIn();
        }

        function checkLoggedIn(){

          if($auth.isAuthenticated()){
            //$state.go('app.index.show', {index:'epi'});
          }
        }
        function doLogin(){
          $auth.login(vm.user).then(function(response){
            toastr.success('You have successfully signed in');
            console.log($rootScope.previousPage);
            $state.go($rootScope.previousPage.state.name || 'app.home', $rootScope.previousPage.params);
          }).catch(function(response){
            toastr.error('Please check your email and password', 'Something went wrong');
          })
        }
    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('LogoCtrl', function(){
        //
    });

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('MapCtrl', ["$scope", "$rootScope", "$mdMenu", "$state", "VectorlayerService", function($scope, $rootScope, $mdMenu, $state, VectorlayerService) {
		//


		var vm = this;
		mapboxgl.accessToken = VectorlayerService.keys.mapbox;
		vm.VectorlayerService = VectorlayerService;
		vm.VectorlayerService.createMap();

		
	}]);
})();

// remove app/selected view
(function(){
    "use strict";

    angular.module('app.controllers').controller('SelectedCtrl', ["$scope", "getCountry", "VectorlayerService", "$filter", function($scope, getCountry, VectorlayerService, $filter){
        //
        var vm = this;
        vm.structure = $scope.$parent.vm.structure;
        vm.display = $scope.$parent.vm.display;
        vm.data = $scope.$parent.vm.data;
        vm.current = getCountry;
        vm.mvtSource = VectorlayerService.getLayer();
        vm.getRank = getRank;
        vm.getOffset = getOffset;
        vm.getTendency = getTendency;

        function calcRank() {
          var rank = 0;
          angular.forEach(vm.data, function(item) {
            item[vm.structure.score_field_name] = parseFloat(item[vm.structure.score_field_name]);
            item['score'] = parseInt(item['score']);
          })
          var filter = $filter('orderBy')(vm.data, [vm.structure.score_field_name, "score"], true);
          for (var i = 0; i < filter.length; i++) {
            if (filter[i].iso == vm.current.iso) {
              rank = i + 1;
            }
          }
          vm.current[vm.structure.score_field_name+'_rank'] = rank;
          vm.circleOptions = {
              color:vm.structure.color,
              field:vm.structure.score_field_name+'_rank'
          }
        }
        function getRank(country){
          var filter = $filter('orderBy')(vm.data, [vm.structure.score_field_name, "score"], true);
          var rank = 0;
          angular.forEach(filter, function(item, key){
            if(item.country == country.country){
              rank = key;
            }
          });
          return rank+1;
        }
        function getOffset() {
    			if (!vm.current) {
    				return 0;
    			}
    			return (vm.getRank(vm.current) - 2) * 16;
    		};

    		function getTendency() {
    			if (!vm.current) {
    				return 'arrow_drop_down'
    			}
    			return vm.current.percent_change > 0 ? 'arrow_drop_up' : 'arrow_drop_down';
    		};

        $scope.$watch('vm.current', function (n, o) {
          if (n === o) {
            return;
          }

            if(o.iso){
              vm.mvtSource.layers.countries_big_geom.features[o.iso].selected = false;
            }
            calcRank();
            fetchNationData(n.iso);


        });
        /*;*/
    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('SidemenuCtrl', function(){
        //
    });

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('SignupCtrl', function(){
        //
    });

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('UnsupportedBrowserCtrl', function(){
        //
    });

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('UserCtrl', function(){
        //
    });

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('AddProviderCtrl', ["$scope", "DialogService", "DataService", function($scope, DialogService, DataService){
        var vm = this;
        vm.dataprovider = {};
        vm.dataprovider.title = $scope.$parent.vm.searchText;

        vm.save = function(){
            //
            DataService.post('/dataproviders', vm.dataprovider).then(function(data){
              $scope.$parent.vm.dataproviders.push(data);
              $scope.$parent.vm.item.dataprovider = data;
              DialogService.hide();
            });

        };

        vm.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('AddUnitCtrl', ["$scope", "DataService", "DialogService", function($scope, DataService,DialogService){

      var vm = this;
      vm.unit = {};
      vm.unit.title = $scope.$parent.vm.searchUnit;

      vm.save = function(){
          //
          DataService.post('/measure_types', vm.unit).then(function(data){
            $scope.$parent.vm.measureTypes.push(data);
            $scope.$parent.vm.item.type = data;
            DialogService.hide();
          });

      };

      vm.hide = function(){
        DialogService.hide();
      };


    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('AddYearCtrl', ["$scope", "DialogService", function($scope, DialogService){

        $scope.save = function(){
            console.log($scope.vm);
            $scope.vm.saveData();
            DialogService.hide();
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('AddUsersCtrl', ["$scope", "DialogService", function($scope, DialogService){

        $scope.save = function(){
	        //do something useful
            DialogService.hide();
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('ConflictmethodeCtrl', ["$scope", "DialogService", function($scope, DialogService){

        $scope.save = function(){
            //
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('ConflicttextCtrl', ["$scope", "DialogService", function($scope, DialogService){
  

        $scope.save = function(){
            //
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('CopyproviderCtrl', ["$scope", "IndexService", "DialogService", function ($scope, IndexService, DialogService) {
		$scope.$parent.vm.askedToReplicate = true;
		$scope.$parent.vm.doProviders = true;
		$scope.$parent.vm.doStyle = true;
		$scope.$parent.vm.doCategories = true;
		$scope.$parent.vm.doMeasures = true;
		$scope.$parent.vm.doPublic = true;
		$scope.save = function () {

			angular.forEach($scope.$parent.vm.data[0].data, function (data, key) {
				if (key != "year") {
					if (typeof IndexService.getIndicator(key) == "undefined") {
						IndexService.setIndicator(key, {
							column_name: key,
							title: key
						});
					}
					var item = IndexService.getIndicator(key);
					if ($scope.$parent.vm.doProviders) {
						item.dataprovider = $scope.$parent.vm.preProvider;
					}
					if ($scope.$parent.vm.doMeasures) {
						item.type = $scope.$parent.vm.preType;
					}
					if ($scope.$parent.vm.doCategories) {
						item.categories = $scope.$parent.vm.preCategories;
					}
					if ($scope.$parent.vm.doPublic) {
						item.is_public = $scope.$parent.vm.prePublic;
					}
					if ($scope.$parent.vm.doStyle) {

						if (typeof item.style != "undefined") {
							item.style = $scope.$parent.vm.preStyle;
							item.style_id = $scope.$parent.vm.preStyle.id;
						}

					}
				}
			});
			DialogService.hide();
			IndexService.setToLocalStorage();

		};

		$scope.hide = function () {
			$scope.$parent.vm.doProviders = false;
			$scope.$parent.vm.doCategories = false;
			$scope.$parent.vm.doMeasures = false;
			DialogService.hide();
		};

	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('EditcolumnCtrl', ["$scope", "DialogService", function($scope, DialogService){
        $scope.name = $scope.$parent.vm.toEdit;
        if(typeof $scope.$parent.vm.meta.table[$scope.name] == "undefined"){
          $scope.$parent.vm.meta.table[$scope.name] = {};
        }
        else{
          if($scope.$parent.vm.meta.table[$scope.name].title){
            $scope.title = $scope.$parent.vm.meta.table[$scope.name].title;
          }
          if($scope.$parent.vm.meta.table[$scope.name].description){
            $scope.description = $scope.$parent.vm.meta.table[$scope.name].description;
          }
        }

        $scope.save = function(){
          $scope.$parent.vm.meta.table[$scope.name].title = $scope.title;
          $scope.$parent.vm.meta.table[$scope.name].description = $scope.description;
          DialogService.hide();
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('EditrowCtrl', ["$scope", "DialogService", function($scope, DialogService){
        $scope.data = $scope.$parent.vm.selected[0];
        $scope.save = function(){
            //
            DialogService.hide();
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('EmbedcodeCtrl', ["$scope", "$sce", "DialogService", function($scope, $sce, DialogService) {
		$scope.vm.url = $sce.trustAsResourceUrl('https://dev.23degree.org/#/export/' + $scope.vm.item.id + '/' + $scope.vm.item.name);
		$scope.save = function() {
			//
			console.log($scope.vm);
		};

		$scope.hide = function() {
			DialogService.hide();
		};

	}]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('ExportDialogCtrl', ["$scope", "DialogService", function($scope, DialogService){

        console.log($scope);
        $scope.hide = function(){

        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('ExportdataCtrl', ["$scope", "DialogService", function($scope, DialogService){

        $scope.save = function(){
            //
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('ExtendDataCtrl', ["$scope", "$state", "DialogService", function($scope,$state, DialogService){

        $scope.save = function(){
            $scope.vm.doExtend = true;
            $scope.vm.meta.iso_field = $scope.vm.addDataTo.iso_name;
            $scope.vm.meta.country_field = $scope.vm.addDataTo.country_name;
            $state.go('app.index.check');
          	DialogService.hide();
        };

        $scope.hide = function(){
          $state.go('app.index.check');
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('GradientLabelsCtrl', ["$scope", "DialogService", function($scope, DialogService){

        $scope.save = function(){
            //
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function(){
    "use strict";

    angular.module('app.controllers').controller('LoosedataCtrl', ["$scope", "$state", "DialogService", function($scope, $state, DialogService){

        $scope.save = function(){
            //
            $scope.vm.deleteData();
            $state.go($scope.toState.name);
            DialogService.hide();
        };

        $scope.hide = function(){
        	DialogService.hide();
        };

    }]);

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('SelectisofetchersCtrl', ["$scope", "IndexService", "DialogService", function ($scope, IndexService, DialogService) {
		var vm = this;
		var meta = IndexService.getMeta();
		vm.iso = meta.iso_field;
		vm.list = IndexService.getToSelect();
		vm.save = function () {
			DialogService.hide();
		};

		vm.hide = function () {
			DialogService.hide();
		};
		$scope.$watch('vm.list', function (n, o) {
			if (n === o) {
				return;
			}
			angular.forEach(n, function (item, key) {
				if (item.entry.data[0][vm.iso]) {
					angular.forEach(item.entry.errors, function (error, e) {
						if (error.type == 2 || error.type == 3) {
							IndexService.reduceIsoError();
							item.entry.errors.splice(e, 1);
						} else if (error.type == 1) {
							if (error.column == vm.iso) {
								IndexService.reduceError();
								item.entry.errors.splice(e, 1);
							}
						}
					});
					vm.list.splice(key, 1);
				}
			});
			if (vm.list.length == 0) {
				DialogService.hide();
			}
		}, true);
	}]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'autoFocus', ["$timeout", function($timeout) {
		return {
        restrict: 'AC',
        link: function(_scope, _element) {
            $timeout(function(){
                _element[0].focus();
            }, 0);
        }
    };

	}]);

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('BarsCtrl', function () {
		//
		var vm = this;
		vm.width = width;

		function width(item) {
			if(!vm.data) return;
			return vm.data[item.name];
		}
	});

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'bars', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/bars/bars.html',
			controller: 'BarsCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				data: '=',
				options: '=',
				structure: '='
			},
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('BasemapCtrl', function() {
		//

		var vm = this;
		vm.original = angular.copy(vm.item);
		vm.containsSpecial = containsSpecial;
		vm.baseOptions = {
			drag: false,
			allowDrop: false,
			allowDrag: false,
			allowMove: false,
			allowDelete: false,
			allowAddContainer: false,
			allowAdd: false,
			allowSave: true,
			editable: false,
			assigments: false,
			saveClick: vm.options.save,
			deleteClick: vm.options.deleteClick
		};

		function containsSpecial(type) {
			var found = false;
			if(typeof vm.item.url == "undefined"){
				return false;
			}
			if (typeof type == 'object') {
				angular.forEach(type, function(t) {
					if (vm.item.url.indexOf(t) > -1) {
						found = true;
					}
				});
			} else {
				if (vm.item.url.indexOf(type) > -1) {
					found = true;
				}
			}
			return found;
		}
	});

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'basemap', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/basemap/basemap.html',
			controller: 'BasemapCtrl',
			controllerAs: 'vm',
			scope:{
				item: '=',
				options: '='
			},
			bindToController: true,
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'BasemapSelectorCtrl', ["BasemapsService", "VectorlayerService", function(BasemapsService, VectorlayerService){
		//
			var vm = this;
			vm.basemaps = [];
			vm.selected = {};
			vm.setMap = setMap;
			vm.viewTiles = viewTiles;
			vm.defaults = {
				scrollWheelZoom: false,
				minZoom: 1,
				maxZoom: 8,
				zoomControl: false,
			};
			vm.center = VectorlayerService.center;
			vm.maxbounds = VectorlayerService.maxbounds;

			activate();

			function activate(){
				if(!vm.style){
					vm.style = {
						basemap_id:0
					}
				}
				BasemapsService.getBasemaps(function(response){
					vm.basemaps = response;
					if(vm.style.basemap_id != 0){
						angular.forEach(vm.basemaps, function(map, key){
							if(map.id == vm.style.basemap_id){
								vm.selected = map;
							}
						})
					}
				});
			}

			function setMap(map){
				vm.selected = map;
				vm.style.basemap_id = map.id;
				vm.style.basemap = map;
			}
			function viewTiles(map){
				return {
					url:map.url,
					attribution:map.attribution,
					type:'xyz'
				}
			}

    }]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'basemapSelector', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/basemapSelector/basemapSelector.html',
			controller: 'BasemapSelectorCtrl',
			controllerAs: 'vm',
			scope:{
				style: '=ngModel',
			},
			bindToController: true,
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'BubblesCtrl', function(){
		//

  });

})();

(function () {
	"use strict";

	function CustomTooltip(tooltipId, width) {
		var tooltipId = tooltipId;
		var elem = document.getElementById(tooltipId);
		if(elem == null){
			angular.element(document).find('body').append("<div class='tooltip md-whiteframe-z3' id='" + tooltipId + "'></div>");
		}
		hideTooltip();
		function showTooltip(content, data, event, element) {
			angular.element(document.querySelector('#' + tooltipId)).html(content);
			angular.element(document.querySelector('#' + tooltipId)).css('display', 'block');

			return updatePosition(event, data, element);
		}
		function hideTooltip() {
			angular.element(document.querySelector('#' + tooltipId)).css('display', 'none');
		}
		function updatePosition(event, d, element) {
			var ttid = "#" + tooltipId;
			var xOffset = 20;
			var yOffset = 10;
			var svg = element.find('svg')[0];//document.querySelector('#svg_vis');
			var wscrY = window.scrollY;
			var ttw = angular.element(document.querySelector(ttid)).offsetWidth;
			var tth = document.querySelector(ttid).offsetHeight;
			var tttop = svg.getBoundingClientRect().top + d.y - tth / 2;
			var ttleft = svg.getBoundingClientRect().left + d.x + d.radius + 12;
			return angular.element(document.querySelector(ttid)).css('top', tttop + 'px').css('left', ttleft + 'px');
		}
		return {
			showTooltip: showTooltip,
			hideTooltip: hideTooltip,
			updatePosition: updatePosition
		}
	}
	angular.module('app.directives').directive('bubbles', ["$compile", "IconsService", function ($compile, IconsService) {
		var defaults;
		defaults = function () {
			return {
				width: 300,
				height: 300,
				layout_gravity: 0,
				sizefactor:3,
				vis: null,
				force: null,
				damper: 0.085,
				circles: null,
				borders: true,
				labels: true,
				fill_color: d3.scale.ordinal().domain(["eh", "ev"]).range(["#a31031", "#beccae"]),
				max_amount: '',
				radius_scale: '',
				duration: 1000,
				tooltip: CustomTooltip("bubbles_tooltip", 240)
			};
		};
		return {
			restrict: 'E',
			scope: {
				chartdata: '=',
				direction: '=',
				gravity: '=',
				sizefactor: '=',
				indexer: '=',
				borders: '@'
			},
			require: 'ngModel',
			link: function (scope, elem, attrs, ngModel) {
				var options = angular.extend(defaults(), attrs);
				var nodes = [],
					links = [],
					labels = [],
					groups = [];

				var max_amount = d3.max(scope.chartdata, function (d) {
					return parseFloat(d.value);
				});
				//options.height = options.width * 1.1;
				options.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 85]);
				options.center = {
					x: options.width / 2,
					y: options.height / 2
				};
				options.cat_centers = {};

				var create_nodes = function () {
					if(scope.indexer.children.length == 2 && scope.indexer.children[0].children.length > 0){
						angular.forEach(scope.indexer.children, function (group, index) {
							var mColor = group.color;
							if(group.style_id != 0){
								mColor = group.style.base_color;
							}

							var d = {
								type: group.name,
								name: group.title,
								group: group.name,
								color: mColor,
								icon: group.icon,
								unicode: IconsService.getUnicode(group.icon),
								data: group,
								children:group.children
							};
							labels.push(d);
							angular.forEach(group.children, function (item) {
								if (scope.chartdata[item.name]) {
									var color = item.color;
									if(item.style_id != 0){
										color = item.style.base_color;
									}
									else if(group.style_id != 0){
										color = group.style.base_color;
									}
									var node = {
										type: item.name,
										radius: scope.chartdata[item.name] / scope.sizefactor,
										value: scope.chartdata[item.name],
										name: item.title,
										group: group.name,
										x: options.center.x,
										y: options.center.y,
										color: color,
										icon: item.icon,
										unicode: IconsService.getUnicode(item.icon),
										data: item,
										children:item
									};
									nodes.push(node);
								}
							});
						});
						create_groups();

					}
					else{

						var d = {
							type: scope.indexer.name,
							name: scope.indexer.title,
							group: scope.indexer.name,
							color: scope.indexer.style.base_color || scope.indexer.color,
							icon: scope.indexer.icon,
							unicode: scope.indexer.unicode,
							data: scope.indexer.data,
							children: scope.indexer.children
						};
						labels.push(d);
						angular.forEach(scope.indexer.children, function (item) {
							if (scope.chartdata[item.name]) {

								var node = {
									type: item.name,
									radius: scope.chartdata[item.name] / scope.sizefactor,
									value: scope.chartdata[item.name] / scope.sizefactor,
									name: item.title,
									group: scope.indexer.name,
									x: options.center.x,
									y: options.center.y,
									color: item.color,
									icon: item.icon,
									unicode: IconsService.getUnicode(item.icon),
									data: item,
									children:item
								};
								nodes.push(node);
							}
						});
					}
				};
				var clear_nodes = function(){
					nodes = [];
					labels = [];
				}
				var create_groups = function(){
					angular.forEach(nodes, function(node, key){
							options.cat_centers[node.group] = {
								x: options.width / 2,
								y: options.height / 2 + (1 - key),
								damper: 0.085,
							};
					});
				};
				var create_vis = function () {
					angular.element(elem).html('');
					options.vis = d3.select(elem[0]).append("svg").attr("width", options.width).attr("height", options.height).attr("id", "svg_vis");

					if (!options.borders) {
						var pi = Math.PI;
						if(labels.length == 2){
							var arcTop = d3.svg.arc()
								.innerRadius(109)
								.outerRadius(110)
								.startAngle(-90 * (pi / 180)) //converting from degs to radians
								.endAngle(90 * (pi / 180)); //just radians
							var arcBottom = d3.svg.arc()
								.innerRadius(134)
								.outerRadius(135)
								.startAngle(90 * (pi / 180)) //converting from degs to radians
								.endAngle(270 * (pi / 180)); //just radians

							options.arcTop = options.vis.append("path")
								.attr("d", arcTop)
								.attr("fill", function(d){
									return labels[0].color || "#be5f00";
								})
								.attr("id", "arcTop")
								.attr("transform", "translate("+(options.width/2)+","+(options.height/2 - options.height/12)+")");
							options.arcBottom = options.vis.append("path")
								.attr("d", arcBottom)
								.attr("id", "arcBottom")
								.attr("fill", function(d){
									return labels[1].color || "#006bb6";
								} )
								.attr("transform", "translate("+(options.width/2)+","+(options.height/2)+")");
						}
						else{
							var arc = d3.svg.arc()
								.innerRadius(options.width/3 - 1)
								.outerRadius(options.width/3)
								.startAngle(0 * (pi / 180)) //converting from degs to radians
								.endAngle(360 * (pi / 180)); //just radians


							options.arc = options.vis.append("path")
								.attr("d", arc)
								.attr("fill", labels[0].color)
								.attr("id", "arcTop")
								.attr("transform", "translate("+(options.width/2)+","+(options.height/2)+")");

						}
					}
				if(options.labels == true && labels.length == 2){
						var textLabels = options.vis.selectAll('text.labels').data(labels).enter().append("text")
							.attr('class', 'labels')
							.attr('fill', function(d){
								return d.color;
							})
						/*	.attr('transform', function(d){
								var index = labels.indexOf(d);
								if(index > 0){
									return 'rotate(90, 100, 100)';
								}
							})*/
							.attr('x', "50%")
							.style('font-size', '1.2em')
							.style('cursor', 'pointer')

							.attr('width', options.width)
							.attr('text-anchor', 'middle')
							.on('click', function(d){
								ngModel.$setViewValue(d.data);
								ngModel.$render();
							})
							.attr("y", function(d){
								var index = labels.indexOf(d);
								if(index == 0){
									return 15;
								}
								else{
									return options.height - 6;
								}
							})
							.text(function(d){
								return d.name;
							})

					}
					options.containers = options.vis.selectAll('g.node').data(nodes).enter().append('g').attr('transform', 'translate(' + (options.width / 2) + ',' + (options.height / 2) + ')').attr('class', 'node');

					/*options.circles = options.containers.selectAll("circle").data(nodes, function (d) {
						return d.id;
					});*/

					options.circles = options.containers.append("circle").attr("r", 0).attr("fill", (function (d) {
						return d.color || options.fill_color(d.group);
					})).attr("stroke-width", 0).attr("stroke", function (d) {
						return d3.rgb(options.fill_color(d.group)).darker();
					}).attr("id", function (d) {

						return "bubble_" + d.type;
					});
					options.icons = options.containers.append("text")
						.attr('font-family', 'EPI')
						.attr('font-size', function (d) {

						})
						.attr("text-anchor", "middle")
						.attr('fill', function(d){
							return d.unicode ? '#fff' : d.color;
						})
						.style('opacity', function(d){
							if(d.unicode){
								return 1;
							}
							else{
								return 0;
							}
						})
						.text(function (d) {
							return d.unicode || '1'
						});
					options.icons.on("mouseover", function (d, i) {

						return show_details(d, i, this);
					}).on("mouseout", function (d, i) {
						return hide_details(d, i, this);
					}).on("click", function (d, i) {

						ngModel.$setViewValue(d.data);
						ngModel.$render();
					});
					options.circles.transition().duration(options.duration).attr("r", function (d) {
						return d.radius;
					});
					options.icons.transition().duration(options.duration).attr("font-size", function (d) {
						return d.radius * 1.75 + 'px';
					}).attr('y', function (d) {
						return d.radius * .75 + 'px';
					});
				};
				var update_vis = function () {

					nodes.forEach(function (d, i) {
						options.circles.transition().duration(options.duration).delay(i * options.duration)
							.attr("r", function (d) {
								d.radius = d.value = scope.chartdata[d.type] / scope.sizefactor;
								return scope.chartdata[d.type] / scope.sizefactor;
							});
						options.icons.transition().duration(options.duration).delay(i * options.duration)
							.attr("font-size", function (d) {
								return (scope.chartdata[d.type] / scope.sizefactor) * 1.75 + 'px'
							})
							.attr('y', function (d) {
								return (scope.chartdata[d.type] / scope.sizefactor) * .75 + 'px';
							})
					});
				};
				var charge = function (d) {
					return -Math.pow(d.radius, 2.0) / 4;
				};
				var start = function () {
					return options.force = d3.layout.force().nodes(nodes).size([options.width, options.height]).links(links);
				};
				var display_group_all = function () {
					options.force.gravity(options.layout_gravity).charge(charge).friction(0.85).on("tick", function (e) {
						options.containers.each(move_towards_center(e.alpha)).attr("transform", function (d) {
							return 'translate(' + d.x + ',' + d.y + ')';
						});
					});
					options.force.start();
				};
				var display_by_cat = function () {
					options.force.gravity(options.layout_gravity).charge(charge).friction(0.9).on("tick", function (e) {
						options.containers.each(move_towards_cat(e.alpha)).attr("transform", function (d) {
							return 'translate(' + d.x + ',' + d.y + ')';
						});
					});
					options.force.start();
				};
				var move_towards_center = function (alpha) {
					return (function (_this) {
						return function (d) {
							d.x = d.x + (options.width/2 - d.x) * (options.damper + 0.02) * alpha *1.25;
							d.y = d.y + (options.height/2 - d.y) * (options.damper + 0.02) * alpha * 1.25;
						}
					})(this);
				};
				var move_towards_top = function (alpha) {
					return (function (_this) {
						return function (d) {
							d.x = d.x + (options.center.x - d.x) * (options.damper + 0.02) * alpha * 1.1;
							d.y = d.y + (200 - d.y) * (options.damper + 0.02) * alpha * 1.1;
						}
					})(this);
				};
				var move_towards_cat = function (alpha) {
					return (function (_this) {
						return function (d) {

							var target;
							target = options.cat_centers[d.group];
							d.x = d.x + (target.x - d.x) * (target.damper + 0.02) * alpha * 1;
							return d.y = d.y + (target.y - d.y) * (target.damper + 0.02) * alpha * 1;
						}
					})(this);
				};
				var show_details = function (data, i, element) {
					var content;
					var	barOptions = {
						titled:true
					};
					content = '<md-progress-linear md-mode="determinate" value="'+data.value+'"></md-progress-linear>'
					content += "<span class=\"title\">"+ data.name + "</span><br/>";
					angular.forEach(data.data.children, function (info) {
						if(scope.chartdata[info.name] > 0 ){
							content += '<div class="sub">';
							content += '<md-progress-linear md-mode="determinate" value="'+scope.chartdata[info.name]+'"></md-progress-linear>'
							content += "<span class=\"name\" style=\"color:" + (info.color || data.color) + "\"> "+scope.chartdata[info.name]+' - ' + (info.title) + "</span><br/>";
							content += '</div>';
						}

					});
					//content = '<bars options="barOptions" structure="data.data.children" data="data"></bars>';

					$compile(options.tooltip.showTooltip(content, data, d3.event, elem).contents())(scope);
				};

				var hide_details = function (data, i, element) {
					return options.tooltip.hideTooltip();
				};

				scope.$watch('chartdata', function (data, oldData) {
					options.tooltip.hideTooltip();

					if (options.circles == null) {
						create_nodes();
						create_vis();
						start();
					} else {
						update_vis();
					}
					if(labels.length == 1 || options.labels != true){
							display_group_all();
					}
					else{
							display_by_cat();
					}

				});
				scope.$watch('indexer', function (n, o) {
					if(n === o){
						return
					}
					if(typeof n[0].children != "undefined"){
						options.tooltip.hideTooltip();
						clear_nodes();
						create_nodes();
						create_vis();
						start();

						if(labels.length == 1 || options.labels != true){
								display_group_all();
								//console.log('all');
						}
						else{
								//display_by_cat();
								display_group_all();
								//console.log('all');
						}
					}
				});
				scope.$watch('direction', function (oldD, newD) {
					if (oldD === newD) {
						return;
					}
					if (oldD == "all") {
						display_group_all();
					} else {
						display_by_cat();
					}
				})
			}
		};
	}]);
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('CategoriesCtrl', ["$filter", "toastr", "DataService", function ($filter, toastr, DataService) {
		//
		var vm = this;
		vm.catOptions = {
			abort: function(){
				vm.createCategory = false;
			},
			postDone:function(category){
				vm.createCategory = false;
			}
		}

	}]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'categories', function() {

		return {
			restrict: 'E',
			templateUrl: 'views/directives/categories/categories.html',
			controller: 'CategoriesCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				item: '=',
				categories: '=',
				options:'=',
				save: '&'
			},
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'CategoryCtrl', ["$scope", "$filter", "toastr", "DataService", "ContentService", function($scope, $filter, toastr, DataService, ContentService){
		//
		var vm = this;

		vm.saveCategory = saveCategory;
		vm.querySearchCategory = querySearchCategory;
		vm.parentChanged = parentChanged;
		vm.checkBase = checkBase;
		vm.styles = ContentService.getStyles();
		vm.flattened = [];
		vm.copy = {};
		activate();

		function activate(){
			flattenWithChildren(vm.categories);
			if(vm.item.parent_id){
				vm.parent = getParent(vm.item, vm.categories);
				vm.copy = angular.copy(vm.item);
			}
		}
		function flattenWithChildren(list){
			angular.forEach(list, function(item){
				vm.flattened.push(item);
				if(item.children){
					flattenWithChildren(item.children)
				}
			})
		}
		function querySearchCategory(query) {
			return $filter('findbyname')($filter('orderBy')(vm.flattened, 'title'), query, 'title');
			//return $filter('findbyname')($filter('flatten')(vm.categories), query, 'title');
		}
		function checkBase(){
			if (vm.item.title && vm.item.title.length >= 3) {
				return true;
			}
			return false;
		}
		function parentChanged(item){
			if(typeof item == "undefined"){
				vm.item.parent_id = null;
				vm.item.parent = null;
				return false;
			}
			if(item.id == vm.item.id){
				toastr.error('The Parent cannot be the same', 'Invalid selection');
				return false;
			}
			vm.parent = item;
			vm.item.parent_id = item.id;
			vm.item.parent = item;
		}
		function getParent(item,list){
			var found = null
			angular.forEach(list, function(entry, key){
				if(entry.id == item.parent_id){
					found = entry;
				}
				if(entry.children && !found){
					var subresult = getParent(item, entry.children);
					if(subresult){
						found = subresult;
					}
				}
			});
			return found;
		}
		function moveItem(){
			if(vm.copy.parent_id){
					var oldParent = getParent(vm.copy, vm.categories);
					for(var i = 0; i < oldParent.children.length; i++ ){
						if(oldParent.children[i].id == vm.item.id){
							oldParent.children.splice(i,1);
						}
					}
			}
			else{
				for(var i = 0; i < vm.categories.length; i++ ){
					if(vm.categories[i].id == vm.item.id){
						vm.categories.splice(i,1);
					}
				}
			}
			if(vm.item.parent_id){
				var newParent = getParent(vm.item, vm.categories);
				newParent.children.push(vm.item);

			}
			else{
				vm.categories.push(vm.item);
			}
		}
		function successAction(data){
			console.log(vm.copy.parent_id, vm.item.parent_id);
			if(vm.copy.parent_id != vm.item.parent_id){
				//if(vm.copy.parent_id && vm.item.parent_id){
					moveItem();
			//	}
			}
			toastr.success('Category has been updated', 'Success');
			$scope.categoryForm.$setSubmitted();
			vm.copy = angular.copy(vm.item);
		}
		function saveCategory(valid) {
			if(valid){
				if(vm.item.id){
					if(vm.item.restangularized){
						vm.item.save().then(successAction);
					}
					else{
						DataService.update('categories', vm.item.id, vm.item).then(successAction);
					}

				}
				else{
					DataService.post('categories', vm.item).then(function (data) {
						if(data.parent_id ){
								 var parent = getParent(data, vm.categories);
								 if(!parent.children){
									 parent.children = [];
								 }
								 parent.children.push(data);
								 parent.expanded = true;
						}
						else{
							vm.categories.push(data);
						}
						toastr.success('New Category has been saved', 'Success');
						vm.options.postDone(data);
					});
				}

			}
		}
    }]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'category', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/category/category.html',
			controller: 'CategoryCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				item: '=',
				categories: '=',
				options:'=?',
				save: '&'
			},
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'CirclegraphCtrl', function(){
		//
    });

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('circlegraph', ["$timeout", function($timeout) {
		var defaults = function() {
			return {
				width: 80,
				height: 80,
				color: '#00ccaa',
				size: 178,
				field: 'rank'
			}
		}
		return {
			restrict: 'E',
			controller: 'CirclegraphCtrl',
			scope: {
				options: '=',
				item: '='
			},
			link: function($scope, element, $attrs) {
				//Fetching Options

				$scope.options = angular.extend(defaults(), $scope.options);
				var τ = 2 * Math.PI;
				//Creating the Scale
				var rotate = d3.scale.linear()
					.domain([1, $scope.options.size])
					.range([1, 0])
					.clamp(true);

				//Creating Elements
				var svg = d3.select(element[0]).append('svg')
					.attr('width', $scope.options.width)
					.attr('height', $scope.options.height)
					.append('g');

				var container = svg.append('g')
					.attr('transform', 'translate(' + $scope.options.width / 2 + ',' + $scope.options.height / 2 + ')')
					.style('font-size', function(){
						if($scope.options.fontSize){
							return $scope.options.fontSize+'px';
						}
						return "1em"
					})

				var circleBack = container.append('circle')
					.attr('r', $scope.options.width / 2 - 2)
					.attr('stroke-width', 2)
					.attr('stroke', $scope.options.color)
					.style('opacity', '0.6')
					.attr('fill', 'none');

				var arc = d3.svg.arc()
					.startAngle(0)
					.innerRadius(function(d) {
						return $scope.options.width / 2 - 4;
					})
					.outerRadius(function(d) {
						return $scope.options.width / 2;
					});

				var circleGraph = container.append('path')
					.datum({
						endAngle: 2 * Math.PI * 0
					})
					.style("fill", $scope.options.color)
					.attr('d', arc);
				var text = container.selectAll('text')
					.data([0])
					.enter()
					.append('text')
					.text(function(d) {
						if (!$scope.options.hideNumbering)
							return 'N°' + d;
						return d + '/' + $scope.options.size;
					})
					.style("fill", $scope.options.color)
					.style('font-weight', 'bold')
					.style('font-size', function() {
						//if(!$scope.options.hideNumbering)
						return '1em';
						//return '1.5em';
					})
					.attr('text-anchor', 'middle')
					.attr('y', function(d) {
						//if(!$scope.options.hideNumbering)
						return '0.35em';
						//return '0.37em'
					});

				//Transition if selection has changed
				function animateIt(radius) {
					circleBack.transition()
						.duration(750)
						.attr('stroke', $scope.options.color);


					circleGraph.transition()
						.duration(750)
						.style("fill", $scope.options.color)
						.call(arcTween, rotate(radius) * 2 * Math.PI);

					text.transition().duration(750).tween('text', function(d) {
						if (!$scope.options.hideNumbering) {
							var data = this.textContent.split('N°');
							var i = d3.interpolate(parseInt(data[1]), radius);
							return function(t) {
								this.textContent = 'N°' + (Math.round(i(t) * 1) / 1);
							};
						} else {
							var data = this.textContent.split('/');
							var i = d3.interpolate(parseInt(data[0]), radius);
							return function(t) {
								this.textContent = (Math.round(i(t) * 1) / 1) + "/" + $scope.options.size;
							};
						}
					}).style("fill", $scope.options.color)
				}

				//Tween animation for the Arc
				function arcTween(transition, newAngle) {
					transition.attrTween("d", function(d) {

						var interpolate = d3.interpolate(d.endAngle, newAngle);
						return function(t) {
							d.endAngle = interpolate(t);
							return arc(d);
						};
					});
				}

				/*$scope.$watch('options', function (n, o) {
					if (n === o) {
						return;
					}
					circleBack.style('stroke', n.color);
					circleGraph.style('fill', n.color);
					text.style('fill', n.color);
					$timeout(function () {
						animateIt($scope.item[n.field])
					});
				});*/

				//Watching if selection has changed from another UI element
				$scope.$watch('item', function(n, o) {
					//if(n === o) return;

					if (!n) {
						n[$scope.options.field] = $scope.options.size;
					}
					$timeout(function() {
						animateIt(n[$scope.options.field]);
					});
				});
				$scope.$watch('options', function(n, o) {
					if (n === o || !n) return;

					$timeout(function() {

						animateIt($scope.item[$scope.options.field]);
					});
				}, true);
			}
		};

	}]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ColorGradientCtrl', ["$scope", function($scope) {
		//
		var vm = this;
		vm.removeColor = removeColor;
		vm.active;
		vm.dragEvents = {
			dragMove : function (instance, event, pointer) {
        var percentage = 100  * instance.position.x / instance.containerSize.width;
				vm.active.pos = percentage;

    	},
			dragEnd : function (instance, event, pointer) {

			
    	}
		}

		function removeColor(idx) {
			vm.gradient.splice(idx, 1);
		}
	}]);

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('colorGradient', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/color-gradient/color-gradient.html',
			controller: 'ColorGradientCtrl',
			controllerAs: 'vm',
			scope: {},
			bindToController: {
				gradient: '='
			},
			link: function(scope, element, attrs) {
				//

				var width = element.parent()[0].clientWidth - 48;
				var height = 20;
				var svg = d3.select(element[0]).append('svg');
				svg.attr("width", width)
					.attr("height", height);
				var def = svg.append("defs");
				var gradCol = def.append("linearGradient")
					.attr("id", "gradient")
					.attr("x1", "0%")
					.attr("y1", "0%")
					.attr("x2", "100%")
					.attr("y2", "0%");

				var rect = svg.append("rect")
					.attr("width", width)
					.attr("height", height)
					.style("fill", "url(#gradient)");


				function drawGradient() {

					var gradient = gradCol.selectAll('stop')
						.data(scope.vm.gradient, function(d){
							return d.id
						});

					gradient
						.enter()
						.append("stop")
						.attr("offset", function(d) {
							console.log(d.pos);
							return d.pos + "%";
						})
						.style("stop-color", function(d) {
							return d.color
						});

					gradient.exit().remove();
				

				}

				scope.$watch('vm.gradient', function(n, o) {
					if (n === 0) return false;

					drawGradient();
				}, true);

				drawGradient();
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'ColorHandleCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive('colorHandle', ["$document", "$timeout", function($document, $timeout) {
    return function(scope, elem, attrs) {
      var beginDragging, container, getColorHandle, mousemoveListener;
			var dragging = false;
      container = elem.parent();
      getColorHandle = function() {
        return scope.$eval(attrs.colorHandle);
      };
      scope.$watch(attrs.colorHandle, function(ColorHandle, OldColorHandle) {
        var deleted, leftExtremePercent, rightExtremePercent;
        leftExtremePercent = -3.4;
        rightExtremePercent = 96.7;
        elem.css('left', leftExtremePercent + (ColorHandle.stop * (rightExtremePercent + Math.abs(leftExtremePercent))) + '%');
        if (ColorHandle.color !== null) {
          return elem.css('color', ColorHandle.color);
        } else {
          deleted = scope.vm.deleteColorHandle(ColorHandle);
          if (!deleted) {
            return ColorHandle.color = OldColorHandle.color;
          }
        }
      }, true);
      // scope.$watch('ActiveColorHandle', function(ActiveColorHandle) {
      //   var ThisColorHandle;
      //   ThisColorHandle = getColorHandle();
      //   elem.toggleClass('arrow_up_alt1', ActiveColorHandle === ThisColorHandle);
      //   return elem.toggleClass('arrow_up', ActiveColorHandle !== ThisColorHandle);
      // });
      mousemoveListener = null;
      elem.bind('mousedown',function(event) {
        var leftClicked;
        leftClicked = event.which === 1;
        if (leftClicked) {
          return beginDragging();
        }
      });
      beginDragging = function() {
        var ThisColorHandle;
        ThisColorHandle = getColorHandle();
        // scope.$apply(function() {
        //   return scope.setActiveColorHandle(ThisColorHandle);
        // });
        elem.addClass('dragging');
        if (!mousemoveListener) {
          return $document.bind('mousemove',mousemoveListener = function(event) {

            return scope.$apply(function() {

              ThisColorHandle.stop = (event.pageX - container[0].getBoundingClientRect().left) / container[0].clientWidth;
              if (ThisColorHandle.stop < 0) {
                return ThisColorHandle.stop = 0;
              } else if (ThisColorHandle.stop > 1) {
                return ThisColorHandle.stop = 1;
              }
            });
          });
        }
      };

      $document.bind('mouseup',function() {

        if (elem.hasClass('dragging')) {
          elem.removeClass('dragging');
        }
        if (mousemoveListener !== null) {
          $document.unbind('mousemove', mousemoveListener);
          return mousemoveListener = null;
        }
      });
      elem.bind('mouseup',function() {
        var rightClicked;
        rightClicked = event.which === 3;
        if (rightClicked) {
          return scope.$apply(function() {
            return scope.vm.deleteColorHandle(getColorHandle());
          });
        }
      });
      return $timeout(function() {
        var ThisColorHandle;
        ThisColorHandle = getColorHandle();
        // if (ThisColorHandle.forceDrag && scope.getMouseIsDown()) {
        //   ThisColorHandle.forceDrag = false;
        //   scope.setActiveColorHandle(ThisColorHandle);
        //   return beginDragging();
        // }
      });
    };
  }]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'CompareCtrl', function(){
		//
    });

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('compareCountries', ["$document", "$timeout", function($document, $timeout) {

		var defaults = function() {
			return {
				width: 350,
				height: 25,
				margin: 5,
				color: '#ff0000',
				field: 'score',
				duration: 500,
				min: 0,
				max: 100
			}
		};

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/compare/compare.html',
			controller: 'CompareCtrl',
			scope: {
				countries: '=',
				country: '=',
				options: '='
			},
			link: function(scope, element, attrs) {
				scope.options = angular.extend(defaults(), scope.options);
				scope.options.width = element[0].clientWidth - 20;
				var fontColor = '#333',
					bgColor = '#ddd';

				var xscale = d3.scale.linear()
					.domain([scope.options.min, scope.options.max])
					.range([0, (scope.options.width - 100 - (scope.options.margin * 2))]);

				var yscale = d3.scale.ordinal()
					.range([0, scope.options.height])
					.domain([0, scope.countries.length]);

				var svg = d3.select(element[0]).append('svg')
					.attr('width', scope.options.width)
					.attr('height', scope.options.height * scope.countries.length);

				var container = svg.append('g')
					.attr('id', 'compare-chart')
					.attr('y', scope.options.height)
					.attr('x', scope.options.margin);

				var xAxis = d3.svg.axis()
					.scale(xscale)
					.orient("top")
					.tickValues([scope.options.min, scope.options.max]);

				var lines = svg.append("g")
					.attr("class", "x axis")
				var nullLine = lines.append("line")
					.attr("class", "domain")
					.attr("y2", scope.options.height * scope.countries.length)

				var midLine = lines.append("line")
					.attr("class", "domain dashed")
					.attr('transform', function() {
						return "translate(" + (xscale(scope.options.max / 2)) + ",0)";
					})
					.attr("y2", scope.options.height * scope.countries.length)

				var endLine = lines.append("line")
					.attr("class", "domain")
					.attr('transform', function() {
						return "translate(" + (xscale(scope.options.max)) + ",0)";
					})
					.attr("y2", scope.options.height * scope.countries.length);
				var rankLabel = lines.append('text')
					.attr('class', 'header')
					.text('Rank')
					.attr('transform', function() {
						return "translate(-85,-10)";
					});

				var medianLabel = lines.append('text')
					.attr('class', 'header')
					.text('Median')
					.attr('transform', function() {
						return "translate(" + (scope.options.width / 2 - 75) + ",-10)";
					});

				var chart = container.append('g')
					.attr('id', 'bars')
					.attr("transform", "translate(100,0)");
				var labels = container.append('g')
					.attr('id', 'labels')
					.attr('width', scope.options.max);

				function updateData() {
					//var max = d3.max(data, function(d) { return +d.field_goal_attempts;} );
					svg.transition()
						.duration(scope.options.duration)
						.attr('height', (scope.options.height * (scope.countries.length)) + (scope.options.height * 2));
					yscale.domain([0, scope.countries.length]).range([0, scope.options.height * (scope.countries.length)]);



					d3.transition(svg).select(".x.axis")
						.call(xAxis)
						.attr("transform", "translate(100,20)");

					var bar = chart.selectAll('.bar')
						.data(scope.countries, function(d) {
							return "id_" + d.iso
						});

					var barsContainer = bar.enter().insert('g', '.axis')
						.attr('class', "bar");

					var rects = barsContainer.append('rect')
						.attr('height', (scope.options.height - scope.options.margin))
						.style('fill', bgColor)
						.attr('width', function(d) {
							return 0;
						});
					var ranks = barsContainer.append('text')
						.attr('class', 'ranks')
						.attr('transform', 'translate(-70, 0)')
						.text(function(d) {
							if (d.rank == 1) {
								return "1st";
							} else if (d.rank == 2) {
								return "2nd";
							}
							return d.rank + "th";
						})
						.attr('fill', scope.options.color)
						.attr('y', function(d) {
							return scope.options.margin * 3;
						})
					var labelsBg = barsContainer.append('rect')
						.attr('height', (scope.options.height - scope.options.margin))
						.style('fill', function(d) {
							if (d.iso == scope.country.iso) {
								return scope.options.color
							}
							return bgColor
						})
						.attr('width', function(d) {
							return scope.options.height;
						})
						.attr('x', -(scope.options.height + scope.options.margin));

					var labels = barsContainer.append('text')
						.attr('class', "label")
						.attr({
							'x': function(d, i) {
								return -17;
							},
							'y': function(d, i) {
								return scope.options.margin * 2;
							}
						})
						.style('font-size', '13px')
						.attr('dy', ".35em")
						.attr('text-anchor', 'middle')
						.text(function(d) {
							return d.iso
						}).attr('fill', function(d) {
							if (d.iso == scope.country.iso) {
								return "#fff"
							}
							return scope.options.color
						});

					var values = barsContainer.append("text")
						.attr("class", "value")
						.attr({
							'x': 0,
							'y': (scope.options.margin * 2)
						})
						.text(0)
						.style('fill', scope.options.color)
						.attr("dy", ".35em")
						.attr("text-anchor", "end");

					var circles = barsContainer.append('circle')
						.attr('r', 3)
						.attr('cx', 0)
						.attr('cy', ((scope.options.height / 2) - (scope.options.margin / 2)))
						.attr("fill", scope.options.color);

					var barUpdate = d3.transition(bar)
						.attr("transform", function(d, i) {
							return "translate(0," + (i * scope.options.height + (scope.options.margin / 2) + 20) + ")";
						});
					nullLine.transition()
						.duration(scope.options.duration)
						.attr('y2', scope.options.height * scope.countries.length)
					midLine.transition()
						.duration(scope.options.duration)
						.attr('y2', scope.options.height * scope.countries.length)
					endLine.transition()
						.duration(scope.options.duration)
						.attr('y2', scope.options.height * scope.countries.length)
					rects.transition()
						.duration(scope.options.duration)
						.attr('width', function(d) {
							return xscale(d[scope.options.field]);
						});

					circles.transition()
						.duration(scope.options.duration)
						.attr('cx', function(d) {
							return xscale(d[scope.options.field]);
						});

					values.transition()
						.duration(scope.options.duration)
						.attr({
							'x': function(d, i) {

								if (d[scope.options.field] > scope.options.max / 2) {
									return xscale(d[scope.options.field]) - this.getBoundingClientRect().width;
								}
								return xscale(d[scope.options.field]) + scope.options.height;
							}
						})
						.tween('text', function(d) {
							var i = d3.interpolate(this.textContent, parseInt(d[scope.options.field]));
							return function(t) {
								this.textContent = Math.round(i(t));
							};

						});

					bar.exit()
						.transition()
						.duration(scope.options.duration)
						.attr("opacity", "0")
						.remove();
				}
				function getMobileOperatingSystem() {
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;

  if( userAgent.match( /iPad/i ) || userAgent.match( /iPhone/i ) || userAgent.match( /iPod/i ) )
  {
    return 'iOS';

  }
  else if( userAgent.match( /Android/i ) )
  {

    return 'Android';
  }
  else
  {
    return 'unknown';
  }
}



				scope.$watch(function() {
					return scope.countries;
				}, function(n, o) {
					scope.countries = angular.extend(scope.countries, scope.country);
					updateData();
					$timeout(function(){
						var container = angular.element(document).find('md-sidenav').find('section');
						var map = angular.element(document.getElementById("map"));

						if (scope.countries.length  && window.innerWidth < 960) {
							var h = container[0].clientHeight;
							var os = getMobileOperatingSystem();
							var extra = 0, scroll = 0, extraMore = 0;
							if(os == "iOS"){
								extra = 5;
								extraMore = 35;
								scroll = 100;
							}
							if(h < window.innerHeight - 194){
								container.attr('style', 'transform:translateY(calc(100vh - ' + (parseInt(scope.countries.length * 24)) + 'px - 260px - '+(extra*scope.countries.length)+'px - '+extraMore+'px))')
									}
							else{
								container.attr('style', 'transform:translateY(calc(100vh - ' + (parseInt(window.innerHeight - 200)) + 'px - 40px - '+scroll+'px))')
							}
						} else {
							container.attr('style', '');

						}
					})
				}, true)
			}
		};

	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'CompositsCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'composits', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/composits/composits.html',
			controller: 'CompositsCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				items: '=',
				item: '=',
				options:'='
			},
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'ConflictitemsCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'conflictitems', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/conflictitems/conflictitems.html',
			controller: 'ConflictitemsCtrl',
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'ContenteditableCtrl', function(){
		//
    });

})();

(function () {
	"use strict";

	angular.module('app.directives').directive('contenteditable', function () {

		return {
			restrict: 'A',
			require: '?ngModel',
			link: function (scope, element, attrs, ngModel) {

				//if (!ngModel) return;
				ngModel.$render = function () {
					element.html(ngModel.$viewValue || '');
				};

				// Listen for change events to enable binding
				element.on('blur keyup change', function () {
					scope.$apply(readViewText);
				});
				
				// No need to initialize, AngularJS will initialize the text based on ng-model attribute

				// Write data to the model
				function readViewText() {
					var html = element.html();
					// When we clear the content editable the browser leaves a <br> behind
					// If strip-br attribute is provided then we strip this out
					if (attrs.stripBr && html == '<br>') {
						html = '';
					}
					ngModel.$setViewValue(html);
				}
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'export', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/export/export.html',
			controller: 'ExportDirectiveCtrl',
			controllerAs: 'vm',
			scope:{
				item: '=',
				options: '=',
				selected: '='
			},
			bindToController: true,
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ExportDirectiveCtrl', ["$scope", "DataService", "DialogService", function($scope, DataService,DialogService ) {
		//
		var vm = this;
		vm.original = angular.copy(vm.item);
		vm.checkBase = checkBase;
		vm.checkFull = checkFull;
		vm.getCode = getCode;

		vm.baseOptions = {
			drag: true,
			allowDrop: true,
			allowDrag: true,
			allowMove: true,
			allowSave: true,
			allowDelete: true,
			allowAddContainer: true,
			allowAdd: true,
			editable: true,
			assigments: false,
			saveClick: vm.options.exports.save,
			addClick: vm.options.exports.addClick,
			addContainerClick: vm.options.exports.addContainerClick,
			deleteDrop: vm.options.exports.deleteDrop,
			deleteClick: vm.options.exports.deleteClick,
			onDrop: vm.options.exports.onDrop,
			inserted: vm.options.exports.inserted,
			styleable: vm.options.styleable,
			styleClick: vm.options.style.click,
			hideExpansionOnItem:true,
			expandJustGroups: vm.options.expandJustGroups
		};
		activate();


		function activate() {
			//loadAll();
		}

		function checkBase() {

		}

		function checkFull() {

		}
		function getCode(){
			 DialogService.fromTemplate('embedcode', $scope);
		}

	}]);

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('exportChooser', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/exportChooser/exportChooser.html',
			controller: 'ExportChooserCtrl',
			controllerAs: 'vm',
			scope: {
				countries: '=',
				nation: '=',
				selected: '=?',
				chapters: '=?',
				changed: '&',
				indicatorChange: '&?'
			},
			bindToController: true,
			replace: true,
			link: function(scope, element, attrs) {
				//
		
			}
		};

	});

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ExportChooserCtrl', ["$scope", "$timeout", function($scope, $timeout) {
		//
		var vm = this;
		vm.index = 0;
		vm.activeList = [];
	


		$timeout(function() {
			if (vm.chapters) {
				if (vm.selected.parent_id) {
					angular.forEach(vm.chapters, function(chapter) {
						if (chapter.id == vm.selected.parent_id) {
							vm.activeList = chapter.children;
						}
					});
				} else {
					vm.activeList = vm.chapters;
				}
				vm.index = vm.activeList.indexOf(vm.selected);
			}
		});

		$scope.$watch('vm.index', function(n, o) {
			if (n === o) return false;
			// if(vm.activeList[vm.index] != "undefined")
			vm.selected = vm.activeList[vm.index];
		})
	}]);
})();

(function () {
	"use strict";

	angular.module('app.directives').directive('fileDropzone', ["toastr", function (toastr) {

		return {
			restrict: 'EA',
			scope: {
        file: '=',
        fileName: '='
      },
			link: function (scope, element, attrs) {
				var checkSize, isTypeValid, processDragOverOrEnter, validMimeTypes;
				processDragOverOrEnter = function (event) {
					if (event != null) {
						event.preventDefault();
					}
					event.dataTransfer.effectAllowed = 'copy';
					return false;
				};
				validMimeTypes = attrs.fileDropzone;
				checkSize = function (size) {
					var _ref;
					if (((_ref = attrs.maxFileSize) === (void 0) || _ref === '') || (size / 1024) / 1024 < attrs.maxFileSize) {
						return true;
					} else {
						alert("File must be smaller than " + attrs.maxFileSize + " MB");
						return false;
					}
				};
				isTypeValid = function (type) {
					if ((validMimeTypes === (void 0) || validMimeTypes === '') || validMimeTypes.indexOf(type) > -1) {
						return true;
					} else {
						toastr.error("File must be one of following types " + validMimeTypes, 'Invalid file type!');

						return false;
					}
				};
				element.bind('dragover', processDragOverOrEnter);
				element.bind('dragenter', processDragOverOrEnter);
				return element.bind('drop', function (event) {
					var file, name, reader, size, type;
					if (event != null) {
						event.preventDefault();
					}
					reader = new FileReader();
					reader.onload = function (evt) {
						if (checkSize(size) && isTypeValid(type)) {
							return scope.$apply(function () {
								scope.file = evt.target.result;
								if (angular.isString(scope.fileName)) {
									return scope.fileName = name;
								}
							});
						}
					};
					file = event.dataTransfer.files[0];
					/*name = file.name;
					type = file.type;
					size = file.size;
					reader.readAsDataURL(file);*/
					scope.file = file;
					return false;
				});
			}
		};
	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'FileDropzoneCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive('previewCanvas', function() {
    return {
      //require: '?resizableCanvas',
      link: function(scope, elem, attrs, resizableCanvasCtrl) {
        var canvasDom, ctx, dependentDataChange, getDependentData, jsCodePrecision;
        canvasDom = elem[0];
        ctx = canvasDom.getContext('2d');
        jsCodePrecision = 3;
        /*
              @return {Object} Data on which the canvas rendering depends.
        */

        getDependentData = function() {
          return {
            ColorHandles: scope.$eval(attrs.colorHandles),
            gradientType: scope.$eval(attrs.gradientType),
            width: elem.prop('width'),
            height: elem.prop('height'),
            rotateDegrees: scope.$eval(attrs.rotate),
            innerCircleX: scope.$eval(attrs.innerCircleX),
            innerCircleY: scope.$eval(attrs.innerCircleY),
            outerCircleX: scope.$eval(attrs.outerCircleX),
            outerCircleY: scope.$eval(attrs.outerCircleY)
          };
        };
        /*
              @param {Object} dependentData Result of {@link getDependentData()}.
        */

        dependentDataChange = function(dependentData) {
				
          var ColorHandle, ColorHandles, a, b, g, gradientType, grd, height, innerCircleX, innerCircleY, matches, outerCircleX, outerCircleY, r, r1, r1Fixed, r2, r2Fixed, regEx, rotateDegrees, scaleX, scaleY, width, x1, x1Fixed, x2, x2Fixed, y1, y1Fixed, y2, y2Fixed, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
          ColorHandles = dependentData.ColorHandles;
          gradientType = dependentData.gradientType;
          width = dependentData.width;
          height = dependentData.height;
          rotateDegrees = (_ref = dependentData.rotateDegrees) != null ? _ref : 0;
          innerCircleX = (_ref1 = dependentData.innerCircleX) != null ? _ref1 : 50;
          innerCircleY = (_ref2 = dependentData.innerCircleY) != null ? _ref2 : 50;
          outerCircleX = (_ref3 = dependentData.outerCircleX) != null ? _ref3 : 50;
          outerCircleY = (_ref4 = dependentData.outerCircleY) != null ? _ref4 : 50;
          if (attrs.htmlCode) {
            scope[attrs.htmlCode] = "<canvas id=\"myPrettyCanvas\" width=\"" + width + "\" height=\"" + height + "\"></canvas>";
          }
          if (attrs.jsCode) {
            scope[attrs.jsCode] = "var canvasId = 'myPrettyCanvas',\n    canvas = document.getElementById(canvasId),\n    ctx = canvas.getContext('2d'),\n    grd;\n\n";
          }
          scaleX = 1;
          scaleY = 1;
          switch (gradientType) {
            case 'linear':
              if ((0 <= rotateDegrees && rotateDegrees < 45)) {
                x1 = 0;
                y1 = height / 2 * (45 - rotateDegrees) / 45;
                x2 = width;
                y2 = height - y1;
              } else if ((45 <= rotateDegrees && rotateDegrees < 135)) {
                x1 = width * (rotateDegrees - 45) / (135 - 45);
                y1 = 0;
                x2 = width - x1;
                y2 = height;
              } else if ((135 <= rotateDegrees && rotateDegrees < 225)) {
                x1 = width;
                y1 = height * (rotateDegrees - 135) / (225 - 135);
                x2 = 0;
                y2 = height - y1;
              } else if ((225 <= rotateDegrees && rotateDegrees < 315)) {
                x1 = width * (1 - (rotateDegrees - 225) / (315 - 225));
                y1 = height;
                x2 = width - x1;
                y2 = 0;
              } else if (315 <= rotateDegrees) {
                x1 = 0;
                y1 = height - height / 2 * (rotateDegrees - 315) / (360 - 315);
                x2 = width;
                y2 = height - y1;
              }
              grd = ctx.createLinearGradient(x1, y1, x2, y2);
              if (attrs.jsCode) {
                x1Fixed = x1.toFixed(jsCodePrecision);
                y1Fixed = y1.toFixed(jsCodePrecision);
                x2Fixed = x2.toFixed(jsCodePrecision);
                y2Fixed = y2.toFixed(jsCodePrecision);
                scope[attrs.jsCode] += "// Create gradient\ngrd = ctx.createLinearGradient(" + x1Fixed + ", " + y1Fixed + ", " + x2Fixed + ", " + y2Fixed + ");\n\n";
              }
              break;
            case 'radial':
              if (width > height) {
                scaleY = height / width;
              }
              if (height > width) {
                scaleX = width / height;
              }
              ctx.setTransform(scaleX, 0, 0, scaleY, 0, 0);
              grd = ctx.createRadialGradient(x1 = (width * innerCircleX / 100) / scaleX, y1 = (height * innerCircleY / 100) / scaleY, r1 = 0, x2 = (width * outerCircleX / 100) / scaleX, y2 = (height * outerCircleY / 100) / scaleY, r2 = (width / 2) / scaleX);
              if (attrs.jsCode) {
                if (scaleX !== 1 || scaleY !== 1) {
                  scope[attrs.jsCode] += "// Transform to facilitate ellipse\nctx.setTransform(" + scaleX + ", 0, 0, " + scaleY + ", 0, 0);\n\n";
                }
                x1Fixed = x1.toFixed(jsCodePrecision);
                y1Fixed = y1.toFixed(jsCodePrecision);
                r1Fixed = r1.toFixed(jsCodePrecision);
                x2Fixed = x2.toFixed(jsCodePrecision);
                y2Fixed = y2.toFixed(jsCodePrecision);
                r2Fixed = r2.toFixed(jsCodePrecision);
                scope[attrs.jsCode] += "// Create gradient\ngrd = ctx.createRadialGradient(" + x1Fixed + ", " + y1Fixed + ", " + r1Fixed + ", " + x2Fixed + ", " + y2Fixed + ", " + r2Fixed + ");\n\n";
              }
              break;
            default:
              throw 'Unknown gradient type.';
          }
          if (attrs.jsCode) {
            scope[attrs.jsCode] += '// Add colors\n';
          }
          for (_i = 0, _len = ColorHandles.length; _i < _len; _i++) {
            ColorHandle = ColorHandles[_i];
            if (!ColorHandle.color) {
              continue;
            }
            grd.addColorStop(ColorHandle.stop, ColorHandle.color);
            if (attrs.jsCode) {
              regEx = /([\d.]+),\s*([\d.]+),\s*([\d.]+),\s*([\d.]+)/;
              matches = regEx.exec(ColorHandle.color);
              r = matches[1];
              g = matches[2];
              b = matches[3];
              a = parseFloat(matches[4]).toFixed(jsCodePrecision);
              scope[attrs.jsCode] += "grd.addColorStop(" + (ColorHandle.stop.toFixed(jsCodePrecision)) + ", 'rgba(" + r + ", " + g + ", " + b + ", " + a + ")');\n";
            }
          }
          if (attrs.jsCode) {
            scope[attrs.jsCode] += '\n';
          }
          ctx.clearRect(0, 0, width / scaleX, height / scaleY);
          ctx.fillStyle = grd;
          ctx.fillRect(0, 0, width / scaleX, height / scaleY);
          if (attrs.jsCode) {
            scope[attrs.jsCode] += "// Fill with gradient\nctx.fillStyle = grd;\nctx.fillRect(0, 0, " + ((width / scaleX).toFixed(jsCodePrecision)) + ", " + ((height / scaleY).toFixed(jsCodePrecision)) + ");";
          }
          // if (resizableCanvasCtrl != null) {
          //   return resizableCanvasCtrl.drawResizeIcon();
          // }
        };
        return scope.$watch(getDependentData, dependentDataChange, true);
      }
    };
  });

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'GradientCreatorCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive('gradientClickArea', ["$document", function($document) {
    return {
      template: '<span class="addHandleIcon iconic brush"></span>',
      link: function(scope, elem) {
        var addHandleIcon, mouseIsDown;
        addHandleIcon = elem.find('span').css('opacity',0);
        mouseIsDown = false;
        $document.bind('mousedown', function() {
          return mouseIsDown = true;
        });
        $document.bind('mouseup',function() {
          return mouseIsDown = false;
        });
        elem.bind('mouseover',function() {
          if (!mouseIsDown) {
            return addHandleIcon.css('opacity',1);
          }
        });
        elem.bind('mouseout',function() {
          return addHandleIcon.css('opacity',0);
        });
        elem.bind('mousemove',function(event) {
          return addHandleIcon.css({
            left: event.offsetX,
            top: event.offsetY - 5
          });
        });
        return elem.bind('mousedown',function(event) {
          var leftClicked;
          leftClicked = event.which === 1;
          if (leftClicked) {
            scope.$apply(function() {
						  return scope.vm.addColorHandle((event.pageX -  elem[0].getBoundingClientRect().left) / elem[0].clientWidth);
            });
            return addHandleIcon.css('opacity',0);
          }
        });
      }
    };
  }]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'GradientCreatorClickAreaCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'history', function() {
		var defaults = function(){
			return {
				field: 'score',
				color: ''
			}
		};
		return {
			restrict: 'E',
			templateUrl: 'views/directives/history/history.html',
			controller: 'HistoryCtrl',
			scope:{
				options:'=',
				chartdata: '='
			},
			link: function( $scope, element, $attrs, ngModel){
					var options = angular.extend(defaults(), $scope.options);
			}
		};

	});

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('HistoryCtrl', ["$scope", function ($scope) {
		$scope.setData = setData;
		activate();
	
		function activate(){
			$scope.setData();
			$scope.$watch('options', function(n,o){
				if(n === 0){
					return;
				}
				$scope.setData();
			})
		}
		function setData(){
			$scope.display = {
				selectedCat: '',
				rank: [{
					fields: {
						x: 'year',
						y: 'rank'
					},
					title: 'Rank',
					color: '#52b695'
				}],
				score: [{
					fields: {
						x: 'year',
						y: $scope.options.field
					},
					title: 'Score',
					color: $scope.options.color
				}]
			};
		}
	}]);

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('imageColor', ["$timeout", function($timeout) {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/imageColor/imageColor.html',
			controller: 'ImageColorCtrl',
			scope:{
				color:'='
			},
			link: function(scope, element, attrs) {
				//
				var image = element[0];
				image.onload = function(){
					scope.color = tinycolor(getAverageRGB(image)).isDark();
				};

				function getAverageRGB(imgEl) {

					var blockSize = 5, // only visit every 5 pixels
						defaultRGB = {
							r: 0,
							g: 0,
							b: 0
						}, // for non-supporting envs
						canvas = document.createElement('canvas'),
						context = canvas.getContext && canvas.getContext('2d'),
						data, width, height,
						i = -4,
						length,
						rgb = {
							r: 0,
							g: 0,
							b: 0
						},
						count = 0;

					if (!context) {
						return defaultRGB;
					}

					height = canvas.height = imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
					width = canvas.width = imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;

					context.drawImage(imgEl, 0, 0);

					try {
						data = context.getImageData(0, 0, width, height);
					} catch (e) {
						/* security error, img on diff domain */
						alert('x');
						return defaultRGB;
					}

					length = data.data.length;

					while ((i += blockSize * 4) < length) {
						++count;
						rgb.r += data.data[i];
						rgb.g += data.data[i + 1];
						rgb.b += data.data[i + 2];
					}

					// ~~ used to floor values
					rgb.r = ~~(rgb.r / count);
					rgb.g = ~~(rgb.g / count);
					rgb.b = ~~(rgb.b / count);

					return rgb;

				}
				function rgb2hsv () {
    var rr, gg, bb,
        r = arguments[0] / 255,
        g = arguments[1] / 255,
        b = arguments[2] / 255,
        h, s,
        v = Math.max(r, g, b),
        diff = v - Math.min(r, g, b),
        diffc = function(c){
            return (v - c) / 6 / diff + 1 / 2;
        };

    if (diff == 0) {
        h = s = 0;
    } else {
        s = diff / v;
        rr = diffc(r);
        gg = diffc(g);
        bb = diffc(b);

        if (r === v) {
            h = bb - gg;
        }else if (g === v) {
            h = (1 / 3) + rr - bb;
        }else if (b === v) {
            h = (2 / 3) + gg - rr;
        }
        if (h < 0) {
            h += 1;
        }else if (h > 1) {
            h -= 1;
        }
    }
    return {
        h: Math.round(h * 360),
        	s: Math.round(s * 100),
        	v: Math.round(v * 100)
        };
        }
			}
		};

	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'ImageColorCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'imageUploader', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/imageUploader/imageUploader.html',
			controller: 'ImageUploaderCtrl',
			controllerAs: 'vm',
			scope:{
				item: '=ngModel',
      	label: '@'
			},
			bindToController: true,
			//replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('ImageUploaderCtrl', function() {
		//
		var vm = this;
		vm.assignImage = assignImage;
		vm.resetImage = resetImage;

		function assignImage($file, $message, $flow) {
			if (!vm.item) vm.item = {};
			var image = JSON.parse($message);
			vm.item.image = image;
			vm.item.image_id = image.id;
		}

		function resetImage($flow) {
			$flow.cancel();
			vm.item.image = null;
			vm.item.image_id = null;
		}
	});

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'indicator', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/indicator/indicator.html',
			controller: 'IndicatorCtrl',
			controllerAs: 'vm',
			scope:{
				item: '=',
				options: '=',
				selected: '='
			},
			bindToController: true,
			replace:true,
			//require: 'item',
			link: function( scope, element, attrs, itemModel ){
				//
				/*scope.$watch(
					function () {
						return itemModel.$modelValue;
					},
					function (n, o) {
						console.log(n);
					});*/
			}
		};

	});

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('IndicatorCtrl', ["$scope", "DataService", "ContentService", "DialogService", "$filter", "toastr", "VectorlayerService", function ($scope, DataService, ContentService, DialogService, $filter, toastr, VectorlayerService) {
		//
		var vm = this;

		vm.original = angular.copy(vm.item);

		vm.checkBase = checkBase;
		vm.checkFull = checkFull;

		vm.categories = [];
		vm.dataproviders = [];
		vm.selectedItem = null;
		vm.searchText = null;
		vm.searchUnit = null;
		vm.querySearch = querySearch;
		vm.queryUnit = queryUnit;

		vm.save = save;

		vm.createProvider = createProvider;
		vm.createUnit = createUnit;

		activate();

		function activate() {
			loadAll();
		}

		function querySearch(query) {
			return $filter('findbyname')(vm.dataproviders, query, 'title');
		}
		function queryUnit(query) {
			return $filter('findbyname')(vm.measureTypes, query, 'title');
		}

		function loadAll() {
			vm.dataproviders = DataService.getAll('dataproviders').$object;
			vm.categories = ContentService.getCategories({tree:true});
			vm.measureTypes = DataService.getAll('measure_types').$object;
			vm.styles = DataService.getAll('styles').$object;
		}

		function checkBase(){
			if (vm.item.title && vm.item.type && vm.item.dataprovider && vm.item.title.length >= 3) {
				return true;
			}
			return false;
		}
		function checkFull(){
			if(typeof vm.item.categories == "undefined") return false;
			return checkBase() && vm.item.categories.length ? true : false;
		}
		function save(){
			vm.item.save().then(function(response){
				if(response){
					toastr.success('Data successfully updated!', 'Successfully saved');
					vm.item.isDirty = false;
					vm.original = angular.copy(vm.item);
				}
			});
		}

		//TODO: ITS A HACK TO GET IT WORK: ng-click vs ng-mousedown
		function createProvider(text){
			DialogService.fromTemplate('addProvider', $scope);
		}
		function createUnit(text){
			DialogService.fromTemplate('addUnit', $scope);
		}

		$scope.$watch('vm.item', function(n, o){
			if(n != o) {
		    vm.item.isDirty = !angular.equals(vm.item, vm.original);
		  }
		},true);
	}]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'indicatorMenu', function() {

		return {
			restrict: 'EA',
			scope: {
				item: '=item'
			},
			replace:true,
			templateUrl: 'views/directives/indicatorMenu/indicatorMenu.html',
			controller: 'IndicatorMenuCtrl',
			controllerAs: 'vm',
			bindToController: true,
			link: function( scope, element, attrs ){
				//
				var cl = 'active';
				var el = element[0];
				var parent = element.parent();
				parent.on('mouseenter', function(e){
					element.addClass(cl);
				}).on('mouseleave', function(e){
					element.removeClass(cl);
				});
				
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'IndicatorMenuCtrl', function(){
		//
		var vm = this;
		vm.checkBase = checkBase;
		vm.locked = locked;
		vm.changeOfficial = changeOfficial;

		function locked(){
			return vm.item.is_official ? 'lock_open' : 'lock';
		}
		function changeOfficial(){
			vm.item.is_official = !vm.item.is_official;
			vm.item.save();
		}
		function checkBase(item){
			if (item.title && item.measure_type_id && item.dataprovider && item.title.length >= 3) {
				return true;
			}
			return false;
		}
  });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'indicators', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/indicators/indicators.html',
			controller: 'IndicatorsCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				item: '=?',
				indicators: '=items',
				selection: '=?',
				options:'=?',
				active: '=?'
			},
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'IndicatorsCtrl', ["DataService", function(DataService){
		//
		var vm = this;
		vm.selectAllGroup = selectAllGroup;
		vm.selectedItem = selectedItem;
		vm.toggleSelection = toggleSelection;
		vm.deleteSelected = deleteSelected;

		vm.filter = {
			sort:'title',
			reverse:false,
			list: 0,
			published: false,
			types: {
				title: true,
				style: false,
				categories: false,
				infographic: false,
				description: false,
			}
		};
		vm.search = {
			query: '',
			show: false
		};
		vm.openMenu = openMenu;
		vm.toggleList = toggleList;



		function toggleList(key){
			if(vm.visibleList == key){
				vm.visibleList = '';
			}
			else{
				vm.visibleList = key;
			}
		}

		function selectedItem(item) {
			return vm.selection.indexOf(item) > -1 ? true : false;
		}
		function selectAll(){
			if(vm.selection.length){
				vm.selection = [];
			}
			else{
				angular.forEach(vm.indicators, function(item){
					if(vm.selection.indexOf(item) == -1){
						vm.selection.push(item);
					}
				});
			}
		}

		function toggleSelection(item) {
			var index = vm.selection.indexOf(item);
			if (index > -1) {
				return vm.selection.splice(index, 1);
			} else {
				return vm.selection.push(item);
			}
		}
		function selectAllGroup(group){
			if(vm.selection.length){
					vm.selection = [];
					return false;
			}
			vm.selection = [];
			angular.forEach(group, function(item){
				vm.selection.push(item);
			});

		}
		function openMenu($mdOpenMenu, ev) {
			$mdOpenMenu(ev);
		}

		function deleteSelected(){
			if(vm.selection.length){
				angular.forEach(vm.selection, function(item){
						DataService.remove('indicators', item.id).then(function(response){
							vm.indicators.splice(vm.indicators.indexOf(item),1);
						})
				})
				vm.selection = [];
			}
		}
		/*$scope.$watch('vm.search.query', function (query, oldQuery) {
			if(query === oldQuery) return false;
			vm.query = vm.filter.types;
			vm.query.q = query;
			vm.items = ContentService.fetchIndicators(vm.query);
		});*/
    }]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'indizes', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/indizes/indizes.html',
			controller: 'IndizesCtrl',
			controllerAs: 'vm',
			scope:{
				item: '=',
				options: '=',
				selected: '='
			},
			bindToController: true,
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'IndizesCtrl', ["$scope", "$state", "$filter", "$timeout", "toastr", "DataService", "ContentService", function($scope, $state, $filter, $timeout, toastr, DataService, ContentService){
		//
		var vm = this;
		vm.original = angular.copy(vm.item);
		vm.checkBase = checkBase;
		vm.checkFull = checkFull;
		vm.save = save;

		vm.baseOptions = {
			drag:true,
			allowDrop:true,
			allowDrag:true,
			allowMove:true,
			allowSave:true,
			allowDelete:true,
			allowAddContainer:true,
			allowAdd:true,
			editable:true,
			assigments: true,
			saveClick: save,
			addClick: vm.options.indizes.addClick,
			addContainerClick: vm.options.indizes.addContainerClick,
			deleteDrop: vm.options.indizes.deleteDrop,
			deleteClick: vm.options.indizes.deleteClick
		};
		activate();


		function activate() {
			loadAll();
		}

		function loadAll() {
			vm.categories = ContentService.getCategories({tree:true});
			vm.styles = DataService.getAll('styles').$object;
			vm.types = DataService.getAll('index/types').$object;

			if(typeof vm.item.id == "undefined"){
				vm.item.item_type_id = 1;
				vm.item.children = [];
			}
		}
		function checkBase(){
			if (vm.item.title && vm.item.item_type_id && vm.item.title.length >= 3) {
				return true;
			}
			return false;
		}
		function checkFull(){
			if(typeof vm.item.categories == "undefined") return false;
			return checkBase() && vm.item.categories.length ? true : false;
		}
		function save(){
			if(vm.item.id){
				vm.item.save().then(function(response){
					if(response){
						toastr.success('Data successfully updated!', 'Successfully saved');
						vm.item.isDirty = false;
						vm.original = angular.copy(vm.item);
						ContentService.updateItem(response);
						$state.go('app.index.editor.indizes.data',{id:vm.item.id,name:response.name})
					}
				});
			}
			else{
				DataService.post('index', vm.item).then(function(response){
					if(response){
						toastr.success('Data successfully saved!', 'Successfully saved');
						vm.item.isDirty = false;
						vm.original = angular.copy(vm.item);
						ContentService.addItem(response);
						$state.go('app.index.editor.indizes.data',{id:response.id, name:response.name})
					}
				});
			}

		}

		function removeItems(event, item){
		//	console.log(vm.item, item);

		}
		$scope.$watch('vm.item', function(n, o){
			if(n != o) {
				vm.item.isDirty = !angular.equals(vm.item, vm.original);
			}
		},true);
    }]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'killContextMenu',  function() {
    return function(scope, elem) {
      return elem.bind('contextmenu',  function(e) {
                            e.preventDefault();
                        });
    };
  });

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'KillContextMenuCtrl', function(){
		//
    });

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('median', ["$timeout", "$window", function($timeout, $window) {
		var defaults = function() {
			return {
				id: 'gradient',
				width: 340,
				height: 40,
				info: true,
				field: 'score',
				handling: true,
				showValue: true,
				min: 0,
				max: 100,
				margin: {
					left: 0,
					right: 0,
					top: 10,
					bottom: 10
				},
				colors: [{
					position: 0,
					color: 'rgba(102,102,102,1)',
					opacity: 1
				}, {
					position: 53,
					color: 'rgba(128, 243, 198,1)',
					opacity: 1
				}, {
					position: 100,
					color: 'rgba(255,255,255,1)',
					opacity: 0
				}]
			};
		}
		return {
			restrict: 'E',
			scope: {
				data: '=',
				options: '='
			},
			require: 'ngModel',
			link: function($scope, element, $attrs, ngModel) {

				var options = angular.extend(defaults(), $attrs);
				options = angular.extend(options, $scope.options);
				options.width = element.parent()[0].clientWidth - options.margin.left - options.margin.right;
				options.unique = new Date().getTime();
				element.css('height', options.height + 'px').css('border-radius', options.height / 2 + 'px');

				if (options.color) {
					options.colors[1].color = options.color;
				}
				if (!$scope.options.max) {
					angular.forEach($scope.data, function(nat, key) {
						options.max = d3.max([options.max, parseInt(nat[options.field])]);
						options.min = d3.min([options.min, parseInt(nat[options.field])]);
					});
				}

				var container = d3.select(element[0]).append("svg");
				var svg = container.append("g");
				var effects = svg.append('svg:defs')
				var gradient = effects.append("svg:linearGradient")
					.attr('id', options.field + options.unique)
					.attr('x1', '0%')
					.attr('y1', '0%')
					.attr('x2', '100%')
					.attr('y2', '0%')
					.attr('spreadMethod', 'pad');
				var shadow = effects.append("filter")
					.attr("id", "drop-shadow")
					.attr("height", "150%");
				var shadowIntensity = shadow.append("feGaussianBlur")
					.attr("in", "SourceAlpha")
					.attr("stdDeviation", 1)
					.attr("result", "blur");
				var shadowPos = shadow.append("feOffset")
					.attr("in", "blur")
					.attr("dx", 0)
					.attr("dy", 0)
					.attr("result", "offsetBlur");

				var feMerge = shadow.append("feMerge");
				feMerge.append("feMergeNode")
					.attr("in", "offsetBlur")
				feMerge.append("feMergeNode")
					.attr("in", "SourceGraphic");

				var bckgrnd = svg.append('g').attr('transform', "translate(0, " + (options.height / 4) + ")");
				var rect = bckgrnd.append('path');
				var legend = svg.append('g');
				var legend2 = svg.append('g');
				var slider = svg.append("g")
					.attr("class", "slider");
				// if (options.handling == true) {
				// 	slider.call(brush);
				// }

				slider.select(".background")
					.attr("height", options.height);

				var x = d3.scale.linear()
				x.domain([options.min, options.max])
					.range([options.margin.left, options.width - options.margin.left])
					.clamp(true);

				if(options.gradient){
					if (typeof options.gradient == "string") {
						options.gradient = JSON.parse(options.gradient);
					}
					angular.forEach(options.gradient, function(color) {
						gradient.append('svg:stop')
							.attr('offset', (color.stop * 100) + '%')
							.attr('stop-color', color.color)
							//.attr('stop-opacity', color.opacity);
					});
				}
				else{
					angular.forEach(options.colors, function(color) {
						gradient.append('svg:stop')
							.attr('offset', color.position + '%')
							.attr('stop-color', color.color)
							.attr('stop-opacity', color.opacity);
					});
				}



				if (options.info === true) {
					legend.append('circle')
						.attr('r', options.height / 2);
					var legendText = legend.append('text')
						.text(options.min)
						.style('font-size', options.height / 2.5)
						.attr('text-anchor', 'middle')
						.attr('y', '.35em')
						.attr('id', 'lowerValue');

					legend2.attr('transform', 'translate(' + (options.width - (options.height / 2)) + ', ' + options.height / 2 + ')')
						.attr('class', 'endLabel')
					legend2.append('circle')
						.attr('r', options.height / 2)
					var legend2Text = legend2.append('text')
						.text(function() {
							//TDODO: CHckick if no comma there
							if (options.max > 1000) {
								var v = (parseInt(options.max) / 1000).toString();
								return v.substr(0, v.indexOf('.')) + "k";
							}
							return options.max
						})
						.style('font-size', options.height / 2.5)
						.attr('text-anchor', 'middle')
						.attr('y', '.35em')
						.attr('id', 'upperValue');
				}


				if (options.info === true) {
					var line = slider.append('line')
						.attr('x1', options.width / 2)
						.attr('y1', 0)
						.attr('x2', options.width / 2)
						.attr('y2', options.height)
						.attr('stroke-dasharray', '3,3')
						.attr('stroke-width', 1)
						.attr('stroke', 'rgba(0,0,0,87)');
				}
				var handleCont = slider.append('g');
				var handle = handleCont.append("circle")
					.attr("class", "handle")
					.style("filter", "url(#drop-shadow)");
				if (options.showValue) {
					var handleLabel = handleCont.append('text')
						.text(0)
				}


				function draw() {
					x.range([options.margin.left, options.width - options.margin.right])
						.clamp(true);


					// var brush = d3.svg.brush()
					// 	.x(x)
					// 	.extent([0, 0])
					// 	.on("brush", brush)
					// 	.on("brushend", brushed);

					container
						.attr("width", options.width)
						.attr("height", options.height)
						.style('margin-left', options.margin.left)


					//.attr("transform", "translate(0," + options.margin.top / 2 + ")");



					rect
						.attr('d', rounded_rect(0, 0, options.width, options.height / 2, options.height / 4, true, true, true, true))
						.attr('y', options.height / 2)
						.attr('width', options.width)
						.attr('height', options.height / 2)
						.style('fill', 'url(#' + (options.field + options.unique) + ')');
					legend.attr('transform', 'translate(' + options.height / 2 + ', ' + options.height / 2 + ')')
						.attr('class', 'startLabel')

					if (options.info === true) {
						legend.attr('r', options.height / 2);
						legendText.text(options.min)
							.style('font-size', options.height / 2.5)
							.attr('text-anchor', 'middle')
							.attr('y', '.35em')
							.attr('id', 'lowerValue');
						legend2.attr('transform', 'translate(' + (options.width - (options.height / 2)) + ', ' + options.height / 2 + ')')
							.attr('class', 'endLabel')
						legend2.append('circle')
							.attr('r', options.height / 2)

						legend2Text.text(function() {
								//TDODO: CHckick if no comma there
								if (options.max > 1000) {
									var v = (parseInt(options.max) / 1000).toString();
									return v.substr(0, v.indexOf('.')) + "k";
								}
								return options.max
							})
							.style('font-size', options.height / 2.5)
							.attr('text-anchor', 'middle')
							.attr('y', '.35em')
							.attr('id', 'upperValue');

						line.attr('x1', options.width / 2)
							.attr('y1', 0)
							.attr('x2', options.width / 2)
							.attr('y2', options.height)
							.attr('stroke-dasharray', '3,3')
							.attr('stroke-width', 1)
							.attr('stroke', 'rgba(0,0,0,87)');
					}

					handleCont
					//.attr("transform", "translate(0," + options.height / 2 + ")")
						.on('mouseover', function() {
							shadowIntensity.transition().duration(200).attr('stdDeviation', 2);

						})
						.on('mouseout', function() {
							shadowIntensity.transition().duration(200).attr('stdDeviation', 1);

						});

					handle
						.attr("r", function() {
							if (options.showValue) {
								return ((options.height / 2) + options.height / 10);
							}
							return options.height / 4;
						});

					if (options.color) {
						handle.style('fill', '#fff' /*options.color*/ );
					}
					if (options.showValue) {
						handleLabel
							.style('font-size', options.height / 2.5)
							.attr("text-anchor", "middle").attr('y', '0.35em');
					}
					if (ngModel.$modelValue) {
						if (options.showValue) {
							handleLabel.text(labeling(ngModel.$modelValue[options.field]));
						}
						handleCont.transition().duration(500).ease('quad').attr("transform", 'translate(' + x(ngModel.$modelValue[options.field]) + ',' + options.height / 2 + ')');
					} else {
						if (options.showValue) {
							handleLabel.text(0);
						}

					}
				}
				//slider
				//.call(brush.extent([0, 0]))
				//.call(brush.event);
				function rounded_rect(x, y, w, h, r, tl, tr, bl, br) {
					var retval;
					retval = "M" + (x + r) + "," + y;
					retval += "h" + (w - 2 * r);
					if (tr) {
						retval += "a" + r + "," + r + " 0 0 1 " + r + "," + r;
					} else {
						retval += "h" + r;
						retval += "v" + r;
					}
					retval += "v" + (h - 2 * r);
					if (br) {
						retval += "a" + r + "," + r + " 0 0 1 " + -r + "," + r;
					} else {
						retval += "v" + r;
						retval += "h" + -r;
					}
					retval += "h" + (2 * r - w);
					if (bl) {
						retval += "a" + r + "," + r + " 0 0 1 " + -r + "," + -r;
					} else {
						retval += "h" + -r;
						retval += "v" + -r;
					}
					retval += "v" + (2 * r - h);
					if (tl) {
						retval += "a" + r + "," + r + " 0 0 1 " + r + "," + -r;
					} else {
						retval += "v" + -r;
						retval += "h" + r;
					}
					retval += "z";
					return retval;
				}

				function labeling(value) {
					if (parseInt(value) > 1000) {
						var v = (parseInt(value) / 1000).toString();
						return v.substr(0, v.indexOf('.')) + "k";
					} else {
						return parseInt(value);
					}
				}

				function brush() {
					var value = brush.extent()[0];

					if (d3.event.sourceEvent) {
						value = x.invert(d3.mouse(this)[0]);
						brush.extent([value, value]);
					}
					if (options.showValue) {
						handleLabel.text(labeling(value));
					}
					handleCont.attr("transform", 'translate(' + x(value) + ',' + options.height / 2 + ')');
				}

				function brushed() {
					var count = 0;
					var found = false;
					var final = "";
					var value = brush.extent()[0];
					angular.forEach($scope.data, function(nat, key) {

						if (parseInt(nat[options.field]) == parseInt(value)) {
							final = nat;
							found = true;
						}
					});

					//
					// if(!final){
					// 	do {
					// 		angular.forEach($scope.data, function (nat, key) {
					// 			if (parseInt(nat[options.field]) == parseInt(value)) {
					// 				final = nat;
					// 				found = true;
					// 			}
					// 		});
					// 		count++;
					// 		value = value > (max / 2) ? value - 1 : value + 1;
					// 	} while (!found && count < max);
					// }


					if (final) {
						ngModel.$setViewValue(final);
						ngModel.$render();
					}

				}


				$scope.$watch('options', function(n, o) {
					if (n === o) {
						return;
					}
					options.colors[1].color = n.color;
					gradient = svg.append('svg:defs')
						.append("svg:linearGradient")
						.attr('id', options.field + "_" + n.color)
						.attr('x1', '0%')
						.attr('y1', '0%')
						.attr('x2', '100%')
						.attr('y2', '0%')
						.attr('spreadMethod', 'pad')
					angular.forEach(options.colors, function(color) {
						gradient.append('svg:stop')
							.attr('offset', color.position + '%')
							.attr('stop-color', color.color)
							.attr('stop-opacity', color.opacity);
					});
					rect.style('fill', 'url(#' + options.field + '_' + n.color + ')');
					handle.style('fill', n.color);

					if (ngModel.$modelValue) {
						if (options.showValue) {
							handleLabel.text(labeling(ngModel.$modelValue[0][n.field]));
						}
						handleCont.transition().duration(500).ease('quad').attr("transform", 'translate(' + x(ngModel.$modelValue.data[0][n.field]) + ',' + options.height / 2 + ')');
					} else {
						if (options.showValue) {
							handleLabel.text(0);
						}
					}

				}, true);
				$scope.$watch(
					function() {
						return ngModel.$modelValue;
					},
					function(newValue, oldValue) {

						if (!newValue) {
							if (options.showValue) {
								handleLabel.text(parseInt(0));
							}
							handleCont.attr("transform", 'translate(' + x(0) + ',' + options.height / 2 + ')');
							return;
						}
						if (options.showValue) {
							handleLabel.text(labeling(newValue[options.field]));
						}
						if (newValue == oldValue) {
							handleCont.attr("transform", 'translate(' + x(newValue[options.field]) + ',' + options.height / 2 + ')');
						} else {
							handleCont.transition().duration(500).ease('quad').attr("transform", 'translate(' + x(newValue[options.field]) + ',' + options.height / 2 + ')');

						}


					});
				$scope.$watch('data', function(n, o) {
					if (n === o) return false;

					options.min = 0;
					options.max = 0;
					angular.forEach($scope.data, function(nat, key) {
						if (!$scope.options.max) {
							options.max = d3.max([options.max, parseInt(nat[options.field])]);
							options.min = d3.min([options.min, parseInt(nat[options.field])]);
						}
						if (nat.iso == ngModel.$modelValue.iso) {
							if (options.showValue) {
								handleLabel.text(labeling(nat.data[0][options.field]));
							}
							handleCont.transition().duration(500).ease('quad').attr("transform", 'translate(' + x(nat.data[0][options.field]) + ',' + options.height / 2 + ')');

						}
					});

					x = d3.scale.linear()
						.domain([options.min, options.max])
						.range([options.margin.left, options.width - options.margin.left])
						.clamp(true);
					// brush.x(x)
					// 	.extent([0, 0])
					// 	.on("brush", brush)
					// 	.on("brushend", brushed);
					legend.select('#lowerValue').text(min);
					legend2.select('#upperValue').text(function() {
						//TDODO: CHckick if no comma there
						if (options.max > 1000) {
							var v = (parseInt(options.max) / 1000).toString();
							return v.substr(0, v.indexOf('.')) + "k";
						}
						return options.max
					});
					angular.forEach($scope.data, function(nat, key) {
						if (nat.iso == ngModel.$modelValue.iso) {
							if (options.showValue) {
								handleLabel.text(labeling(nat.data[0][options.field]));
							}
							handleCont.transition().duration(500).ease('quad').attr("transform", 'translate(' + x(nat.data[0][options.field]) + ',' + options.height / 2 + ')');
						}
					});

				});
				$window.onresize = function() {
						options.width = element.parent()[0].clientWidth - options.margin.left - options.margin.right;
						//options.height = options.width / 20;
						draw();
					}
					// $timeout(function() {
					// 	options.width = element.parent()[0].clientWidth - options.margin.left - options.margin.right;
					// 	//options.height = options.width / 20;
					// 	draw();
					// }, 250)
				$scope.$watch($attrs.ngIf, function() {
					$timeout(function() {
						options.width = element.parent()[0].clientWidth - options.margin.left - options.margin.right;

						draw();
					});
				});
				draw();
			}
		};

	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'MedianCtrl', function(){
		//
    });

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('panels', ["$window", function($window) {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/panels/panels.html',
			controller: 'PanelsCtrl',
			link: function(scope, element, attrs) {
				//
				var projectsContainer = element.next(),
					projectsPreviewWrapper = element.find('ul'),
					projectPreviews = projectsPreviewWrapper.children('li'),
					projects = document.querySelector('.cd-projects'),
					navigationTrigger = angular.element(document.querySelector('.cd-nav-trigger')),
					navigation = element.find('nav');
					//if browser doesn't support CSS transitions...
					//transitionsNotSupported = ($('.no-csstransitions').length > 0);

				var animating = false,
					//will be used to extract random numbers for projects slide up/slide down effect
					numRandoms = projects.querySelector('li').length,
					uniqueRandoms = [];

				//open project
				projectsPreviewWrapper.on('click', function(event) {
					event.preventDefault();
					if (animating == false) {
						animating = true;
						navigationTrigger.add(projectsContainer).addClass('project-open');
						openProject($(this).parent('li'));
					}
				});

				// navigationTrigger.on('click', function(event) {
				// 	event.preventDefault();
				//
				// 	if (animating == false) {
				// 		animating = true;
				// 		if (navigationTrigger.hasClass('project-open')) {
				// 			//close visible project
				// 			navigationTrigger.add(projectsContainer).removeClass('project-open');
				// 			closeProject();
				// 		} else if (navigationTrigger.hasClass('nav-visible')) {
				// 			//close main navigation
				// 			navigationTrigger.removeClass('nav-visible');
				// 			navigation.removeClass('nav-clickable nav-visible');
				// 			if (transitionsNotSupported) projectPreviews.removeClass('slide-out');
				// 			else slideToggleProjects(projectsPreviewWrapper.children('li'), -1, 0, false);
				// 		} else {
				// 			//open main navigation
				// 			navigationTrigger.addClass('nav-visible');
				// 			navigation.addClass('nav-visible');
				// 			if (transitionsNotSupported) projectPreviews.addClass('slide-out');
				// 			else slideToggleProjects(projectsPreviewWrapper.children('li'), -1, 0, true);
				// 		}
				// 	}
				//
				// 	if (transitionsNotSupported) animating = false;
				// });

				//scroll down to project info
				// projectsContainer.on('click', '.scroll', function() {
				// 	projectsContainer.animate({
				// 		'scrollTop': $window.height()
				// 	}, 500);
				// });

				//check if background-images have been loaded and show project previews
				// projectPreviews.children('a').bgLoaded({
				// 	afterLoaded: function() {
				// 		showPreview(projectPreviews.eq(0));
				// 	}
				// });

				function showPreview(projectPreview) {
					if (projectPreview.length > 0) {
						setTimeout(function() {
							projectPreview.addClass('bg-loaded');
							showPreview(projectPreview.next());
						}, 150);
					}
				}

				function openProject(projectPreview) {
					var projectIndex = projectPreview.index();
					projects.children('li').eq(projectIndex).add(projectPreview).addClass('selected');

					if (transitionsNotSupported) {
						projectPreviews.addClass('slide-out').removeClass('selected');
						projects.children('li').eq(projectIndex).addClass('content-visible');
						animating = false;
					} else {
						slideToggleProjects(projectPreviews, projectIndex, 0, true);
					}
				}

				function closeProject() {
					projects.find('.selected').removeClass('selected').on('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function() {
						$(this).removeClass('content-visible').off('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend');
						slideToggleProjects(projectsPreviewWrapper.children('li'), -1, 0, false);
					});

					//if browser doesn't support CSS transitions...
					if (transitionsNotSupported) {
						projectPreviews.removeClass('slide-out');
						projects.find('.content-visible').removeClass('content-visible');
						animating = false;
					}
				}

				function slideToggleProjects(projectsPreviewWrapper, projectIndex, index, bool) {
					if (index == 0) createArrayRandom();
					if (projectIndex != -1 && index == 0) index = 1;

					var randomProjectIndex = makeUniqueRandom();
					if (randomProjectIndex == projectIndex) randomProjectIndex = makeUniqueRandom();

					if (index < numRandoms - 1) {
						projectsPreviewWrapper.eq(randomProjectIndex).toggleClass('slide-out', bool);
						setTimeout(function() {
							//animate next preview project
							slideToggleProjects(projectsPreviewWrapper, projectIndex, index + 1, bool);
						}, 150);
					} else if (index == numRandoms - 1) {
						//this is the last project preview to be animated
						projectsPreviewWrapper.eq(randomProjectIndex).toggleClass('slide-out', bool).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function() {
							if (projectIndex != -1) {
								projects.children('li.selected').addClass('content-visible');
								projectsPreviewWrapper.eq(projectIndex).addClass('slide-out').removeClass('selected');
							} else if (navigation.hasClass('nav-visible') && bool) {
								navigation.addClass('nav-clickable');
							}
							projectsPreviewWrapper.eq(randomProjectIndex).off('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend');
							animating = false;
						});
					}
				}

				//http://stackoverflow.com/questions/19351759/javascript-random-number-out-of-5-no-repeat-until-all-have-been-used
				function makeUniqueRandom() {
					var index = Math.floor(Math.random() * uniqueRandoms.length);
					var val = uniqueRandoms[index];
					// now remove that value from the array
					uniqueRandoms.splice(index, 1);
					return val;
				}

				function createArrayRandom() {
					//reset array
					uniqueRandoms.length = 0;
					for (var i = 0; i < numRandoms; i++) {
						uniqueRandoms.push(i);
					}
				}
			}
		};

	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'PanelsCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'parseConflictCsv', ["$state", "$timeout", "toastr", function($state, $timeout, toastr) {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/parseConflictCsv/parseConflictCsv.html',
			controller: 'ParseConflictCsvCtrl',
			scope: {
				nations: '=',
				sum: '='
			},
			link: function( scope, element, attrs ){
				//
				var errors = 0;
				var stepped = 0,
					rowCount = 0,
					errorCount = 0,
					firstError;
				var start, end;
				var firstRun = true;
				var maxUnparseLength = 10000;
				var button = element.find('button');
				var input = element.find('input');
				var isVertical = false;
				var raw = [];
				var rawList = {};
				input.css({
					display: 'none'
				});
				button.bind('click', function () {
					input[0].click();
				});
				input.bind('change', function (e) {
					isVertical = false;
					raw = [];
					rawList = {};

					errors = [];
					stepped = 0, rowCount = 0, errorCount = 0, firstError;
					start, end;
					firstRun = true;
					scope.nations = [];
					$timeout(function () {

						var size = input[0].files[0].size;
						var csv = Papa.parse(input[0].files[0], {
							skipEmptyLines: true,
							header: true,
							dynamicTyping: true,
							fastMode: true,
							step: function (row) {
								var numbers = row.data[0].conflicts.match(/[0-9]+/g).map(function(n)
								{//just coerce to numbers
								    return +(n);
								});
								row.data[0].events = numbers;
								scope.sum += numbers.length;
								scope.nations.push(row.data[0]);

							},
							complete:function(){
								scope.$apply();
							}
						});

					});

				});
			}
		};

	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'ParseConflictCsvCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'parseConflictEventsCsv', ["$state", "$timeout", "toastr", function($state, $timeout, toastr) {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/parseConflictEventsCsv/parseConflictEventsCsv.html',
			controller: 'ParseConflictEventsCsvCtrl',
			scope: {
				events: '=',
			},
			link: function( scope, element, attrs ){
				//
				var errors = 0;
				var stepped = 0,
					rowCount = 0,
					errorCount = 0,
					firstError;
				var start, end;
				var firstRun = true;
				var maxUnparseLength = 10000;
				var button = element.find('button');
				var input = element.find('input');
				var isVertical = false;
				var raw = [];
				var rawList = {};
				input.css({
					display: 'none'
				});
				button.bind('click', function () {
					input[0].click();
				});
				input.bind('change', function (e) {
					isVertical = false;
					raw = [];
					rawList = {};
	scope.events = [];
					errors = [];
					stepped = 0, rowCount = 0, errorCount = 0, firstError;
					start, end;
					firstRun = true;
					$timeout(function () {

						var size = input[0].files[0].size;
						var csv = Papa.parse(input[0].files[0], {
							skipEmptyLines: true,
							header: true,
							dynamicTyping: true,
							fastMode: true,
							step: function (row) {
								switch (row.data[0].type) {
									case 'interstate':
										row.data[0].type_id = 1;
										break;
									case 'intrastate':
										row.data[0].type_id = 2;
										break;
									case 'substate':
										row.data[0].type_id = 3;
										break;
									default:

								}
								if(row.errors.length == 0){
									scope.events.push(row.data[0]);
								}
								else{
									console.log(row);
								}
							},
							complete:function(){
								scope.$apply();
							}
						});

					});

				});
			}
		};

	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'ParseConflictEventsCsvCtrl', function(){
		//
    });

})();

(function () {
	"use strict";

	angular.module('app.directives').directive('parsecsv', ["$state", "$timeout", "toastr", "IndexService", function ($state, $timeout, toastr, IndexService) {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/parsecsv/parsecsv.html',
			controller: 'ParsecsvCtrl',
			replace: true,
			link: function ($scope, element, $attrs) {
				//
				var errors = 0;
				var stepped = 0,
					rowCount = 0,
					errorCount = 0,
					firstError;
				var start, end;
				var firstRun = true;
				var maxUnparseLength = 10000;
				var button = element.find('button');
				var input = element.find('input');
				var isVertical = false;
				var raw = [];
				var rawList = {};
				input.css({
					display: 'none'
				});
				button.bind('click', function () {
					input[0].click();
				});
				input.bind('change', function (e) {
					isVertical = false;
					raw = [];
					rawList = {};

					errors = [];
					stepped = 0, rowCount = 0, errorCount = 0, firstError;
					start, end;
					firstRun = true;
					$timeout(function () {
						IndexService.clear();
						//console.log(Papa);
						var size = input[0].files[0].size;
						var csv = Papa.parse(input[0].files[0], {
							skipEmptyLines: true,
							header: true,
							dynamicTyping: true,
							fastMode: true,
							worker: false,
							//IF "step" instead of "chunk" > chunk = row and chunk.data = row.data[0]
							chunk: function (chunk) {
								angular.forEach(chunk.data, function (row, index) {

									var r = {
										data:{},
										errors:[]
									};
									angular.forEach(row, function (item, key) {
										if (isNaN(item) || item < 0) {
											if (item.toString().toUpperCase() == "#NA" /*|| item < 0*/ || item.toString().toUpperCase().indexOf('N/A') > -1) {
												var error = {
													type: "1",
													message: "Field in row is not valid for database use!",
													column: key,
													value: item
												};
												r.errors.push(error);
												errors.push(error);
											}
										}
									});
									if (isVertical) {
										angular.forEach(row, function (item, key) {
											if (key.length == 3) {
												if (typeof rawList[key].data == "undefined") {
													rawList[key].data = [];
												}
												rawList[key].data.push(item);
											}
										});
										//rawList[key].errors = row.errors;
									} else {
										//IF "step" instead of "chunk": r > row.data = row.data[0]
										r.data = row;

										IndexService.addData(r);
									}

								})

							},
							beforeFirstChunk: function (chunk) {

								//Check if there are points in the headers
								var index = chunk.match(/\r\n|\r|\n/).index;
								var delimiter = ',';
								var headings = chunk.substr(0, index).split(',');

								if (headings.length < 2) {
									headings = chunk.substr(0, index).split("\t");
									delimiter = '\t';
								}
								var isIso = [];

								for (var i = 0; i <= headings.length; i++) {
									if (headings[i]) {

										headings[i] = headings[i].replace(/[^a-z0-9]/gi, '_').toLowerCase();
										if (headings[i].indexOf('.') > -1) {
											headings[i] = headings[i].substr(0, headings[i].indexOf('.'));

										}
										var head = headings[i].split('_');
										if (head.length > 1) {
											headings[i] = '';
											for (var j = 0; j < head.length; j++) {
												if (isNaN(head[j])) {
													if (j > 0) {
														headings[i] += '_';
													}
													headings[i] += head[j];
												}
											}
										}

										if (headings[i].length == 3) {
											isIso.push(true);
										}
									}
								}
								if (headings.length == isIso.length) {
									isVertical = true;
									for (var i = 0; i <= headings.length; i++) {
										if (typeof rawList[headings[i]] == "undefined") {
											rawList[headings[i]] = {};
										}
										rawList[headings[i]].data = [];
									}
								}

								return headings.join(delimiter) + chunk.substr(index);
							},
							error: function (err, file) {
								ToastService.error(err);
							},
							complete: function (results) {

								IndexService.setErrors(errors);

								//See if there is an field name "iso" in the headings;
								if (!isVertical) {
									angular.forEach(IndexService.getFirstEntry().data, function (item, key) {

										if (key.toLowerCase().indexOf('iso') != -1 || key.toLowerCase().indexOf('code') != -1) {
											IndexService.setIsoField(key);
										}
										if (key.toLowerCase().indexOf('country') != -1) {
											IndexService.setCountryField(key);
										}
										if (key.toLowerCase().indexOf('year') != -1 && item.toString().length == 4) {
											IndexService.setYearField(key);
										}
										if (key.toLowerCase().indexOf('gender') != -1 || key.toLowerCase().indexOf('sex') != -1) {
											IndexService.setGenderField(key);
										}
									});
								} else {
									angular.forEach(rawList, function (item, key) {
										item.errors = [];
										if (item.toLowerCase() != "undefined" && typeof key != "undefined") {
											var r = {
												iso: key.toUpperCase()
											};
											angular.forEach(item.data, function (column, i) {
												r['column_' + i] = column;
												if (isNaN(column) || column < 0) {
													if (column.toString().toUpperCase() == "NA" || column < 0 || column.toString().toUpperCase().indexOf('N/A') > -1) {
														item.errors.push({
															type: "1",
															message: "Field in row is not valid for database use!",
															column: item
														})
														errors++;
													}
												}
											});

											IndexService.addData({
												data: [r],
												errors: item.errors
											});
										}
									});
									IndexService.setIsoField('iso');
								}
								IndexService.setToLocalStorage();
								
								$timeout(function(){
									toastr.info(IndexService.getDataSize() + ' lines importet!', 'Information');
									$state.go('app.index.check');
								});

							}
						});

					});

				});
			}
		};

	}]);

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'ParsecsvCtrl', function(){
		//

    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'piechart', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/piechart/piechart.html',
			controller: 'PiechartCtrl',
			scope:{
				data: '=chartData',
				activeType: '=',
				activeConflict: '=',
				clickIt:'&'
			},
			link: function( scope, element, attrs ){
				//
				 function segColor(c){ return {interstate:"#807dba", intrastate:"#e08214",substate:"#41ab5d"}[c]; }

				var pC ={}, pieDim ={w:150, h: 150};
        pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

				var piesvg = d3.select(element[0]).append("svg")
            .attr("width", pieDim.w)
						.attr("height", pieDim.h)
						.attr('class', 'outer-pie')
						.append("g")
            .attr("transform", "translate("+pieDim.w/2+","+pieDim.h/2+")");
				var piesvg2 = d3.select(element[0]).append("svg")
            .attr("width", pieDim.w)
						.attr("height", pieDim.h)
						.attr('class', 'inner-pie')
						.append("g")
            .attr("transform", "translate("+pieDim.w/2+","+pieDim.h/2+")");

        // create function to draw the arcs of the pie slices.
        var arc = d3.svg
					.arc()
					.outerRadius(pieDim.r - 10)
					.innerRadius(pieDim.r - 23);
        var arc2 = d3.svg
					.arc()
					.outerRadius(pieDim.r - 23)
					.innerRadius(0);

        // create a function to compute the pie slice angles.
        var pie = d3.layout
					.pie()
					.sort(null)
					.value(function(d) { return d.count; });

        // Draw the pie slices.
        var c1 = piesvg
						.datum(scope.data)
						.selectAll("path")
						.data(pie)
						.enter()
						.append("path").attr("d", arc)
            .each(function(d) { this._current = d; })
            .style("fill", function(d) { return d.data.color; })
            .on("mouseover",mouseover).on("mouseout",mouseout);
				var c2 = piesvg2
						.datum(scope.data)
						.selectAll("path")
						.data(pie)
						.enter()
						.append("path")
						.attr("d", arc2)
		        .each(function(d) { this._current = d; })
		        .style("fill", function(d) { return d.data.color; })
						.style('cursor', 'pointer')
		        .on('click', mouseclick);
        // create function to update pie-chart. This will be used by histogram.
        pC.update = function(nD){
            piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
                .attrTween("d", arcTween);
        }
        // Utility function to be called on mouseover a pie slice.
				var typeus = angular.copy(scope.activeType);
				function mouseclick(d){
					scope.clickIt({type_id:d.data.type_id});
				}
        function mouseover(d){
            // call the update function of histogram with new data.
						typeus = angular.copy(scope.activeType);
            scope.activeType = [d.data.type_id];
						scope.$apply();
        }
        //Utility function to be called on mouseout a pie slice.
        function mouseout(d){
            // call the update function of histogram with all data.
            scope.activeType = typeus;
						scope.$apply();
        }
        // Animating the pie-slice requiring a custom function which specifies
        // how the intermediate paths should be drawn.
        function arcTween(a) {
            var i = d3.interpolate(this._current, a);
            this._current = i(0);
            return function(t) { return arc(i(t));    };
        }
				function arcTween2(a) {
            var i = d3.interpolate(this._current, a);
            this._current = i(0);
            return function(t) { return arc2(i(t));    };
        }

				scope.$watch('data', function(n, o){
					if(n === o) return false;
					piesvg.selectAll("path").data(pie(n)).transition().duration(500)
							.attrTween("d", arcTween);
					piesvg2.selectAll("path").data(pie(n)).transition().duration(500)
							.attrTween("d", arcTween2);
				})
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'PiechartCtrl', function(){
		//
    });

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('roundbar', function() {

		return {
			restrict: 'EA',
			//templateUrl: 'views/directives/roundbar/roundbar.html',
			controller: 'RoundbarCtrl',
			scope: {
				data: '=chartData',
				activeType: '=',
				activeConflict: '='
			},
			link: function(scope, element, attrs) {

				var margin = {
						top: 40,
						right: 20,
						bottom: 30,
						left: 40
					},
					width = 300 - margin.left - margin.right,
					height = 200 - margin.top - margin.bottom,
					barWidth = 20,
					space = 25;


				var scale = {
					y: d3.scale.linear()
				};
				scale.y.domain([0, 220]);
				scale.y.range([height, 0]);
				var svg = d3.select(element[0]).append("svg")
					.attr("width", width + margin.left + margin.right)
					.attr("height", height + margin.top + margin.bottom)
					.append("g")
					.attr("transform", "translate(0," + margin.top + ")");

				//x.domain(scope.data.map(function(d) { return d.letter; }));
				//y.domain([0, d3.max(scope.data, function(d) { return d.frequency; })]);
				var bars = svg.selectAll('.bars').data(scope.data).enter().append("g").attr('class', 'bars'); //.attr("transform", function(d, i) { return "translate(" + i * 20 + ", 0)"; });;

				var barsBg = bars
					.append('path')
					.attr('d', function(d, i) {
						return rounded_rect((i * (barWidth + space)), 0, barWidth, (height), barWidth / 2, true, true, false, false)
					})
					.attr('class', 'bg');
				var valueBars = bars
					.append('path')
					.attr('d', function(d, i) {
						return rounded_rect((i * (barWidth + space)), (scale.y(d.value)), barWidth, (height - scale.y(d.value)), barWidth / 2, true, true, false, false)
					})
					/*.attr('x', function(d, i) {
						return i * (barWidth + space);
					})
					.attr('y', function(d) {
						return scale.y(d.value);
					})
					.attr("width", function(d) {
						return barWidth
					})*/

				.style("fill", function(d) {
						return d.color
					})
					/*.transition()
					.duration(3000)
					.ease("quad")
					.attr("height", function(d) {
						return height - scale.y(d.value)
					})*/
				;

				var valueText = bars
					.append("text");

				valueText.text(function(d) {
						return d.value
					}).attr("x", function(d, i) {
						return i * (barWidth + space);
					})
					.attr("y", -8)
					.attr("width", function(d) {
						return barWidth
					})
					.style('fill','#4fb0e5');

				var labelsText = bars
					.append("text")
				labelsText.text(function(d){
						return d.label
					})
					.attr("x", function(d, i) {
						return i * (barWidth + space);
					})
					.attr("y", height + 20)
					.attr("width", function(d) {
						return barWidth
					})
					.style('fill', function(d){
						return d.color
					});


				function rounded_rect(x, y, w, h, r, tl, tr, bl, br) {
					var retval;
					retval = "M" + (x + r) + "," + y;
					retval += "h" + (w - 2 * r);
					if (tr) {
						retval += "a" + r + "," + r + " 0 0 1 " + r + "," + r;
					} else {
						retval += "h" + r;
						retval += "v" + r;
					}
					retval += "v" + (h - 2 * r);
					if (br) {
						retval += "a" + r + "," + r + " 0 0 1 " + -r + "," + r;
					} else {
						retval += "v" + r;
						retval += "h" + -r;
					}
					retval += "h" + (2 * r - w);
					if (bl) {
						retval += "a" + r + "," + r + " 0 0 1 " + -r + "," + -r;
					} else {
						retval += "h" + -r;
						retval += "v" + -r;
					}
					retval += "v" + (2 * r - h);
					if (tl) {
						retval += "a" + r + "," + r + " 0 0 1 " + r + "," + -r;
					} else {
						retval += "v" + -r;
						retval += "h" + r;
					}
					retval += "z";
					return retval;
				}
				scope.$watch('data', function(n, o){
					if(n === o) return false;
					//scale.y.domain([0, 50]);

						valueBars.transition().duration(500).attr('d', function(d, i) {
								var borders = barWidth / 2;
								if(scope.data[i].value <= 10){
									borders = 0;
								}
								return rounded_rect((i * (barWidth + space)), (scale.y(scope.data[i].value)), barWidth, (height - scale.y(scope.data[i].value)), borders, true, true, false, false)
						});
						valueText.transition().duration(500).tween('text', function (d,i) {
								var i = d3.interpolate(parseInt(d.value), parseInt(scope.data[i].value));
								return function (t) {
									this.textContent = (Math.round(i(t) * 1) / 1);
								};

						}).each('end', function(d, i){
								d.value = scope.data[i].value;
						});


				})
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'RoundbarCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'simplelinechart', function() {

		return {
			restrict: 'E',
			templateUrl: 'views/directives/simplelinechart/simplelinechart.html',
			controller: 'SimplelinechartCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				data:'=',
				selection:'=',
				options:'='
			},
			link: function( $scope, element, $attrs ){


			}
		};

	});

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('SimplelinechartCtrl', ["$scope", function ($scope) {
		var vm = this;
		var defaults = function(){
			return {
				invert:false
			}
		}
		vm.options = angular.extend(defaults(), vm.options);
		vm.config = {
			visible: true, // default: true
			extended: false, // default: false
			disabled: false, // default: false
			autorefresh: true, // default: true
			refreshDataOnly: false, // default: false
			deepWatchOptions: true, // default: true
			deepWatchData: true, // default: false
			deepWatchConfig: true, // default: true
			debounce: 10 // default: 10
		};
		vm.chart = {
			options: {
				chart: {}
			},
			data: []
		};

		activate();

		function activate(){
			calculateGraph();
			setChart();
		}
		function updateChart(){
			vm.chart.options.chart.forceY = [vm.range.max, vm.range.min];
		}
	 	function setChart() {
			vm.chart.options.chart = {
				type: 'lineChart',
				legendPosition: 'left',
				duration:0,
				margin: {
					top: 20,
					right: 20,
					bottom: 20,
					left: 20
				},
				x: function (d) {
					return d.x;
				},
				y: function (d) {
					return d.y;
				},
				showLegend: false,
				showValues: false,
				//showYAxis: false,

				transitionDuration: 500,
				//useInteractiveGuideline: true,
				forceY: [vm.range.max, vm.range.min],
				//yDomain:[parseInt(vm.range.min), vm.range.max],
				xAxis: {
					axisLabel: 'Year',
					axisLabelDistance: 30
				},
				yAxis: {
					axisLabel: '',
					axisLabelDistance: 30
				},
				legend: {
					rightAlign: false
				},
				lines: {
					interpolate: 'cardinal'
				}

			};

			if (vm.options.invert == true) {
				vm.chart.options.chart.forceY = [parseInt(vm.range.max), vm.range.min];
			}

			return vm.chart;
		}
		function calculateGraph() {
			var chartData = [];
			vm.range = {
				max: 0,
				min: 1000
			};
			angular.forEach(vm.selection, function (item, key) {
				var graph = {
					id: key,
					key: item.title,
					color: item.color,
					values: []
				};
				angular.forEach(vm.data, function (data, k) {
					graph.values.push({
						id: k,
						x: data[item.fields.x],
						y: data[item.fields.y]
					});
					vm.range.max = Math.max(vm.range.max, data[item.fields.y]);
					vm.range.min = Math.min(vm.range.min, data[item.fields.y]);
				});
				chartData.push(graph);
			});
			vm.range.max++;
			vm.range.min--;
			vm.chart.data = chartData;
			if (vm.options.invert == "true") {
				vm.chart.options.chart.yDomain = [parseInt(vm.range.max), vm.range.min];
			}
			return chartData;
		};
		$scope.$watch('vm.data', function (n, o) {
			if (!n) {
				return;
			}

				calculateGraph();
				updateChart();


		});
		$scope.$watch('vm.selection', function (n, o) {
			if (n === o) {
				return;
			}
		//	updateChart();
			//calculateGraph();
		})
	}]);

})();

(function(){
	"use strict";

	angular.module('app.directives').animation('.slide-toggles', ['$animateCss', function($animateCss) {

		var lastId = 0;
        var _cache = {};

        function getId(el) {
            var id = el[0].getAttribute("data-slide-toggle");
            if (!id) {
                id = ++lastId;
                el[0].setAttribute("data-slide-toggle", id);
            }
            return id;
        }
        function getState(id) {
            var state = _cache[id];
            if (!state) {
                state = {};
                _cache[id] = state;
            }
            return state;
        }

        function generateRunner(closing, state, animator, element, doneFn) {
            return function() {
                state.animating = true;
                state.animator = animator;
                state.doneFn = doneFn;
                animator.start().finally(function() {
                    if (closing && state.doneFn === doneFn) {
                        element[0].style.height = '';
                    }
                    state.animating = false;
                    state.animator = undefined;
                    state.doneFn();
                });
            }
        }

        return {
            leave: function(element, doneFn) {

                    var state = getState(getId(element));
                    var height = (state.animating && state.height) ?
                        state.height : element[0].offsetHeight;
                    var animator = $animateCss(element, {
                        from: {height: height + 'px', opacity: 1},
                        to: {height: '0px', opacity: 0}
                    });
                    if (animator) {
                        if (state.animating) {
                            state.doneFn =
                              generateRunner(true,
                                             state,
                                             animator,
                                             element,
                                             doneFn);
                            return state.animator.end();
                        }
                        else {
                            state.height = height;
                            return generateRunner(true,
                                                  state,
                                                  animator,
                                                  element,
                                                  doneFn)();
                        }
                    }

                doneFn();
            },
            enter: function(element, doneFn) {

                    var state = getState(getId(element));
                    var height = (state.animating && state.height) ?
                        state.height : element[0].offsetHeight;

                    var animator = $animateCss(element, {
                        from: {height: '0px', opacity: 0},
                        to: {height: height + 'px', opacity: 1}
                    });
                    if (animator) {
                        if (state.animating) {
                            state.doneFn = generateRunner(false,
                                                          state,
                                                          animator,
                                                          element,
                                                          doneFn);
                            return state.animator.end();
                        }
                        else {
                            state.height = height;
                            return generateRunner(false,
                                                  state,
                                                  animator,
                                                  element,
                                                  doneFn)();
                        }
                    }

                doneFn();
            }
        };
    }]);
})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'SlideToggleCtrl', function(){
		//
    });

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'styles', function() {

		return {
			restrict: 'E',
			templateUrl: 'views/directives/styles/styles.html',
			controller: 'StylesCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				item: '=',
				styles: '=',
				options:'=',
				save: '&'
			},
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('StylesCtrl', ["toastr", "DataService", function (toastr, DataService) {
		//
		var vm = this;
		vm.toggleStyle = toggleStyle;
		vm.selectedStyle = selectedStyle;
		vm.saveStyle = saveStyle;
		vm.style = [];

		function toggleStyle(style) {
			if (vm.item.style_id == style.id) {
				vm.item.style_id = 0;
			} else {
				vm.item.style_id = style.id
				vm.item.style = style;
			}
		}
		function selectedStyle(item, style) {
			return vm.item.style_id == style.id ? true : false;
		}
		function saveStyle() {
			DataService.post('styles', vm.style).then(function (data) {
				vm.styles.push(data);
				vm.createStyle = false;
					vm.style = [];
				vm.item.style = data;
				toastr.success('New Style has been saved', 'Success');
			});
		}
	}]);

})();

(function () {
	"use strict";

	angular.module('app.directives').directive('subindex', subindex);

	subindex.$inject = ['$timeout', 'smoothScroll'];

	function subindex($timeout, smoothScroll) {
		return {
			restrict: 'E',
			replace: true,
			controller: 'SubindexCtrl',
			templateUrl: 'views/directives/subindex/subindex.html',
			link: subindexLinkFunction
		};

		function subindexLinkFunction($scope, element, $attrs) {
		}
	}
})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('SubindexCtrl', ["$scope", "$filter", "$timeout", function($scope, $filter, $timeout) {
		$scope.info = false;
		$scope.setChart = setChart;
		$scope.calculateGraph = calculateGraph;
		$scope.createIndexer = createIndexer;
		$scope.calcSubRank = calcSubRank;
		$scope.toggleInfo = toggleInfo;
		$scope.createOptions = createOptions;
		$scope.getSubRank = getSubRank;
		activate();

		function activate() {
			$scope.calcSubRank();
			$scope.setChart();
			$scope.calculateGraph();
			$scope.createIndexer();
			$scope.createOptions();
			$scope.$watch('display.selectedCat', function(newItem, oldItem) {
				if (newItem === oldItem) {
					return false;
				}
				$scope.createIndexer();
				$scope.calculateGraph();
				$scope.createOptions();
				$scope.calcSubRank();
			});
			$scope.$watch('current', function(n, o) {
				if (n === o) {
					return;
				}
				$scope.calcSubRank();
			});
		}

		function toggleInfo() {
			$scope.info = !$scope.info;
		};

		function calcSubRank() {
			var rank = 0;
			angular.forEach($scope.data, function(item) {
				item[$scope.display.selectedCat.type] = parseFloat(item[$scope.display.selectedCat.type]);
				item['score'] = parseInt(item['score']);
			})
			var filter = $filter('orderBy')($scope.epi, [$scope.display.selectedCat.type, "score"], true);
			for (var i = 0; i < filter.length; i++) {
				if (filter[i].iso == $scope.current.iso) {
					rank = i + 1;
				}
			}
			$scope.current[$scope.display.selectedCat.type+'_rank'] = rank;
		}
		function getSubRank(country){
			var filter = $filter('orderBy')($scope.epi, [$scope.display.selectedCat.type, "score"], true);
			var rank = 0;
			angular.forEach(filter, function(item, key){
				if(item.country == country.country){
					rank = key;
				}
			});
			return rank+1;
		}
		function createIndexer() {
			$scope.indexer = [$scope.$parent.display.selectedCat.data];
		}

		function createOptions() {
			$scope.medianOptions = {
				color: $scope.$parent.display.selectedCat.color,
				field: $scope.$parent.display.selectedCat.type,
				handling: false,
				margin:{
					left:10
				}
			};
			$scope.medianOptionsBig = {
				color: $scope.$parent.display.selectedCat.color,
				field: $scope.$parent.display.selectedCat.type,
				handling: false,
				margin:{
					left:20
				}
			};
		}

		function setChart() {
			$scope.chart = {
				options: {
					chart: {
						type: 'lineChart',
						//height: 200,
						legendPosition: 'left',
						margin: {
							top: 20,
							right: 20,
							bottom: 20,
							left: 20
						},
						x: function(d) {
							return d.x;
						},
						y: function(d) {
							return d.y;
						},
						showValues: false,
						showYAxis: false,
						transitionDuration: 500,
						useInteractiveGuideline: true,
						forceY: [100, 0],
						xAxis: {
							axisLabel: ''
						},
						yAxis: {
							axisLabel: '',
							axisLabelDistance: 30
						},
						legend: {
							rightAlign: false,
							margin: {
								bottom: 30
							}
						},
						lines: {
							interpolate: 'cardinal'
						}
					}
				},
				data: []
			};
			return $scope.chart;
		}

		function calculateGraph() {
			var chartData = [];
			angular.forEach($scope.display.selectedCat.children, function(item, key) {
				var graph = {
					key: item.title,
					color: item.color,
					values: []
				};
				angular.forEach($scope.country.epi, function(data) {
					graph.values.push({
						x: data.year,
						y: data[item.column_name]
					});
				});
				chartData.push(graph);
			});
			$scope.chart.data = chartData;
		}
	}]);

})();

(function () {
	"use strict";

	angular.module('app.directives').directive('sunburst', function () {
		var defaults = function(){
				return {
					 mode: 'size'
				}
		};
		return {
			restrict: 'E',
			//templateUrl: 'views/directives/sunburst/sunburst.html',
			controller: 'SunburstCtrl',
			scope: {
				data: '='
			},
			link: function ($scope, element, $attrs) {
				var options = angular.extend(defaults(), $attrs);
				$scope.setChart();
				$scope.calculateGraph();
				var width = 610,
					height = width,
					radius = (width) / 2,
					x = d3.scale.linear().range([0, 2 * Math.PI]),
					y = d3.scale.pow().exponent(1.3).domain([0, 1]).range([0, radius]),

					padding = 0,
					duration = 1000,
					circPadding = 10;

				var div = d3.select(element[0]);


				var vis = div.append("svg")
					.attr("width", width + padding * 2)
					.attr("height", height + padding * 2)
					.append("g")
					.attr("transform", "translate(" + [radius + padding, radius + padding] + ")");

				/*
				div.append("p")
						.attr("id", "intro")
						.text("Click to zoom!");
				*/

				var partition = d3.layout.partition()
					.sort(null)
					.value(function (d) {
						return 1;
					});

				var arc = d3.svg.arc()
					.startAngle(function (d) {
						return Math.max(0, Math.min(2 * Math.PI, x(d.x)));
					})
					.endAngle(function (d) {
						return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
					})
					.innerRadius(function (d) {
						return Math.max(0, d.y ? y(d.y) : d.y);
					})
					.outerRadius(function (d) {
						return Math.max(0, y(d.y + d.dy));
					});

				var special1 = "Wastewater Treatment",
					special2 = "Air Pollution PM2.5 Exceedance",
					special3 = "Agricultural Subsidies",
					special4 = "Pesticide Regulation";


				var nodes = partition.nodes($scope.calculateGraph());

				var path = vis.selectAll("path").data(nodes);
				path.enter().append("path")
					.attr("id", function (d, i) {
						return "path-" + i;
					})
					.attr("d", arc)
					.attr("fill-rule", "evenodd")
					.attr("class", function (d) {
						return d.depth ? "branch" : "root";
					})
					.style("fill", setColor)
					.on("click", click);

				var text = vis.selectAll("text").data(nodes);
				var textEnter = text.enter().append("text")
					.style("fill-opacity", 1)
					.attr("text-anchor", function (d) {
						if (d.depth)
							return "middle";
						//~ return x(d.x + d.dx / 2) > Math.PI ? "end" : "start";
						else
							return "middle";
					})
					.attr("id", function (d) {
						return "depth" + d.depth;
					})
					.attr("class", function (d) {
						return "sector"
					})
					.attr("dy", function (d) {
						return d.depth ? ".2em" : "0.35em";
					})
					.attr("transform", function (d) {
						var multiline = (d.name || "").split(" ").length > 2,
							angleAlign = (d.x > 0.5 ? 2 : -2),
							angle = x(d.x + d.dx / 2) * 180 / Math.PI - 90 + (multiline ? angleAlign : 0),
							rotate = angle + (multiline ? -.5 : 0),
							transl = (y(d.y) + circPadding) + 35,
							secAngle = (angle > 90 ? -180 : 0);
						if (d.name == special3 || d.name == special4) rotate += 1;
						if (d.depth == 0) {
							transl = -2.50;
							rotate = 0;
							secAngle = 0;
						} else if (d.depth == 1) transl += -9;
						else if (d.depth == 2) transl += -5;
						else if (d.depth == 3) transl += 4;
						return "rotate(" + rotate + ")translate(" + transl + ")rotate(" + secAngle + ")";
					})
					.on("click", click);

				textEnter.append("tspan")
					.attr("x", 0)
					.text(function (d) {

						if (d.depth == 3 && d.name != special1 && d.name != special2 && d.name != special3 && d.name != special4)
							return d.name.split(" ")[0] + " " + (d.name.split(" ")[1] || "");
						else
							return d.name.split(" ")[0];
					});
				textEnter.append("tspan")
					.attr("x", 0)
					.attr("dy", "1em")
					.text(function (d) {

						if (d.depth == 3 && d.name != special1 && d.name != special2 && d.name != special3 && d.name != special4)
							return (d.name.split(" ")[2] || "") + " " + (d.name.split(" ")[3] || "");
						else
							return (d.name.split(" ")[1] || "") + " " + (d.name.split(" ")[2] || "");
					});
				textEnter.append("tspan")
					.attr("x", 0)
					.attr("dy", "1em")
					.text(function (d) {
						if (d.depth == 3 && d.name != special1 && d.name != special2 && d.name != special3 && d.name != special4)
							return (d.name.split(" ")[4] || "") + " " + (d.name.split(" ")[5] || "");
						else
							return (d.name.split(" ")[3] || "") + " " + (d.name.split(" ")[4] || "");;
					});

				function click(d) {
					// Control arc transition
					path.transition()
						.duration(duration)
						.attrTween("d", arcTween(d));

					// Somewhat of a hack as we rely on arcTween updating the scales.
					// Control the text transition
					text.style("visibility", function (e) {
							return isParentOf(d, e) ? null : d3.select(this).style("visibility");
						})
						.transition()
						.duration(duration)
						.attrTween("text-anchor", function (d) {
							return function () {
								if (d.depth)
									return "middle";
								//~ return x(d.x + d.dx / 2) > Math.PI ? "end" : "start";
								else
									return "middle";
							};
						})
						.attrTween("transform", function (d) {
							var multiline = (d.name || "").split(" ").length > 2;
							return function () {
								var multiline = (d.name || "").split(" ").length > 2,
									angleAlign = (d.x > 0.5 ? 2 : -2),
									angle = x(d.x + d.dx / 2) * 180 / Math.PI - 90 + (multiline ? angleAlign : 0),
									rotate = angle + (multiline ? -.5 : 0),
									transl = (y(d.y) + circPadding) + 35,
									secAngle = (angle > 90 ? -180 : 0);
								if (d.name == special3 || d.name == special4) rotate += 1;
								if (d.depth == 0) {
									transl = -2.50;
									rotate = 0;
									secAngle = 0;
								} else if (d.depth == 1) transl += -9;
								else if (d.depth == 2) transl += -5;
								else if (d.depth == 3) transl += 4;
								return "rotate(" + rotate + ")translate(" + transl + ")rotate(" + secAngle + ")";
							};
						})
						.style("fill-opacity", function (e) {
							return isParentOf(d, e) ? 1 : 1e-6;
						})
						.each("end", function (e) {
							d3.select(this).style("visibility", isParentOf(d, e) ? null : "hidden");
						});
				}


				function isParentOf(p, c) {
					if (p === c) return true;
					if (p.children) {
						return p.children.some(function (d) {
							return isParentOf(d, c);
						});
					}
					return false;
				}

				function setColor(d) {

					//return ;
					if (d.color)
						return d.color;
					else {
						return '#ccc';
						/*var tintDecay = 0.20;
						// Find child number
						var x = 0;
						while (d.parent.children[x] != d)
							x++;
						var tintChange = (tintDecay * (x + 1)).toString();
						return pusher.color(d.parent.color).tint(tintChange).html('hex6');*/
					}
				}

				// Interpolate the scales!
				function arcTween(d) {
					var my = maxY(d),
						xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx - 0.0009]),
						yd = d3.interpolate(y.domain(), [d.y, my]),
						yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);

					return function (d) {
						return function (t) {
							x.domain(xd(t));
							y.domain(yd(t)).range(yr(t));
							return arc(d);
						};
					};
				}

				function maxY(d) {
					return d.children ? Math.max.apply(Math, d.children.map(maxY)) : d.y + d.dy;
				}
			}
		}
	});
})();

(function () {
	"use strict";

	angular.module('app.controllers').controller('SunburstCtrl', ["$scope", function ($scope) {

		$scope.setChart = function () {
			$scope.chart = {
				options: {
					chart: {
						type: 'sunburst',
						height: 700,
						"sunburst": {
							"dispatch": {},
							"width": null,
							"height": null,
							"mode": "size",
							"id": 2088,
							"duration": 500,
							"margin": {
								"top": 0,
								"right": 0,
								"bottom": 0,
								"left": 0
							}
						},
						"tooltip": {
							"duration": 0,
							"gravity": "w",
							"distance": 25,
							"snapDistance": 0,
							"classes": null,
							"chartContainer": null,
							"fixedTop": null,
							"enabled": true,
							"hideDelay": 400,
							"headerEnabled": false,

							"offset": {
								"left": 0,
								"top": 0
							},
							"hidden": true,
							"data": null,
							"tooltipElem": null,
							"id": "nvtooltip-99347"
						},
					}
				},
				data: []
			};
			return $scope.chart;
		}
		var buildTree = function (data) {
			var children = [];
			angular.forEach(data, function (item) {
				var child = {
					'name': item.title,
					'size': item.size,
					'color': item.color,
					'children': buildTree(item.children)
				};
				if(item.color){
					child.color = item.color
				}
				if(item.size){
					child.size = item.size
				}
				children.push(child);
			});
			return children;
		};
		$scope.calculateGraph = function () {
			var chartData = {
				"name": $scope.data.title,
				"color": $scope.data.style.base_color || '#000',
				"children": buildTree($scope.data.children),
				"size": 1
			};
			$scope.chart.data = chartData;
			return chartData;
		};
		$scope.$watch('data', function (n, o) {
			if (!n) {
				return;
			}
			$scope.calculateGraph();
		})
	}]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'treemenu', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/treemenu/treemenu.html',
			controller: 'TreemenuCtrl',
			controllerAs: 'vm',
			scope:{},
			bindToController: {
				options:'=',
				item:'=?',
				selection: '=?'
			},
			replace:true,
			link: function( scope, element, attrs ){
				//
			}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'TreemenuCtrl', function(){

	})
})();

(function() {
	"use strict";

	angular.module('app.directives').directive('treeview', ["RecursionHelper", function(RecursionHelper) {
		var options = {
			editWeight: false,
			drag: false,
			edit: false,
			children: 'children'
		};
		return {
			restrict: 'E',
			templateUrl: 'views/directives/treeview/treeview.html',
			controller: 'TreeviewCtrl',
			controllerAs: 'vm',
			scope: {},
			bindToController: {
				items: '=',
				item: '=?',
				selection: '=?',
				options: '=?',
				active: '=?',
				click: '&'
			},
			replace: true,
			compile: function(element) {
				return RecursionHelper.compile(element, function(scope, iElement, iAttrs, controller, transcludeFn) {
	
					angular.extend(options, scope.vm.options)

				});
			}
		};

	}]);

})();

(function() {
	"use strict";

	angular.module('app.controllers').controller('TreeviewCtrl', ["$filter", function($filter) {
		//
		var vm = this;
		vm.selectedItem = selectedItem;
		vm.childSelected = childSelected;
		vm.toggleSelection = toggleSelection;
		vm.onDragOver = onDragOver;
		vm.onDropComplete = onDropComplete;
		vm.onMovedComplete = onMovedComplete;
		vm.addChildren = addChildren;

		activate();

		function activate() {
			if (typeof vm.options == "undefined") {
				vm.options = {
					editWeight: false,
					drag: false,
					edit: false,
					children: 'children'
				}
			}
			if (typeof vm.options.children == "undefined") {
				vm.options.children = "children";
			}
			if (typeof vm.selection == "undefined") {
				vm.selection = [];
			}
		}

		function onDragOver(event, index, external, type) {
			return true;
		}

		function onDropComplete(event, index, item, external) {
			angular.forEach(vm.items, function(entry, key) {
				if (entry.id == 0) {
					vm.items.splice(key, 1);
				}
			})
			return item;
		}

		function onMovedComplete(index, data, evt) {
			if (vm.options.allowMove) {
				return vm.items.splice(index, 1);
			}
		}

		function toggleSelection(item) {
			var index = -1;
			angular.forEach(vm.selection, function(selected, i) {
				if (selected.id == item.id) {
					index = i;
				}
			});
			if (index > -1) {
				vm.selection.splice(index, 1);
			} else {
				vm.selection.push(item);
			}
			if (typeof vm.options.selectionChanged == 'function')
				vm.options.selectionChanged();
		}

		function addChildren(item) {

			item[vm.options.children] = [];
			item.expanded = true;
		}

		function selectedItem(item) {
			var found = false;
			angular.forEach(vm.selection, function(selected) {
				if (selected.id == item.id) {
					found = true;
				}
			});
			return found;
			/*	if(vm.selection.indexOf(angular.copy(item)) > -1){
					return true;
				}
				return false;*/
		}

		function childSelected(item) {
			var found = false;
			angular.forEach(item.children, function(child) {
				if (vm.selection.indexOf(child) > -1) {
					found = true;
				}
				if (!found) {
					found = childSelected(child);

				}
			})
			return found;
		}

		/*function toggleItem(item) {
			if (typeof vm.item[vm.options.type] === "undefined") vm.item[vm.options.type] = [];
			var found = false,
				index = -1;
			angular.forEach(vm.item[vm.options.type], function(entry, i) {
				if (entry.id == item.id) {
					found = true;
					index = i;
				}
			})
			index === -1 ? vm.item[vm.options.type].push(item) : vm.item[vm.options.type].splice(index, 1);
		}*/
	}]);

})();

(function(){
	"use strict";

	angular.module('app.directives').directive( 'triangleGraph', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/triangle-graph/triangle-graph.html',
			controller: 'TriangleGraphCtrl',
			controllerAs: 'vm',
			scope: {},
			bindToController: {
				data: '=',
				ngModel: '='
			},
			link: function( scope, element, attrs ){
				//
				var width = element.parent()[0].clientWidth - 48;
				var height = width / 3;
				var xScale = d3.scale.linear()
			 .domain([0, 100])
			 .range([0, width]);

	 var yScale = d3.scale.linear()
			 .domain([0, scope.vm.data.length])
			 .range([height, 0]);
			 var svg = d3.select(element[0]).append('svg')
		 		.attr('width',width)
		 		.attr('height', height);

				svg.select('.triangle-grid')
         .selectAll('div')
         .data(scope.vm.data)
       .enter().append('div')
         .attr('class', 'triangle-box');

    //  svg.selectAll('.triangle-box')
    //      .append('svg')
    //      .attr('width', 100)
    //      .attr('height', 100)
    //    .append('g')
    //      .attr('class', 'triangles')
		 //
    //      .append('path')
    //      .attr('d', () => 'M ' + xScale(5) + ' ' + yScale(0) + ' L ' + xScale(88) + ' ' + yScale(5) + ' L ' + xScale(88) + ' ' + yScale(18815) + ' Z')
    //      .style('fill', 'rgb(222,222,222)');
		 //
    //  svg.selectAll('.triangles')
		 //
    //      .append('path')
    //      .attr('d', (d) => 'M ' + xScale(5) + ' ' + yScale(0) + ' L ' + xScale(88) + ' ' + yScale(5) + ' L ' + xScale(88) + ' ' + yScale(d.value) + ' Z')
    //      .style('fill', 'rgba(181,227,147,0.5)');


				}
		};

	});

})();

(function(){
	"use strict";

	angular.module( 'app.controllers' ).controller( 'TriangleGraphCtrl', function(){
		//
    });

})();

(function() {
	"use strict";

	angular.module('app.directives').directive('weight', function() {

		return {
			restrict: 'EA',
			templateUrl: 'views/directives/weight/weight.html',
			controller: 'WeightCtrl',
			controllerAs: 'vm',
			scope: {},
			bindToController: {
				items: '=',
				item: '=',
				options: '='
			},
			replace: true,
			link: function(scope, element, attrs) {
				//
			}
		};

	});

})();
(function() {
	"use strict";

	angular.module('app.controllers').controller('WeightCtrl', ["$scope", function($scope) {
		//
		var vm = this;
		vm.raiseWeight = raiseWeight;
		vm.lowerWeight = lowerWeight;

		activate();

		function activate() {
			calcStart();
		}

		function calcStart() {

			if (typeof vm.item.weight == "undefined" || !vm.item.weight) {
				angular.forEach(vm.items, function(entry) {
					entry.weight = 100 / vm.items.length;
				})
			}
		}

		function calcValues() {
			var fixed = vm.item.weight;
			var rest = (100 - fixed) / (vm.items.length - 1);
			angular.forEach(vm.items, function(entry) {
				if (entry !== vm.item) {
					entry.weight = rest;
				}
			});
			return rest;
		}

		function raiseWeight() {
			if(vm.item.weight >= 95) return false;
			if (vm.item.weight % 5 != 0) {
				vm.item.weight = 5 * Math.round(vm.item.weight / 5);
			} else {
				vm.item.weight += 5;
			}
			calcValues();
		}

		function lowerWeight() {
			if(vm.item.weight <= 5) return false;
			if (vm.item.weight % 5 != 0) {
				vm.item.weight = 5 * Math.round(vm.item.weight / 5) - 5;
			} else {
				vm.item.weight -= 5;
			}
			calcValues();
		}


	}]);

})();

//# sourceMappingURL=data:application/json;base64,
